using ChatCaster.Core.Models;
using ChatCaster.Core.Services.Audio;
using ChatCaster.SpeechRecognition.Whisper.Constants;
using ChatCaster.SpeechRecognition.Whisper.Exceptions;
using ChatCaster.SpeechRecognition.Whisper.Models;
using ChatCaster.SpeechRecognition.Whisper.Utils;
using Microsoft.Extensions.Logging;
using Whisper.net;

namespace ChatCaster.SpeechRecognition.Whisper.Services;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è ISpeechRecognitionService –¥–ª—è Whisper –¥–≤–∏–∂–∫–∞
/// </summary>
public class WhisperSpeechRecognitionService : ISpeechRecognitionService, IDisposable
{
    private readonly ILogger<WhisperSpeechRecognitionService> _logger;
    private readonly WhisperModelManager _modelManager;
    private readonly AudioConverter _audioConverter;

    private WhisperConfig _config;
    private WhisperProcessor? _processor;
    private WhisperFactory? _factory;
    private bool _isInitialized;
    private bool _disposed;

    public WhisperSpeechRecognitionService(
        ILogger<WhisperSpeechRecognitionService> logger,
        WhisperModelManager modelManager,
        AudioConverter audioConverter,
        WhisperConfig config)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _modelManager = modelManager ?? throw new ArgumentNullException(nameof(modelManager));
        _audioConverter = audioConverter ?? throw new ArgumentNullException(nameof(audioConverter));
        _config = config ?? throw new ArgumentNullException(nameof(config));
    }

    #region ISpeechRecognitionService Implementation

    public bool IsInitialized => _isInitialized && _processor != null;
    public string EngineName => WhisperConstants.EngineName;
    public string EngineVersion => WhisperConstants.EngineVersion;

    public async Task<bool> InitializeAsync(SpeechRecognitionConfig config)
    {
        try
        {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            _config = WhisperConfig.FromSpeechConfig(config);

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var validation = _config.Validate();

            if (!validation.IsValid)
            {
                var errors = string.Join(", ", validation.Errors);
                throw WhisperConfigurationException.InvalidConfiguration(errors);
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
            var modelPath = await _modelManager.PrepareModelAsync(_config.ModelSize, _config.ModelPath);
            _logger.LogInformation("üîç [MODEL] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {ModelPath}, —Ä–∞–∑–º–µ—Ä: {ModelSize}", modelPath,
                _config.ModelSize);


            // –°–æ–∑–¥–∞–µ–º Whisper factory
            _factory = WhisperFactory.FromPath(modelPath);

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            var processorBuilder = _factory.CreateBuilder()
                .WithThreads(_config.ThreadCount);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ Auto
            if (_config.Language != WhisperConstants.Languages.Auto)
            {
                processorBuilder = processorBuilder.WithLanguage(_config.Language);
            }
            else
            {
                _logger.LogInformation("üîç [LANG] Using auto-detection (no explicit language)");
            }


            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (_config.EnableTranslation)
            {
                processorBuilder = processorBuilder.WithTranslate();
            }

            if (!string.IsNullOrEmpty(_config.InitialPrompt))
            {
                processorBuilder = processorBuilder.WithPrompt(_config.InitialPrompt);
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            _processor = processorBuilder.Build();

            _isInitialized = true;

            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to initialize Whisper engine");
            _isInitialized = false;

            return false;
        }
    }

    public async Task<VoiceProcessingResult> RecognizeAsync(byte[] audioData, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("üîç [RECOGNIZE] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é: {ModelSize}", _config.ModelSize);

        if (!IsInitialized)
        {
            throw new WhisperInitializationException("Whisper engine is not initialized");
        }

        if (audioData == null || audioData.Length == 0)
        {
            throw WhisperAudioException.EmptyData();
        }

        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        try
        {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç Whisper
            _logger.LogInformation("üîç [RECOGNIZE] Converting audio: {AudioSize} bytes", audioData.Length);
            var samples = await _audioConverter.ConvertToSamplesAsync(audioData, cancellationToken);
            _logger.LogInformation("üîç [RECOGNIZE] Audio converted to {SampleCount} samples", samples.Length);

            // –î–û–ë–ê–í–ò–¢–¨ –ê–ù–ê–õ–ò–ó –ê–£–î–ò–û:
            var maxSample = samples.Length > 0 ? samples.Max(Math.Abs) : 0;
            var avgSample = samples.Length > 0 ? samples.Average(Math.Abs) : 0;
            var rms = samples.Length > 0 ? Math.Sqrt(samples.Average(s => s * s)) : 0;
            _logger.LogInformation("üîç [AUDIO] Max: {Max:F4}, Avg: {Avg:F4}, RMS: {RMS:F4}", maxSample, avgSample, rms);
            if (maxSample < 0.001f)
            {
                _logger.LogWarning("üîç [AUDIO] Audio signal is very quiet! Max amplitude: {Max:F6}", maxSample);
            }
            var nonZeroSamples = samples.Count(s => Math.Abs(s) > 0.0001f);
            _logger.LogInformation("üîç [AUDIO] Non-zero samples: {NonZero}/{Total} ({Percentage:F1}%)", 
                nonZeroSamples, samples.Length, (float)nonZeroSamples / samples.Length * 100);

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            var whisperResult = await ProcessWithWhisperAsync(samples, cancellationToken);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            whisperResult.AudioSizeBytes = audioData.Length;
            whisperResult.AudioDurationMs = (int)(samples.Length / (float)WhisperConstants.Audio.RequiredSampleRate * 1000);
            whisperResult.ModelUsed = _config.ModelSize;
            whisperResult.ProcessingTime = stopwatch.Elapsed;

            var result = whisperResult.ToVoiceProcessingResult();

            return result;
        }
        catch (OperationCanceledException)
        {
            _logger.LogWarning("üîç [RECOGNIZE] Recognition was cancelled");
            return new VoiceProcessingResult
            {
                Success = false, ErrorMessage = "Recognition was cancelled", ProcessingTime = stopwatch.Elapsed
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex,
                "üîç [RECOGNIZE] FAILED - Type: {ExceptionType}, Message: '{Message}', StackTrace: {StackTrace}",
                ex.GetType().Name, ex.Message ?? "NULL", ex.StackTrace);

            return new VoiceProcessingResult
            {
                Success = false,
                ErrorMessage = ex.Message ?? $"Unknown error: {ex.GetType().Name}",
                ProcessingTime = stopwatch.Elapsed
            };
        }

        finally
        {
            stopwatch.Stop();
        }
    }

    public async Task<bool> ReloadConfigAsync(SpeechRecognitionConfig config)
    {
        try
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var oldConfig = _config.Clone();

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é
            var newConfig = WhisperConfig.FromSpeechConfig(config);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            bool needsReinitialization =
                oldConfig.ModelSize != newConfig.ModelSize ||
                oldConfig.ModelPath != newConfig.ModelPath ||
                oldConfig.EnableGpu != newConfig.EnableGpu ||
                oldConfig.Language != newConfig.Language;

            if (needsReinitialization)
            {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                await DisposeProcessorAsync();

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();

                return await InitializeAsync(config);
            }

            _config = newConfig;
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError("üîç [RELOAD] FAILED: {Message}", ex.Message);
            return false;
        }
    }


    public async Task<SpeechEngineCapabilities> GetCapabilitiesAsync()
    {
        await Task.CompletedTask;

        return new SpeechEngineCapabilities
        {
            SupportsLanguageAutoDetection = true,
            SupportsGpuAcceleration = true, // Whisper.net –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GPU
            SupportsRealTimeProcessing = false, // Whisper —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏
            RequiresInternetConnection = false, // –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            SupportedSampleRates = new[]
            {
                WhisperConstants.Audio.RequiredSampleRate
            },
        };
    }

    public async Task<IEnumerable<string>> GetSupportedLanguagesAsync()
    {
        await Task.CompletedTask;
        return WhisperConstants.Languages.Supported;
    }

    #endregion

    #region Private Methods

    private async Task<WhisperResult> ProcessWithWhisperAsync(float[] samples, CancellationToken cancellationToken)
    {
        var invalidSamples = samples.Count(s => float.IsNaN(s) || float.IsInfinity(s));
        if (invalidSamples > 0)
        {
            _logger.LogError("üîç [WHISPER] Found {Count} invalid samples (NaN/Infinity)!", invalidSamples);
        }

        if (_processor == null)
        {
            throw new WhisperInitializationException("Whisper processor is not initialized");
        }

        _logger.LogInformation(
            "üîç [PROCESS] Starting Whisper processing, samples: {SampleCount}, processor: {ProcessorType}",
            samples.Length, _processor.GetType().Name);

        try
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            using var timeoutCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
            timeoutCts.CancelAfter(TimeSpan.FromSeconds(_config.RecognitionTimeoutSeconds));

            var whisperResult = new WhisperResult();
            var segments = new List<WhisperSegment>();

            _logger.LogInformation("üîç [PROCESS] About to call _processor.ProcessAsync");
            _logger.LogInformation("üîç [PROCESS] Starting Whisper processing, samples: {SampleCount}, processor: {ProcessorType}", 
                samples.Length, _processor.GetType().Name);
// –î–û–ë–ê–í–ò–¢–¨ –ü–†–û–í–ï–†–ö–ò:
            var durationSeconds = (float)samples.Length / WhisperConstants.Audio.RequiredSampleRate;
            _logger.LogInformation("üîç [WHISPER] Audio duration: {Duration:F2}s, Expected sample rate: {SampleRate}Hz", 
                durationSeconds, WhisperConstants.Audio.RequiredSampleRate);

            _logger.LogInformation("üîç [WHISPER] Config - Language: '{Language}', VAD: {VAD}, GPU: {GPU}, Timeout: {Timeout}s", 
                _config.Language, _config.UseVAD, _config.EnableGpu, _config.RecognitionTimeoutSeconds);

// –ü—Ä–æ–≤–µ—Ä–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if (durationSeconds < 0.1f)
            {
                _logger.LogWarning("üîç [WHISPER] Audio too short for Whisper: {Duration:F2}s", durationSeconds);
            }

            _logger.LogInformation("üîç [PROCESS] About to call _processor.ProcessAsync");
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            await foreach (var segment in _processor.ProcessAsync(samples, timeoutCts.Token))
            {
                _logger.LogInformation("üîç [PROCESS] Received segment: '{Text}', Start: {Start}, End: {End}",
                    segment.Text, segment.Start, segment.End);

                var whisperSegment = new WhisperSegment
                {
                    Text = segment.Text,
                    StartTime = (float)segment.Start.TotalSeconds,
                    EndTime = (float)segment.End.TotalSeconds,
                    Confidence = CalculateConfidence(segment)
                };

                segments.Add(whisperSegment);
                whisperResult.Text += segment.Text;
            }

            _logger.LogInformation("üîç [PROCESS] Processing completed, segments: {SegmentCount}, text: '{Text}'",
                segments.Count, whisperResult.Text);

            whisperResult.Segments = segments;
            whisperResult.Confidence = CalculateOverallConfidence(segments);
            whisperResult.VadUsed = _config.UseVAD;
            whisperResult.SilenceDetected = string.IsNullOrWhiteSpace(whisperResult.Text);

            return whisperResult;
        }
        catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)
        {
            _logger.LogWarning("üîç [PROCESS] Cancelled by user");
            throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
        catch (OperationCanceledException)
        {
            _logger.LogWarning("üîç [PROCESS] Timeout after {Timeout} seconds", _config.RecognitionTimeoutSeconds);
            throw WhisperRecognitionException.Timeout(TimeSpan.FromSeconds(_config.RecognitionTimeoutSeconds));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex,
                "üîç [PROCESS] ProcessWithWhisperAsync FAILED - Type: {ExceptionType}, Message: '{Message}', InnerException: {InnerException}",
                ex.GetType().Name, ex.Message ?? "NULL", ex.InnerException?.Message ?? "NULL");
            throw;
        }
    }

    private float CalculateConfidence(SegmentData segment)
    {
        // –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Whisper
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        return 0.8f; // Placeholder - Whisper.net –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ confidence
    }

    private float CalculateOverallConfidence(List<WhisperSegment> segments)
    {
        if (segments.Count == 0)
            return 0.0f;

        return segments.Average(s => s.Confidence);
    }

    private async Task DisposeProcessorAsync()
    {
        if (_processor != null)
        {
            _processor.Dispose();
            _processor = null;
        }

        if (_factory != null)
        {
            _factory.Dispose();
            _factory = null;
        }

        await Task.Delay(100);
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
    public async Task ForceMemoryCleanupAsync()
    {
        _logger.LogInformation("Forcing memory cleanup");

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        await DisposeProcessorAsync();

        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        for (int i = 0; i < 3; i++)
        {
            GC.Collect(2, GCCollectionMode.Forced, true);
            GC.WaitForPendingFinalizers();
            await Task.Delay(50);
        }

        _logger.LogInformation("Memory cleanup completed");
    }

    #endregion

    #region IDisposable

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            try
            {
                DisposeProcessorAsync().GetAwaiter().GetResult();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error disposing Whisper processor");
            }

            _disposed = true;
        }
    }

    #endregion

}
