using ChatCaster.Core.Models;
using ChatCaster.Core.Services.Audio;
using ChatCaster.Core.Services.Core;
using ChatCaster.Core.Services.System;
using ChatCaster.Core.Services.UI;
using ChatCaster.Windows.Managers.AudioSettings;
using ChatCaster.Windows.ViewModels.Base;
using ChatCaster.Windows.ViewModels.Components;
using CommunityToolkit.Mvvm.ComponentModel;
using Serilog;

namespace ChatCaster.Windows.ViewModels
{
    public partial class AudioSettingsViewModel : BaseSettingsViewModel
    {
        #region Services
        
        private readonly ILocalizationService _localizationService;
        
        #endregion

        #region Components

        public AudioDeviceComponentViewModel AudioDeviceComponent { get; }
        public WhisperModelComponentViewModel WhisperModelComponent { get; }

        #endregion

        #region Observable Properties

        [ObservableProperty]
        private int _maxRecordingSeconds = 10;

        [ObservableProperty]
        private int _selectedSampleRate = 16000;

        [ObservableProperty]
        private string _microphoneStatusText = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤";

        [ObservableProperty]
        private string _microphoneStatusColor = "#4caf50";

        // –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –°–í–û–ô–°–¢–í–ê
        [ObservableProperty]
        private string _pageTitle = "–ê—É–¥–∏–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ";

        [ObservableProperty]
        private string _pageDescription = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, –º–æ–¥–µ–ª–∏ Whisper –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø–∏—Å–∏";

        [ObservableProperty]
        private string _mainSettingsTitle = "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏";

        [ObservableProperty]
        private string _microphoneLabel = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω:";

        [ObservableProperty]
        private string _whisperModelLabel = "–ú–æ–¥–µ–ª—å Whisper:";

        [ObservableProperty]
        private string _recordingDurationLabel = "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏:";

        [ObservableProperty]
        private string _languageLabel = "–Ø–∑—ã–∫:";

        [ObservableProperty]
        private string _autoSaveText = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏";

        /// <summary>
        /// –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public List<int> AvailableSampleRates { get; } = new()
        {
            8000, 16000, 22050, 44100, 48000
        };

        #endregion

        #region Constructor

        public AudioSettingsViewModel(
            IConfigurationService configurationService,
            AppConfig currentConfig,
            ISpeechRecognitionService speechRecognitionService,
            IAudioCaptureService audioService,
            INotificationService notificationService,
            ILocalizationService localizationService) 
            : base(configurationService, currentConfig)
        {
            _localizationService = localizationService ?? throw new ArgumentNullException(nameof(localizationService));
            
            Log.Information("AudioSettingsViewModel –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥)");

            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            var audioDeviceManager = new AudioDeviceManager(audioService);
            var whisperModelManager = new WhisperModelManager(speechRecognitionService, currentConfig);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            AudioDeviceComponent = new AudioDeviceComponentViewModel(audioDeviceManager, notificationService);
            WhisperModelComponent = new WhisperModelComponentViewModel(whisperModelManager);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            SubscribeToComponentEvents();

            // –ü–û–î–ü–ò–°–´–í–ê–ï–ú–°–Ø –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–ï –Ø–ó–´–ö–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –°–¢–†–û–ö–ò
            _localizationService.LanguageChanged += OnLanguageChanged;
            UpdateLocalizedStrings();

            Log.Information("AudioSettingsViewModel —Å–æ–∑–¥–∞–Ω —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π");
        }

        #endregion

        #region Localization

        private void OnLanguageChanged(object? sender, EventArgs e)
        {
            UpdateLocalizedStrings();
            Log.Debug("AudioSettingsViewModel: –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
        }

        private void UpdateLocalizedStrings()
        {
            PageTitle = _localizationService.GetString("Audio_PageTitle");
            PageDescription = _localizationService.GetString("Audio_PageDescription");
            MainSettingsTitle = _localizationService.GetString("Audio_MainSettings");
            MicrophoneLabel = _localizationService.GetString("Audio_Microphone");
            WhisperModelLabel = _localizationService.GetString("Audio_WhisperModel");
            RecordingDurationLabel = _localizationService.GetString("Audio_RecordingDuration");
            LanguageLabel = _localizationService.GetString("Audio_Language");
            AutoSaveText = _localizationService.GetString("Audio_AutoSave");
        }

        #endregion

        #region Observable Property Changed Handlers - IMMEDIATE APPLY

        partial void OnMaxRecordingSecondsChanged(int value)
        {
            if (IsLoadingUI) return;
            Log.Information("–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–æ: {Seconds}—Å", value);
            _ = OnUISettingChangedAsync();
        }

        partial void OnSelectedSampleRateChanged(int value)
        {
            if (IsLoadingUI) return;
            Log.Information("–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞: {SampleRate}Hz", value);
            _ = OnUISettingChangedAsync();
        }

        #endregion

        #region BaseSettingsViewModel Implementation

        protected override async Task LoadPageSpecificSettingsAsync()
        {
            Log.Information("AudioSettingsViewModel LoadPageSpecificSettingsAsync –ù–ê–ß–ê–¢");

            try
            {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                MaxRecordingSeconds = _currentConfig.Audio.MaxRecordingSeconds;
                SelectedSampleRate = _currentConfig.Audio.SampleRate;

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
                await AudioDeviceComponent.LoadDevicesAsync();
                AudioDeviceComponent.SetSelectedDeviceFromConfig(_currentConfig.Audio.SelectedDeviceId);

                // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                await WhisperModelComponent.LoadModelsWithStatusAsync();
        
                // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
                var modelSize = _currentConfig.SpeechRecognition.EngineSettings.TryGetValue("ModelSize", out var modelObj) 
                    ? modelObj?.ToString() 
                    : "tiny"; // Fallback –Ω–∞ tiny –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        
                Log.Information("AudioSettingsViewModel —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {ModelSize}", modelSize);
                WhisperModelComponent.SetSelectedModelFromConfig(modelSize);
        
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
                WhisperModelComponent.SelectedLanguage = _currentConfig.SpeechRecognition.Language;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
                await WhisperModelComponent.CheckModelStatusAsync();

                Log.Information("AudioSettingsViewModel –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –≤ LoadPageSpecificSettingsAsync");
            }
        }

        protected override Task ApplySettingsToConfigAsync(AppConfig config)
        {
            try
            {
                Log.Information("AudioSettingsViewModel –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                config.Audio.SelectedDeviceId = AudioDeviceComponent.SelectedDevice?.Id ?? "";
                config.Audio.SampleRate = SelectedSampleRate;
                config.Audio.MaxRecordingSeconds = MaxRecordingSeconds;

                // –ü—Ä–∏–º–µ–Ω—è–µ–º Whisper –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                config.SpeechRecognition.Language = WhisperModelComponent.SelectedLanguage;
                config.SpeechRecognition.EngineSettings["ModelSize"] = WhisperModelComponent.SelectedModel?.ModelSize ?? "tiny";
                
                Log.Information("AudioSettingsViewModel –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                return Task.CompletedTask;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                throw;
            }
        }

        protected override async Task ApplySettingsToServicesAsync()
        {
            try
            {
                Log.Information("AudioSettingsViewModel –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å–µ—Ä–≤–∏—Å–∞–º");

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                var deviceApplied = await AudioDeviceComponent.ApplySelectedDeviceAsync();
                if (deviceApplied)
                {
                    Log.Information("AudioSettingsViewModel –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ");
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å Whisper —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
                Log.Information("üîç [APPLY] –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å Whisper –∫ —Å–µ—Ä–≤–∏—Å—É");
                var modelApplied = await WhisperModelComponent.ModelManager.ApplyCurrentConfigAsync();
        
                if (modelApplied)
                {
                    Log.Information("üîç [APPLY] ‚úÖ –ú–æ–¥–µ–ª—å Whisper —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞");
                }
                else
                {
                    Log.Error("üîç [APPLY] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Whisper");
                }

                Log.Information("AudioSettingsViewModel –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Å–µ—Ä–≤–∏—Å–∞–º");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —Å–µ—Ä–≤–∏—Å–∞–º");
                throw;
            }
        }
        
        public override void SubscribeToUIEvents()
        {
            Log.Information("AudioSettingsViewModel UI —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ Observable —Å–≤–æ–π—Å—Ç–≤–∞");
        }

        protected override void CleanupPageSpecific()
        {
            try
            {
                Log.Debug("AudioSettingsViewModel Cleanup –Ω–∞—á–∞—Ç");
                
                _localizationService.LanguageChanged -= OnLanguageChanged;
                
                UnsubscribeFromComponentEvents();
                Log.Information("AudioSettingsViewModel Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ cleanup AudioSettingsViewModel");
            }
        }

        #endregion

        #region Component Events Management

        private void SubscribeToComponentEvents()
        {
            try
            {
                AudioDeviceComponent.DeviceChanged += OnDeviceChangedAsync;
                AudioDeviceComponent.StatusChanged += OnComponentStatusChanged;
                
                WhisperModelComponent.ModelChanged += OnModelChangedAsync;
                WhisperModelComponent.LanguageChanged += OnLanguageChangedAsync;
                
                Log.Debug("AudioSettingsViewModel —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
            }
        }

        private void UnsubscribeFromComponentEvents()
        {
            try
            {
                AudioDeviceComponent.DeviceChanged -= OnDeviceChangedAsync;
                AudioDeviceComponent.StatusChanged -= OnComponentStatusChanged;
                
                WhisperModelComponent.ModelChanged -= OnModelChangedAsync;
                WhisperModelComponent.LanguageChanged -= OnLanguageChangedAsync;
                
                Log.Debug("AudioSettingsViewModel —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ç–ø–∏—Å–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
            }
        }

        #endregion

        #region Event Handlers

        private async Task OnDeviceChangedAsync()
        {
            if (IsLoadingUI) return;
            Log.Debug("AudioSettingsViewModel —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            await OnUISettingChangedAsync();
        }

        private async Task OnModelChangedAsync()
        {
            if (IsLoadingUI) return;
            Log.Debug("AudioSettingsViewModel –º–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            await OnUISettingChangedAsync();
        }

        private async Task OnLanguageChangedAsync()
        {
            if (IsLoadingUI) return;
            Log.Debug("AudioSettingsViewModel —è–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            await OnUISettingChangedAsync();
        }

        private void OnComponentStatusChanged(string status)
        {
            StatusMessage = status;
            MicrophoneStatusText = status;
            MicrophoneStatusColor = DetermineStatusColor(status);
            Log.Debug("AudioSettingsViewModel —Å—Ç–∞—Ç—É—Å –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {Status}", status);
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
        /// </summary>
        private string DetermineStatusColor(string status)
        {
            return status.ToLower() switch
            {
                var s when s.Contains("—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è") => "#ff9800", // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                var s when s.Contains("—Ä–∞–±–æ—Ç–∞–µ—Ç") => "#4caf50",    // –ó–µ–ª–µ–Ω—ã–π
                var s when s.Contains("–ø—Ä–æ–±–ª–µ–º–∞") || s.Contains("–æ—à–∏–±–∫–∞") => "#f44336", // –ö—Ä–∞—Å–Ω—ã–π
                _ => "#4caf50" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π
            };
        }

        #endregion
    }
}