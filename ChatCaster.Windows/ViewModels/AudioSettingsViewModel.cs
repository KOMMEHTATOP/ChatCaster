using ChatCaster.Core.Models;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.ViewModels.Base;
using ChatCaster.Windows.ViewModels.Settings.Speech;
using CommunityToolkit.Mvvm.ComponentModel;
using Serilog;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;

namespace ChatCaster.Windows.ViewModels;

public partial class AudioSettingsViewModel : BaseSettingsViewModel
{
    #region Private Fields
    
    private readonly WhisperModelManager _whisperModelManager;
    
    // UI Controls
    private ComboBox? _deviceComboBox;
    private ComboBox? _modelComboBox;
    private ComboBox? _languageComboBox;
    private Slider? _maxRecordingSecondsSlider;
    
    #endregion

    #region Observable Properties

    [ObservableProperty]
    private List<AudioDevice> _availableDevices = new();

    [ObservableProperty]
    private AudioDevice? _selectedDevice;

    [ObservableProperty]
    private WhisperModelItem? _selectedModel;

    [ObservableProperty]
    private string _selectedLanguage = "ru";

    [ObservableProperty]
    private int _maxRecordingSeconds = 30;

    [ObservableProperty]
    private List<int> _availableSampleRates = new() { 8000, 16000, 22050, 44100, 48000 };

    [ObservableProperty]
    private int _selectedSampleRate = 16000;

    #endregion

    #region Public Properties for UI Binding

    /// <summary>
    /// –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ UI
    /// </summary>
    public ObservableCollection<WhisperModelItem> AvailableModels => _whisperModelManager.AvailableModels;

    #endregion

    #region Constructor

    public AudioSettingsViewModel(
        ConfigurationService configurationService,
        ServiceContext serviceContext,
        WhisperModelManager whisperModelManager) 
        : base(configurationService, serviceContext)
    {
        _whisperModelManager = whisperModelManager ?? throw new ArgumentNullException(nameof(whisperModelManager));
        
        Log.Information("AudioSettingsViewModel —Å–æ–∑–¥–∞–Ω —Å WhisperModelManager");
    }

    #endregion

    #region Observable Property Changed Handlers

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    /// </summary>
    partial void OnSelectedModelChanged(WhisperModelItem? value)
    {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Manager
        _whisperModelManager.SelectedModel = value;
        
        Log.Information("SelectedModel –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {Model} ({DisplayName})", 
            value?.Model, value?.DisplayName);
    }

    #endregion

    #region UI Controls Setup

    /// <summary>
    /// –°–≤—è–∑—ã–≤–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å ViewModel
    /// </summary>
    public void SetUIControls(
        ComboBox deviceComboBox,
        ComboBox modelComboBox, 
        ComboBox languageComboBox,
        Slider maxRecordingSecondsSlider)
    {
        _deviceComboBox = deviceComboBox;
        _modelComboBox = modelComboBox;
        _languageComboBox = languageComboBox;
        _maxRecordingSecondsSlider = maxRecordingSecondsSlider;
        
        Log.Information("UI Controls —Å–≤—è–∑–∞–Ω—ã —Å ViewModel");
    }

    #endregion

    #region BaseSettingsViewModel Implementation

    protected override async Task LoadPageSpecificSettingsAsync()
    {
        try
        {
            Log.Information("–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Audio —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—á–µ—Ä–µ–∑ ServiceContext)
            await LoadAudioDevicesAsync().ConfigureAwait(false);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∫ UI (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ UI –ø–æ—Ç–æ–∫–µ)
            await Application.Current.Dispatcher.InvokeAsync(() => ApplyConfigToUI());
            
            Log.Information("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Audio —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Audio —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
        }
    }

    protected override async Task ApplySettingsToConfigAsync(AppConfig config)
    {
        try
        {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ background –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
            await Task.Yield();
            
            Log.Information("–ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Audio –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config.Audio.SelectedDeviceId = SelectedDevice?.Id ?? "";
            config.Audio.SampleRate = SelectedSampleRate;
            config.Audio.MaxRecordingSeconds = MaxRecordingSeconds;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º Whisper –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config.Whisper.Model = SelectedModel?.Model ?? WhisperModel.Base;
            config.Whisper.Language = SelectedLanguage;
            
            Log.Information("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: Device={DeviceId}, Model={Model}, Language={Language}", 
                config.Audio.SelectedDeviceId, config.Whisper.Model, config.Whisper.Language);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            throw;
        }
    }

    protected override async Task ApplySettingsToServicesAsync()
    {
        try
        {
            Log.Information("–ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å–µ—Ä–≤–∏—Å–∞–º...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ WhisperModelManager
            if (SelectedModel != null)
            {
                _whisperModelManager.SelectedModel = SelectedModel;
                await _whisperModelManager.CheckModelStatusAsync().ConfigureAwait(false);
            }
            
            Log.Information("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Å–µ—Ä–≤–∏—Å–∞–º");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —Å–µ—Ä–≤–∏—Å–∞–º");
            throw;
        }
    }

    public override void SubscribeToUIEvents()
    {
        try
        {
            Log.Information("=== –ü–û–î–ü–ò–°–ö–ê –ù–ê UI –°–û–ë–´–¢–ò–Ø ===");
            Log.Information("ModelComboBox: {IsNotNull}", _modelComboBox != null);
            Log.Information("DeviceComboBox: {IsNotNull}", _deviceComboBox != null);
            Log.Information("LanguageComboBox: {IsNotNull}", _languageComboBox != null);
            
            if (_modelComboBox != null)
            {
                _modelComboBox.SelectionChanged += OnModelSelectionChanged;
                Log.Information("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ModelComboBox.SelectionChanged");
            }
            else
            {
                Log.Warning("‚ùå ModelComboBox is null - –Ω–µ –º–æ–∂–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è");
            }

            if (_deviceComboBox != null)
            {
                _deviceComboBox.SelectionChanged += OnDeviceSelectionChanged;
                Log.Information("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ DeviceComboBox.SelectionChanged");
            }

            if (_languageComboBox != null)
            {
                _languageComboBox.SelectionChanged += OnLanguageSelectionChanged;
                Log.Information("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ LanguageComboBox.SelectionChanged");
            }

            if (_maxRecordingSecondsSlider != null)
            {
                _maxRecordingSecondsSlider.ValueChanged += OnMaxRecordingSecondsSliderChanged;
                Log.Information("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ MaxRecordingSecondsSlider.ValueChanged");
            }

            Log.Information("–°–æ–±—ã—Ç–∏—è UI –ø–æ–¥–ø–∏—Å–∞–Ω—ã –¥–ª—è AudioSettings");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ UI —Å–æ–±—ã—Ç–∏—è AudioSettings");
        }
    }

    protected override void UnsubscribeFromUIEvents()
    {
        try
        {
            if (_modelComboBox != null)
                _modelComboBox.SelectionChanged -= OnModelSelectionChanged;

            if (_deviceComboBox != null)
                _deviceComboBox.SelectionChanged -= OnDeviceSelectionChanged;

            if (_languageComboBox != null)
                _languageComboBox.SelectionChanged -= OnLanguageSelectionChanged;

            if (_maxRecordingSecondsSlider != null)
                _maxRecordingSecondsSlider.ValueChanged -= OnMaxRecordingSecondsSliderChanged;

            Log.Debug("–°–æ–±—ã—Ç–∏—è UI –æ—Ç–ø–∏—Å–∞–Ω—ã –¥–ª—è AudioSettings");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç UI —Å–æ–±—ã—Ç–∏–π AudioSettings");
        }
    }

    protected override void CleanupPageSpecific()
    {
        try
        {
            _whisperModelManager?.Cleanup();
            Log.Debug("WhisperModelManager –æ—á–∏—â–µ–Ω");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ WhisperModelManager");
        }
    }

    #endregion

    #region Event Handlers

    private void OnModelSelectionChanged(object? sender, SelectionChangedEventArgs e)
    {
        if (IsLoadingUI) return;

        Log.Information("üîÑ OnModelSelectionChanged –í–´–ó–í–ê–ù!");
        Log.Information("Sender: {Sender}", sender?.GetType().Name);
        
        if (sender is ComboBox comboBox && comboBox.SelectedItem is WhisperModelItem selectedModel)
        {
            Log.Information("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {Model} ({DisplayName})", 
                selectedModel.Model, selectedModel.DisplayName);
            
            SelectedModel = selectedModel;
            _ = OnModelSelectionChangedAsync();
        }
        else
        {
            Log.Warning("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø SelectedItem: {Type}", 
                ((ComboBox?)sender)?.SelectedItem?.GetType().Name ?? "null");
        }
    }

    private void OnDeviceSelectionChanged(object? sender, SelectionChangedEventArgs e)
    {
        if (IsLoadingUI) return;
        
        if (sender is ComboBox comboBox && comboBox.SelectedItem is AudioDevice device)
        {
            SelectedDevice = device;
            _ = OnUISettingChangedAsync();
        }
    }

    private void OnLanguageSelectionChanged(object? sender, SelectionChangedEventArgs e)
    {
        if (IsLoadingUI) return;
        
        if (sender is ComboBox comboBox && comboBox.SelectedItem is string language)
        {
            SelectedLanguage = language;
            _ = OnUISettingChangedAsync();
        }
    }

    private void OnMaxRecordingSecondsSliderChanged(object? sender, RoutedPropertyChangedEventArgs<double> e)
    {
        if (IsLoadingUI) return;
        
        MaxRecordingSeconds = (int)e.NewValue;
        _ = OnUISettingChangedAsync();
    }

    private async Task OnModelSelectionChangedAsync()
    {
        try
        {
            Log.Information("=== –°–ú–ï–ù–ê –ú–û–î–ï–õ–ò –í UI ===");
            Log.Information("–ù–æ–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {Model} ({DisplayName})", 
                SelectedModel?.Model, SelectedModel?.DisplayName);
            
            await OnUISettingChangedAsync();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
            if (SelectedModel != null)
            {
                Log.Information("–í—ã–∑—ã–≤–∞–µ–º CheckModelStatusAsync –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...");
                
                try
                {
                    await _whisperModelManager.CheckModelStatusAsync().ConfigureAwait(false);
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏");
                }
            }
            
            Log.Information("–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {ModelName}", SelectedModel?.DisplayName ?? "None");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏");
        }
    }

    #endregion

    #region Private Methods

    private async Task LoadAudioDevicesAsync()
    {
        try
        {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            await Task.Yield();
            
            // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –∏–∑ ServiceContext
            // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ AudioCaptureService
            AvailableDevices = new List<AudioDevice>();
            
            Log.Information("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {Count} –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", AvailableDevices.Count);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
            throw;
        }
    }

    private void ApplyConfigToUI()
    {
        if (!IsReadyForOperation()) return;

        try
        {
            var config = _serviceContext!.Config!;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            MaxRecordingSeconds = config.Audio.MaxRecordingSeconds;
            SelectedSampleRate = config.Audio.SampleRate;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º Whisper –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            SelectedModel = _whisperModelManager.FindModelByEnum(config.Whisper.Model);
            SelectedLanguage = config.Whisper.Language;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            if (SelectedModel != null)
            {
                _whisperModelManager.SelectedModel = SelectedModel;
            }
            
            Log.Information("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ UI: Device={DeviceId}, Model={Model}, Language={Language}", 
                config.Audio.SelectedDeviceId, config.Whisper.Model, config.Whisper.Language);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ UI");
        }
    }

    #endregion
}