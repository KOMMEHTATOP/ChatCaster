using ChatCaster.Core.Models;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.ViewModels.Base;
using ChatCaster.Windows.ViewModels.Settings.Speech;
using CommunityToolkit.Mvvm.ComponentModel;
using Serilog;
using System.Collections.ObjectModel;

namespace ChatCaster.Windows.ViewModels.Settings;

public partial class AudioSettingsViewModel : BaseSettingsViewModel
{

    #region Private Fields

    private readonly WhisperModelManager _whisperModelManager;

    #endregion

    #region Observable Properties with Immediate Apply

    [ObservableProperty]
    private List<AudioDevice> _availableDevices = new();

    [ObservableProperty]
    private AudioDevice? _selectedDevice;

    [ObservableProperty]
    private WhisperModelItem? _selectedModel;

    [ObservableProperty]
    private string _selectedLanguage = "ru";

    [ObservableProperty]
    private int _maxRecordingSeconds = 10;

    [ObservableProperty]
    private int _selectedSampleRate = 16000;

    // üî• –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏
    [ObservableProperty]
    private bool _isModelReady = false;

    [ObservableProperty]
    private bool _isModelNotReady = true;

    [ObservableProperty]
    private bool _isModelDownloading = false;

    [ObservableProperty]
    private string _modelStatusText = "–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞";

    [ObservableProperty]
    private string _modelStatusColor = "#4caf50";

    #endregion
    #region Public Properties for UI Binding

    /// <summary>
    /// –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ UI
    /// </summary>
    public ObservableCollection<WhisperModelItem> AvailableModels => _whisperModelManager.AvailableModels;

    /// <summary>
    /// üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ WhisperModelManager –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public WhisperModelManager WhisperModelManager => _whisperModelManager;

    /// <summary>
    /// –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public List<int> AvailableSampleRates { get; } = new()
    {
        8000,
        16000,
        22050,
        44100,
        48000
    };

    #endregion

    #region Constructor

    public AudioSettingsViewModel(
        ConfigurationService configurationService,
        ServiceContext serviceContext,
        WhisperModelManager whisperModelManager)
        : base(configurationService, serviceContext)
    {
        Log.Information("[AudioSettingsViewModel] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω");

        _whisperModelManager = whisperModelManager ?? throw new ArgumentNullException(nameof(whisperModelManager));

        Log.Information("[AudioSettingsViewModel] —Å–æ–∑–¥–∞–Ω —Å WhisperModelManager");
    }

    #endregion

    #region Observable Property Changed Handlers - IMMEDIATE APPLY

    /// <summary>
    /// Immediate Apply: –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ
    /// </summary>
    partial void OnSelectedDeviceChanged(AudioDevice? value)
    {
        if (IsLoadingUI) return;

        Log.Information("üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {DeviceName} ({DeviceId})",
            value?.Name ?? "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ", value?.Id ?? "");

        // Immediate Apply
        _ = OnUISettingChangedAsync();
    }

    /// <summary>
    /// Immediate Apply: –ú–æ–¥–µ–ª—å Whisper –∏–∑–º–µ–Ω–µ–Ω–∞
    /// </summary>
    partial void OnSelectedModelChanged(WhisperModelItem? value)
    {
        if (IsLoadingUI) return;

        Log.Information("üîÑ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {Model} ({DisplayName})",
            value?.Model, value?.DisplayName);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Manager
        _whisperModelManager.SelectedModel = value;

        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        _ = Task.Run(async () =>
        {
            try
            {
                await _whisperModelManager.CheckModelStatusAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏");
            }
        });

        // Immediate Apply
        _ = OnUISettingChangedAsync();
    }

    /// <summary>
    /// Immediate Apply: –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω
    /// </summary>
    partial void OnSelectedLanguageChanged(string value)
    {
        if (IsLoadingUI) return;

        Log.Information("üîÑ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω: {Language}", value);

        // Immediate Apply
        _ = OnUISettingChangedAsync();
    }

    /// <summary>
    /// Immediate Apply: –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–æ
    /// </summary>
    partial void OnMaxRecordingSecondsChanged(int value)
    {
        if (IsLoadingUI) return;

        Log.Information("üîÑ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–æ: {Seconds}—Å", value);

        // Immediate Apply - –û–°–ù–û–í–ù–ê–Ø –§–ò–ß–ê!
        _ = OnUISettingChangedAsync();
    }

    /// <summary>
    /// Immediate Apply: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞
    /// </summary>
    partial void OnSelectedSampleRateChanged(int value)
    {
        if (IsLoadingUI) return;

        Log.Information("üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞: {SampleRate}Hz", value);

        // Immediate Apply
        _ = OnUISettingChangedAsync();
    }

    #endregion

    #region BaseSettingsViewModel Implementation

    protected override async Task LoadPageSpecificSettingsAsync()
    {
        Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] LoadPageSpecificSettingsAsync –ù–ê–ß–ê–¢");

        try
        {
            Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—ã–∑—ã–≤–∞–µ–º LoadAudioDevicesAsync()");
            await LoadAudioDevicesAsync();
            Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] LoadAudioDevicesAsync –ó–ê–í–ï–†–®–ï–ù");

            Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–ï–†–ï–î ApplyConfigToProperties()");
            ApplyConfigToProperties();
            Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–û–°–õ–ï ApplyConfigToProperties()");

            // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏...");
            await _whisperModelManager.CheckModelStatusAsync();
            Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

            Log.Information("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] LoadPageSpecificSettingsAsync –ó–ê–í–ï–†–®–ï–ù");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –≤ LoadPageSpecificSettingsAsync");
        }
    }

    protected override async Task ApplySettingsToConfigAsync(AppConfig config)
    {
        try
        {
            Log.Information("[AudioSettingsViewModel] –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config.Audio.SelectedDeviceId = SelectedDevice?.Id ?? "";
            config.Audio.SampleRate = SelectedSampleRate;
            config.Audio.MaxRecordingSeconds = MaxRecordingSeconds;

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º Whisper –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º fallback –Ω–∞ Tiny
            config.Whisper.Model = SelectedModel?.Model ?? WhisperModel.Tiny;
            config.Whisper.Language = SelectedLanguage;

            Log.Information(
                "[AudioSettingsViewModel] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: Device={DeviceId}, Model={Model}, Language={Language}, Time={Seconds}s",
                config.Audio.SelectedDeviceId, config.Whisper.Model, config.Whisper.Language,
                config.Audio.MaxRecordingSeconds);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "[AudioSettingsViewModel] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            throw;
        }
    }
    
    protected override async Task ApplySettingsToServicesAsync()
    {
        try
        {
            Log.Information("[AudioSettingsViewModel] –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å–µ—Ä–≤–∏—Å–∞–º...");

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if (SelectedDevice != null && _serviceContext?.AudioService != null)
            {
                await _serviceContext.AudioService.SetActiveDeviceAsync(SelectedDevice.Id);
                Log.Information("[AudioSettingsViewModel] –ê–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {DeviceName}",
                    SelectedDevice.Name);
            }

            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Whisper –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞
            if (SelectedModel != null)
            {
                await _whisperModelManager.CheckModelStatusAsync();
                Log.Information("[AudioSettingsViewModel] –ú–æ–¥–µ–ª—å Whisper –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {Model}",
                    SelectedModel.DisplayName);
            }

            Log.Information("[AudioSettingsViewModel] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Å–µ—Ä–≤–∏—Å–∞–º");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "[AudioSettingsViewModel] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —Å–µ—Ä–≤–∏—Å–∞–º");
            throw;
        }
    }

    public override void SubscribeToUIEvents()
    {
        // ‚úÖ –£–ë–†–ê–õ–ò: –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ UI —Å–æ–±—ã—Ç–∏—è
        // Observable —Å–≤–æ–π—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ XAML –ø—Ä–∏–≤—è–∑–∫–∏
        Log.Information("[AudioSettingsViewModel] UI —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ XAML –ø—Ä–∏–≤—è–∑–∫–∏");
    }

    protected override void CleanupPageSpecific()
    {
        try
        {
            _whisperModelManager?.Cleanup();
            Log.Debug("[AudioSettingsViewModel] WhisperModelManager –æ—á–∏—â–µ–Ω");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "[AudioSettingsViewModel] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏");
        }
    }

    #endregion

    #region Private Methods

    /// <summary>
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    /// </summary>
    private async Task LoadAudioDevicesAsync()
    {
        try
        {
            if (_serviceContext?.AudioService == null)
            {
                Log.Error("[AudioSettingsViewModel] AudioService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                AvailableDevices = new List<AudioDevice>();
                return;
            }

            var devices = await _serviceContext.AudioService.GetAvailableDevicesAsync();
            AvailableDevices = devices.ToList();

            Log.Information("[AudioSettingsViewModel] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {Count} –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", AvailableDevices.Count);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "[AudioSettingsViewModel] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
            AvailableDevices = new List<AudioDevice>();
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∫ Observable —Å–≤–æ–π—Å—Ç–≤–∞–º
    /// </summary>
    private void ApplyConfigToProperties()
    {
        try
        {
            var config = _serviceContext!.Config!;

            Log.Information("[AudioSettingsViewModel] –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º...");

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º IsLoadingUI —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞
            var wasLoading = IsLoadingUI;
            IsLoadingUI = false;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            MaxRecordingSeconds = config.Audio.MaxRecordingSeconds;
            SelectedSampleRate = config.Audio.SampleRate;

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if (!string.IsNullOrEmpty(config.Audio.SelectedDeviceId))
            {
                SelectedDevice = AvailableDevices.FirstOrDefault(d => d.Id == config.Audio.SelectedDeviceId);
                Log.Information("[AudioSettingsViewModel] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {DeviceId} -> {DeviceName}", 
                    config.Audio.SelectedDeviceId, SelectedDevice?.Name ?? "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ò–õ–ò –ø—É—Å—Ç–æ–µ - –∞–≤—Ç–æ–≤—ã–±–æ—Ä
            if (SelectedDevice == null && AvailableDevices.Any())
            {
                SelectedDevice = AvailableDevices.FirstOrDefault(d => d.IsDefault) 
                                 ?? AvailableDevices.First();
                Log.Information("–ê–≤—Ç–æ–≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {DeviceName}", SelectedDevice.Name);
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º Whisper –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            SelectedModel = _whisperModelManager.FindModelByEnum(config.Whisper.Model)
                            ?? WhisperModelFactory.GetDefaultModel(); // ‚úÖ FALLBACK –Ω–∞ Tiny –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            SelectedLanguage = config.Whisper.Language;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            _whisperModelManager.SelectedModel = SelectedModel;

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ IsLoadingUI
            IsLoadingUI = wasLoading;

            Log.Information(
                "[AudioSettingsViewModel] –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω: Device={DeviceName}, Model={Model}, Language={Language}, Time={Seconds}s",
                SelectedDevice?.Name, SelectedModel?.DisplayName, SelectedLanguage, MaxRecordingSeconds);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "[AudioSettingsViewModel] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º");
        }
    }
    /// <summary>
    /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –¥–ª—è UI
    /// </summary>
    public void UpdateModelStatus(string status, string color, ModelState state)
    {
        ModelStatusText = status;
        ModelStatusColor = color;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        IsModelReady = state == ModelState.Ready;
        IsModelNotReady = state == ModelState.NotDownloaded;
        IsModelDownloading = state == ModelState.Downloading;
        
        Log.Information("UI —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {Status}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {State}", status, state);
    }

    /// <summary>
    /// –°–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è UI
    /// </summary>
    public enum ModelState
    {
        Ready,
        NotDownloaded,
        Downloading,
        Error
    }
    #endregion
    
    /// <summary>
    /// –¢–æ–ø-5 —è–∑—ã–∫–æ–≤ Steam –¥–ª—è Whisper
    /// </summary>
    public List<LanguageItem> AvailableLanguages { get; } = new()
    {
        new LanguageItem { Code = "en", Name = "üá∫üá∏ English" },
        new LanguageItem { Code = "zh", Name = "üá®üá≥ ÁÆÄ‰Ωì‰∏≠Êñá" },
        new LanguageItem { Code = "ru", Name = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" },
        new LanguageItem { Code = "es", Name = "üá™üá∏ Espa√±ol" },
        new LanguageItem { Code = "de", Name = "üá©üá™ Deutsch" }
    };

    public class LanguageItem
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
    }


}