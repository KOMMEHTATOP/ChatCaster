using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using ChatCaster.Windows.Services;
using ChatCaster.Core.Models;
using ChatCaster.Windows.ViewModels.Base;
using ChatCaster.Windows.ViewModels.Navigation;

namespace ChatCaster.Windows.ViewModels
{
    public partial class ChatCasterWindowViewModel : ViewModelBase
    {

        #region Services

        private readonly AudioCaptureService _audioService;
        private readonly SpeechRecognitionService _speechService;
        private readonly Services.GamepadService.MainGamepadService _gamepadService;
        private readonly OverlayService _overlayService;
        private readonly SystemIntegrationService _systemService;
        private readonly ServiceContext _serviceContext;
        private readonly TrayService _trayService;
        private readonly NavigationManager _navigationManager;

        #endregion

        #region Observable Properties

        [ObservableProperty]
        private AppConfig _currentConfig;

        [ObservableProperty]
        private bool _isSidebarVisible = true;

        [ObservableProperty]
        private Page? _currentPage;

        [ObservableProperty]
        private WindowState _windowState = WindowState.Normal;

        [ObservableProperty]
        private string _statusText = NavigationConstants.StatusReady;

        [ObservableProperty]
        private string _currentPageTag = NavigationConstants.MainPage;

        #endregion

        #region Computed Properties for Navigation Buttons

        public SolidColorBrush MainButtonBackground
        {
            get => CurrentPageTag == NavigationConstants.MainPage
                ? NavigationConstants.ActiveButtonBrush
                : NavigationConstants.InactiveButtonBrush;
        }

        public SolidColorBrush AudioButtonBackground
        {
            get => CurrentPageTag == NavigationConstants.AudioPage
                ? NavigationConstants.ActiveButtonBrush
                : NavigationConstants.InactiveButtonBrush;
        }

        public SolidColorBrush InterfaceButtonBackground
        {
            get => CurrentPageTag == NavigationConstants.InterfacePage
                ? NavigationConstants.ActiveButtonBrush
                : NavigationConstants.InactiveButtonBrush;
        }

        public SolidColorBrush ControlButtonBackground
        {
            get => CurrentPageTag == NavigationConstants.ControlPage
                ? NavigationConstants.ActiveButtonBrush
                : NavigationConstants.InactiveButtonBrush;
        }

        #endregion

        #region Commands

        [RelayCommand]
        private void NavigateToPage(string pageTag)
        {
            _navigationManager.NavigateToPage(pageTag);
        }

        [RelayCommand]
        private void ToggleMenu()
        {
            IsSidebarVisible = !IsSidebarVisible;
        }

        [RelayCommand]
        private void MinimizeWindow()
        {
            WindowState = WindowState.Minimized;
        }

        [RelayCommand]
        private async Task HandleVoiceRecording()
        {
            await HandleVoiceRecordingAsync();
        }

        #endregion

        #region Constructor

        public ChatCasterWindowViewModel(
            AudioCaptureService audioService,
            SpeechRecognitionService speechService,
            Services.GamepadService.MainGamepadService gamepadService,
            SystemIntegrationService systemService,
            OverlayService overlayService,
            ConfigurationService configService,
            ServiceContext serviceContext,
            TrayService trayService)
        {
            _audioService = audioService;
            _speechService = speechService;
            _gamepadService = gamepadService;
            _overlayService = overlayService;
            _systemService = systemService;
            _serviceContext = serviceContext;
            _trayService = trayService;
            _currentConfig = new AppConfig();

            // –°–æ–∑–¥–∞–µ–º NavigationManager
            _navigationManager = new NavigationManager(
                audioService, speechService, gamepadService, systemService,
                overlayService, configService, serviceContext);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            _navigationManager.NavigationChanged += OnNavigationChanged;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            CurrentPage = _navigationManager.CurrentPage;
            CurrentPageTag = _navigationManager.CurrentPageTag;

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            _systemService.GlobalHotkeyPressed += OnGlobalHotkeyPressed;
        }

        #endregion

        #region Public Methods

        public async Task InitializeAsync()
        {
            try
            {
                Console.WriteLine("üî• [ViewModel] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞");

                Console.WriteLine("üîß [ViewModel] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...");
                CurrentConfig = await _serviceContext.ConfigurationService!.LoadConfigAsync();
                _serviceContext.Config = CurrentConfig;
                _trayService.SetConfig(CurrentConfig);
                Console.WriteLine("‚úÖ [ViewModel] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

                Console.WriteLine("üé§ [ViewModel] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...");
                await _speechService.InitializeAsync(CurrentConfig.Whisper);
                Console.WriteLine("‚úÖ [ViewModel] –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

                if (CurrentConfig.Input.KeyboardShortcut != null)
                {
                    Console.WriteLine(
                        $"‚å®Ô∏è [ViewModel] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–æ—Ç–∫–µ–π: {CurrentConfig.Input.KeyboardShortcut.Key} + {CurrentConfig.Input.KeyboardShortcut.Modifiers}");
                    bool registered = await _systemService.RegisterGlobalHotkeyAsync(CurrentConfig.Input.KeyboardShortcut);
                    Console.WriteLine($"üìù [ViewModel] –•–æ—Ç–∫–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {registered}");
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–π–º–ø–∞–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
                Console.WriteLine("üéÆ [ViewModel] –ü—Ä–æ–≤–µ—Ä—è–µ–º GamepadVoiceCoordinator...");

                if (_serviceContext?.GamepadVoiceCoordinator != null)
                {
                    Console.WriteLine("üéÆ [ViewModel] GamepadVoiceCoordinator –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...");
                    bool gamepadInitialized = await _serviceContext.GamepadVoiceCoordinator.InitializeAsync();
                    Console.WriteLine($"üéÆ [ViewModel] –ì–µ–π–º–ø–∞–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {gamepadInitialized}");
                }
                else
                {
                    Console.WriteLine("‚ùå [ViewModel] GamepadVoiceCoordinator –ù–ï –ù–ê–ô–î–ï–ù –≤ ServiceContext!");
                }

                if (CurrentConfig.System.StartMinimized)
                {
                    Console.WriteLine("üîΩ [ViewModel] –ó–∞–ø—É—Å–∫ –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ");
                    WindowState = WindowState.Minimized;
                }

                StatusText = NavigationConstants.StatusReady;
                Console.WriteLine("üî• [ViewModel] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ViewModel] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                Console.WriteLine($"‚ùå [ViewModel] StackTrace: {ex.StackTrace}");
            }
        }
        
        public void NavigateToSettings()
        {
            _navigationManager.NavigateToSettings();
        }

        public void Cleanup()
        {
            Console.WriteLine("üî• [ViewModel] Cleanup –Ω–∞—á–∞—Ç");

            _systemService.GlobalHotkeyPressed -= OnGlobalHotkeyPressed;
            _navigationManager.NavigationChanged -= OnNavigationChanged;

            if (_serviceContext.GamepadVoiceCoordinator != null)
            {
                Task.Run(async () => await _serviceContext.GamepadVoiceCoordinator.ShutdownAsync());
            }

            // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –≤—ã–∑—ã–≤–∞—Ç—å Dispose –Ω–∞–ø—Ä—è–º—É—é
            _gamepadService?.Dispose();
            _systemService?.Dispose();
            _overlayService?.Dispose();
            _audioService?.Dispose();
            _speechService?.Dispose();
            _trayService?.Dispose();

            Console.WriteLine("üî• [ViewModel] Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω");
        }

        #endregion

        #region Event Handlers

        private void OnNavigationChanged(object? sender, NavigationChangedEventArgs e)
        {
            CurrentPage = e.Page;
            CurrentPageTag = e.PageTag;

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö button background —Å–≤–æ–π—Å—Ç–≤
            OnPropertyChanged(nameof(MainButtonBackground));
            OnPropertyChanged(nameof(AudioButtonBackground));
            OnPropertyChanged(nameof(InterfaceButtonBackground));
            OnPropertyChanged(nameof(ControlButtonBackground));
        }

        private async void OnGlobalHotkeyPressed(object? sender, KeyboardShortcut shortcut)
        {
            try
            {
                Console.WriteLine($"üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Ç–∫–µ–π: {FormatKeyboardShortcut(shortcut)}");
                await HandleVoiceRecordingAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ—Ç–∫–µ—è: {ex.Message}");
                _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–æ—Ç–∫–µ—è");
            }
        }

        #endregion

        #region Voice Recording Logic

        private async Task HandleVoiceRecordingAsync()
        {
            try
            {
                var voiceService = _serviceContext.VoiceRecordingService;

                if (voiceService == null)
                {
                    Console.WriteLine("‚ùå VoiceRecordingService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ –≥–æ—Ç–æ–≤");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    Console.WriteLine("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å...");
                    StatusText = NavigationConstants.StatusProcessing;

                    var result = await voiceService.StopRecordingAsync();

                    if (result.Success && !string.IsNullOrEmpty(result.RecognizedText))
                    {
                        Console.WriteLine($"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{result.RecognizedText}'");
                        _trayService.ShowNotification("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", result.RecognizedText);
                        StatusText = NavigationConstants.StatusReady;

                        await _systemService.SendTextAsync(result.RecognizedText);
                        UpdateMainPageIfVisible(result.RecognizedText, false);
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.ErrorMessage}");
                        _trayService.ShowNotification("–û—à–∏–±–∫–∞", result.ErrorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å");
                        StatusText = NavigationConstants.StatusReady;
                    }
                }
                else
                {
                    Console.WriteLine("üé§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...");

                    bool started = await voiceService.StartRecordingAsync();

                    if (started)
                    {
                        Console.WriteLine("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å");
                        StatusText = NavigationConstants.StatusRecording;
                        UpdateMainPageIfVisible("", true);
                    }
                    else
                    {
                        Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å");
                        _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ HandleVoiceRecordingAsync: {ex.Message}");
                _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏");
                StatusText = NavigationConstants.StatusReady;
            }
        }

        private void UpdateMainPageIfVisible(string recognizedText, bool isRecording)
        {
            try
            {
                var mainPage = _navigationManager.GetMainPageIfVisible();

                if (mainPage != null)
                {
                    Console.WriteLine($"üì± –û–±–Ω–æ–≤–ª—è–µ–º UI MainPageView");

                    if (isRecording)
                    {
                        mainPage.UpdateRecordingStatus(NavigationConstants.StatusRecording, "#ff9800");
                        mainPage.UpdateRecordingButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "RecordCircle24");
                    }
                    else
                    {
                        mainPage.UpdateRecordingStatus(NavigationConstants.StatusReady, "#4caf50");
                        mainPage.UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");

                        if (!string.IsNullOrEmpty(recognizedText))
                        {
                            mainPage.ResultText.Text = recognizedText;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {ex.Message}");
            }
        }

        #endregion

        #region Helper Methods

        private static string FormatKeyboardShortcut(KeyboardShortcut shortcut)
        {
            var parts = new List<string>();

            if (shortcut.Modifiers.HasFlag(ModifierKeys.Control))
                parts.Add("Ctrl");
            if (shortcut.Modifiers.HasFlag(ModifierKeys.Shift))
                parts.Add("Shift");
            if (shortcut.Modifiers.HasFlag(ModifierKeys.Alt))
                parts.Add("Alt");
            if (shortcut.Modifiers.HasFlag(ModifierKeys.Windows))
                parts.Add("Win");

            parts.Add(shortcut.Key.ToString());

            return string.Join(" + ", parts);
        }

        #endregion

    }
}
