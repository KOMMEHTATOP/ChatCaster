using System.Collections.ObjectModel;
using ChatCaster.Core.Services.System;
using ChatCaster.SpeechRecognition.Whisper.Constants;
using ChatCaster.Windows.Managers.AudioSettings;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Serilog;
using System.Windows;

namespace ChatCaster.Windows.ViewModels.Components
{
    /// <summary>
    /// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏ Whisper
    /// –°–æ–¥–µ—Ä–∂–∏—Ç UI –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    /// </summary>
    public partial class WhisperModelComponentViewModel : ObservableObject
    {
        private readonly WhisperModelManager _whisperModelManager;
        private readonly ILocalizationService _localizationService;
        private bool _isUpdatingFromLocalization;
        
        public WhisperModelManager ModelManager => _whisperModelManager;

        [ObservableProperty]
        private WhisperModelItem? _selectedModel;

        [ObservableProperty]
        private string _selectedLanguage = "ru";

        [ObservableProperty]
        private bool _isModelReady;

        [ObservableProperty]
        private bool _isModelNotReady = true;

        [ObservableProperty]
        private bool _isModelDownloading;

        [ObservableProperty]
        private string _modelStatusText = "–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞";

        [ObservableProperty]
        private string _modelStatusColor = "#4caf50";

        /// <summary>
        /// –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ UI
        /// </summary>
        public ObservableCollection<WhisperModelItem> AvailableModels { get; } = new();

        /// <summary>
        /// –¢–æ–ø-5 —è–∑—ã–∫–æ–≤ Steam –¥–ª—è Whisper
        /// </summary>
        public List<LanguageItem> AvailableLanguages { get; } = new()
        {
            new LanguageItem
            {
                Code = "en", Name = "üá∫üá∏ English"
            },
            new LanguageItem
            {
                Code = "zh", Name = "üá®üá≥ ÁÆÄ‰Ωì‰∏≠Êñá"
            },
            new LanguageItem
            {
                Code = "ru", Name = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
            },
            new LanguageItem
            {
                Code = "es", Name = "üá™üá∏ Espa√±ol"
            },
            new LanguageItem
            {
                Code = "de", Name = "üá©üá™ Deutsch"
            }
        };

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π ViewModel
        public event Func<Task>? ModelChanged;
        public event Func<Task>? LanguageChanged;

        public WhisperModelComponentViewModel(
            WhisperModelManager whisperModelManager,
            ILocalizationService localizationService)
        {
            _whisperModelManager = whisperModelManager ?? throw new ArgumentNullException(nameof(whisperModelManager));
            _localizationService = localizationService ?? throw new ArgumentNullException(nameof(localizationService));

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–º–µ–Ω—É —è–∑—ã–∫–∞
            _localizationService.LanguageChanged += OnLocalizationChanged;
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
        /// </summary>
        private async void OnLocalizationChanged(object? sender, EventArgs e)
        {
            if (_isUpdatingFromLocalization) return;
            
            try
            {
                _isUpdatingFromLocalization = true;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                var selectedModelSize = SelectedModel?.ModelSize;
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
                await LoadModelsWithStatusAsync();
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ë–ï–ó –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏–π
                if (!string.IsNullOrEmpty(selectedModelSize))
                {
                    var restoredModel = AvailableModels.FirstOrDefault(m => m.ModelSize == selectedModelSize);
                    if (restoredModel != null)
                    {
                        _selectedModel = restoredModel; // –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏—è
                        OnPropertyChanged(nameof(SelectedModel));
                        Log.Debug("WhisperModelComponent: –º–æ–¥–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: {Model}", selectedModelSize);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "WhisperModelComponent: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞");
            }
            finally
            {
                _isUpdatingFromLocalization = false;
            }
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        /// </summary>
        public void SetSelectedModelFromConfig(string? modelSize)
        {
            var targetModelSize = modelSize ?? WhisperConstants.ModelSizes.Tiny;
            
            SelectedModel = AvailableModels.FirstOrDefault(m => m.ModelSize == targetModelSize);

            if (SelectedModel != null)
            {
                Log.Information("WhisperModelComponent –º–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {ModelSize} -> {DisplayName}",
                    targetModelSize, SelectedModel.DisplayName);
            }
            else
            {
                Log.Warning("WhisperModelComponent –º–æ–¥–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù–ê: {ModelSize}, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é",
                    targetModelSize);
                SelectedModel = AvailableModels.FirstOrDefault();

                if (SelectedModel != null)
                {
                    Log.Information("WhisperModelComponent –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å: {DisplayName}", SelectedModel.DisplayName);
                }
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        /// </summary>
        public async Task CheckModelStatusAsync()
        {
            try
            {
                var statusInfo = await _whisperModelManager.CheckModelStatusAsync();
                UpdateModelStatus(statusInfo);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –≤ WhisperModelComponent");
                UpdateModelStatus(new ModelStatusInfo("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", "#f44336", ModelState.Error));
            }
        }

        [RelayCommand]
        private async Task DownloadModel()
        {
            if (SelectedModel == null)
            {
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NullReferenceException
            var selectedModelSize = SelectedModel.ModelSize;

            try
            {
                UpdateModelStatus(new ModelStatusInfo("–ó–∞–≥—Ä—É–∑–∫–∞...", "#ff9800", ModelState.Downloading));

                var statusInfo = await _whisperModelManager.DownloadModelAsync(selectedModelSize);
                UpdateModelStatus(statusInfo);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
                if (statusInfo.State == ModelState.Ready)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (SelectedModel != null && SelectedModel.ModelSize == selectedModelSize)
                    {
                        SelectedModel.IsDownloaded = true;
                        SelectedModel.StatusIcon = "‚úÖ";
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                    await LoadModelsWithStatusAsync();

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    var updatedModel = AvailableModels.FirstOrDefault(m => m.ModelSize == selectedModelSize);

                    if (updatedModel != null)
                    {
                        SelectedModel = updatedModel;
                    }
                    else
                    {
                        Log.Warning("WhisperModelComponent –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {Model}",
                            selectedModelSize);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ WhisperModelComponent");
                UpdateModelStatus(new ModelStatusInfo("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "#f44336", ModelState.Error));
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –¥–ª—è UI
        /// </summary>
        private void UpdateModelStatus(ModelStatusInfo statusInfo)
        {
            ModelStatusText = statusInfo.StatusText;
            ModelStatusColor = statusInfo.StatusColor;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            IsModelReady = statusInfo.State == ModelState.Ready;
            IsModelNotReady = statusInfo.State == ModelState.NotDownloaded;
            IsModelDownloading = statusInfo.State == ModelState.Downloading;
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        /// </summary>
        public async Task LoadModelsWithStatusAsync()
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
                var models = await _whisperModelManager.GetAvailableModelsWithStatusAsync();

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ UI –ø–æ—Ç–æ–∫–µ
                await Application.Current.Dispatcher.InvokeAsync(() =>
                {
                    AvailableModels.Clear();

                    foreach (var model in models)
                    {
                        AvailableModels.Add(model);
                    }
                });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏");
            }
        }

        partial void OnSelectedModelChanged(WhisperModelItem? value)
        {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º—Å—è –∏–∑-–∑–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
            if (_isUpdatingFromLocalization) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            _ = Task.Run(async () =>
            {
                try
                {
                    await CheckModelStatusAsync();
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏");
                }
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é ViewModel
            ModelChanged?.Invoke();
        }

        partial void OnSelectedLanguageChanged(string value)
        {
            Log.Information("WhisperModelComponent —è–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω: {Language}", value);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é ViewModel
            LanguageChanged?.Invoke();
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        public void Dispose()
        {
            try
            {
                _localizationService.LanguageChanged -= OnLocalizationChanged;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "WhisperModelComponent: –æ—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤");
            }
        }
    }

    #region Helper Classes

    public class LanguageItem
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
    }

    #endregion
}