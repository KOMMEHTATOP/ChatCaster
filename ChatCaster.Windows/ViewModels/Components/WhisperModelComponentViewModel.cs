using System.Collections.ObjectModel;
using ChatCaster.SpeechRecognition.Whisper.Constants;
using ChatCaster.Windows.Managers.AudioSettings;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Serilog;

namespace ChatCaster.Windows.ViewModels.Components
{
    /// <summary>
    /// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏ Whisper
    /// –°–æ–¥–µ—Ä–∂–∏—Ç UI –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    /// </summary>
    public partial class WhisperModelComponentViewModel : ObservableObject
    {
        private readonly WhisperModelManager _whisperModelManager;

        [ObservableProperty]
        private WhisperModelItem? _selectedModel;

        [ObservableProperty]
        private string _selectedLanguage = "ru";

        [ObservableProperty]
        private bool _isModelReady = false;

        [ObservableProperty]
        private bool _isModelNotReady = true;

        [ObservableProperty]
        private bool _isModelDownloading = false;

        [ObservableProperty]
        private string _modelStatusText = "–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞";

        [ObservableProperty]
        private string _modelStatusColor = "#4caf50";

        /// <summary>
        /// –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ UI
        /// </summary>
        public ObservableCollection<WhisperModelItem> AvailableModels { get; } = new();

        /// <summary>
        /// –¢–æ–ø-5 —è–∑—ã–∫–æ–≤ Steam –¥–ª—è Whisper
        /// </summary>
        public List<LanguageItem> AvailableLanguages { get; } = new()
        {
            new LanguageItem { Code = "en", Name = "üá∫üá∏ English" },
            new LanguageItem { Code = "zh", Name = "üá®üá≥ ÁÆÄ‰Ωì‰∏≠Êñá" },
            new LanguageItem { Code = "ru", Name = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" },
            new LanguageItem { Code = "es", Name = "üá™üá∏ Espa√±ol" },
            new LanguageItem { Code = "de", Name = "üá©üá™ Deutsch" }
        };

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π ViewModel
        public event Func<Task>? ModelChanged;
        public event Func<Task>? LanguageChanged;

        public WhisperModelComponentViewModel(WhisperModelManager whisperModelManager)
        {
            _whisperModelManager = whisperModelManager ?? throw new ArgumentNullException(nameof(whisperModelManager));

            InitializeAvailableModels();
            Log.Debug("WhisperModelComponentViewModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        /// </summary>
        public void SetSelectedModelFromConfig(string? modelSize)
        {
            var targetModelSize = modelSize ?? WhisperConstants.ModelSizes.Base;
            
            SelectedModel = AvailableModels.FirstOrDefault(m => m.ModelSize == targetModelSize)
                           ?? AvailableModels.First(); // Fallback –Ω–∞ –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å

            Log.Information("WhisperModelComponent –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {ModelSize} -> {DisplayName}", 
                targetModelSize, SelectedModel.DisplayName);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        /// </summary>
        public async Task CheckModelStatusAsync()
        {
            try
            {
                var statusInfo = await _whisperModelManager.CheckModelStatusAsync();
                UpdateModelStatus(statusInfo);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –≤ WhisperModelComponent");
                UpdateModelStatus(new ModelStatusInfo("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", "#f44336", ModelState.Error));
            }
        }

        [RelayCommand]
        private async Task DownloadModel()
        {
            if (SelectedModel == null)
            {
                Log.Warning("WhisperModelComponent –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏");
                return;
            }

            try
            {
                Log.Information("WhisperModelComponent –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏: {Model}", SelectedModel.ModelSize);
                
                UpdateModelStatus(new ModelStatusInfo("–ó–∞–≥—Ä—É–∑–∫–∞...", "#ff9800", ModelState.Downloading));

                var statusInfo = await _whisperModelManager.DownloadModelAsync(SelectedModel.ModelSize);
                UpdateModelStatus(statusInfo);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ WhisperModelComponent");
                UpdateModelStatus(new ModelStatusInfo("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "#f44336", ModelState.Error));
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –¥–ª—è UI
        /// </summary>
        private void UpdateModelStatus(ModelStatusInfo statusInfo)
        {
            ModelStatusText = statusInfo.StatusText;
            ModelStatusColor = statusInfo.StatusColor;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            IsModelReady = statusInfo.State == ModelState.Ready;
            IsModelNotReady = statusInfo.State == ModelState.NotDownloaded;
            IsModelDownloading = statusInfo.State == ModelState.Downloading;
            
            Log.Information("WhisperModelComponent UI —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {Status}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {State}", 
                statusInfo.StatusText, statusInfo.State);
        }

        private void InitializeAvailableModels()
        {
            AvailableModels.Clear();
            
            var models = _whisperModelManager.GetAvailableModels();
            foreach (var model in models)
            {
                AvailableModels.Add(model);
            }
            
            Log.Information("WhisperModelComponent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {Count} –º–æ–¥–µ–ª–µ–π", AvailableModels.Count);
        }

        partial void OnSelectedModelChanged(WhisperModelItem? value)
        {
            Log.Information("WhisperModelComponent –º–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {Model} ({DisplayName})",
                value?.ModelSize, value?.DisplayName);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            _ = Task.Run(async () =>
            {
                try
                {
                    await CheckModelStatusAsync();
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏");
                }
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é ViewModel
            ModelChanged?.Invoke();
        }

        partial void OnSelectedLanguageChanged(string value)
        {
            Log.Information("WhisperModelComponent —è–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω: {Language}", value);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é ViewModel
            LanguageChanged?.Invoke();
        }
    }

    #region Helper Classes

    public class LanguageItem
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
    }

    #endregion
}