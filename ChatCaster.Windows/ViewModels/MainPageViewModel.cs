using System;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Media;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using ChatCaster.Core.Events;
using ChatCaster.Core.Models;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.ViewModels.Base;

namespace ChatCaster.Windows.ViewModels
{
    public partial class MainPageViewModel : ViewModelBase
    {
        #region Private Services
        private readonly AudioCaptureService? _audioCaptureService;
        private readonly ServiceContext? _serviceContext;
        private readonly OverlayService? _overlayService;
        #endregion

        #region Observable Properties

        [ObservableProperty]
        private string _recordingStatusText = "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏";

        [ObservableProperty]
        private Brush _recordingStatusBrush = new SolidColorBrush(Color.FromRgb(76, 175, 80)); // #4caf50

        [ObservableProperty]
        private string _currentDeviceText = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –ó–∞–≥—Ä—É–∑–∫–∞...";

        [ObservableProperty]
        private string _recordButtonText = "üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å";

        [ObservableProperty]
        private string _recordButtonIcon = "Mic24";

        [ObservableProperty]
        private string _resultText = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...";

        [ObservableProperty]
        private Brush _resultTextBrush = new SolidColorBrush(Color.FromRgb(102, 102, 102)); // #666666

        [ObservableProperty]
        private System.Windows.FontStyle _resultFontStyle = System.Windows.FontStyles.Italic;

        [ObservableProperty]
        private string _confidenceText = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";

        [ObservableProperty]
        private string _processingTimeText = "–í—Ä–µ–º—è: -";

        [ObservableProperty]
        private bool _isRecording = false;

        #endregion

        #region Commands

        [RelayCommand]
        private async Task ToggleRecording()
        {
            try
            {
                var voiceService = _serviceContext?.VoiceRecordingService;
                if (voiceService == null)
                {
                    ShowError("–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    Console.WriteLine("üõë [MainPageViewModel] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ VoiceRecordingService");
                    await voiceService.StopRecordingAsync();
                }
                else
                {
                    Console.WriteLine("üé§ [MainPageViewModel] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ VoiceRecordingService");
                    await voiceService.StartRecordingAsync();
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞: {ex.Message}");
                Console.WriteLine($"‚ùå [MainPageViewModel] –û—à–∏–±–∫–∞ –≤ ToggleRecording: {ex.Message}");
            }
        }

        #endregion

        #region Constructor
        public MainPageViewModel(
            AudioCaptureService? audioCaptureService,
            ServiceContext? serviceContext,
            OverlayService? overlayService)
        {
            _audioCaptureService = audioCaptureService;
            _serviceContext = serviceContext;
            _overlayService = overlayService;

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è VoiceRecordingService
            if (serviceContext?.VoiceRecordingService != null)
            {
                serviceContext.VoiceRecordingService.StatusChanged += OnRecordingStatusChanged;
                serviceContext.VoiceRecordingService.RecognitionCompleted += OnRecognitionCompleted;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            _ = LoadCurrentDeviceAsync();
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —Ö–æ—Ç–∫–µ–π
        /// </summary>
        public async Task TriggerRecordingFromHotkeyAsync()
        {
            try
            {
                Console.WriteLine($"üé§ [MainPageViewModel] TriggerRecordingFromHotkey - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ VoiceRecordingService");
                
                var voiceService = _serviceContext?.VoiceRecordingService;
                if (voiceService == null)
                {
                    Console.WriteLine($"‚ùå [MainPageViewModel] VoiceRecordingService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    ShowError("–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    Console.WriteLine($"üìù [MainPageViewModel] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å");
                    await voiceService.StopRecordingAsync();
                }
                else
                {
                    Console.WriteLine($"üìù [MainPageViewModel] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å");
                    await voiceService.StartRecordingAsync();
                }

                Console.WriteLine($"üé§ [MainPageViewModel] TriggerRecordingFromHotkey –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [MainPageViewModel] –û—à–∏–±–∫–∞ –≤ TriggerRecordingFromHotkey: {ex.Message}");
                ShowError($"–û—à–∏–±–∫–∞ —Ö–æ—Ç–∫–µ—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        /// </summary>
        public void UpdateConnectionStatus(bool isConnected)
        {
            if (isConnected)
            {
                UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
            }
            else
            {
                UpdateRecordingStatus("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "#f44336");
            }
        }

        /// <summary>
        /// Cleanup –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ
        /// </summary>
        public void Cleanup()
        {
            try
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π VoiceRecordingService
                if (_serviceContext?.VoiceRecordingService != null)
                {
                    _serviceContext.VoiceRecordingService.StatusChanged -= OnRecordingStatusChanged;
                    _serviceContext.VoiceRecordingService.RecognitionCompleted -= OnRecognitionCompleted;
                }

                Console.WriteLine($"üßπ [MainPageViewModel] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [MainPageViewModel] –û—à–∏–±–∫–∞ –ø—Ä–∏ cleanup: {ex.Message}");
            }
        }

        #endregion

        #region Private Methods

        private async Task LoadCurrentDeviceAsync()
        {
            try
            {
                if (_audioCaptureService != null)
                {
                    var devices = await _audioCaptureService.GetAvailableDevicesAsync();
                    var defaultDevice = devices.FirstOrDefault(d => d.IsDefault) ?? devices.FirstOrDefault();
                    CurrentDeviceText = $"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {defaultDevice?.Name ?? "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}";
                }
                else
                {
                    CurrentDeviceText = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
                }
            }
            catch (Exception ex)
            {
                CurrentDeviceText = $"–û—à–∏–±–∫–∞: {ex.Message}";
            }
        }

        private void OnRecordingStatusChanged(object? sender, RecordingStatusChangedEvent e)
        {
            switch (e.NewStatus)
            {
                case RecordingStatus.Recording:
                    UpdateRecordingButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "RecordCircle24");
                    UpdateRecordingStatus("–ó–∞–ø–∏—Å—å...", "#ff9800");
                    ClearResults();
                    IsRecording = true;
                    break;
                
                case RecordingStatus.Processing:
                    UpdateRecordingStatus("–û–±—Ä–∞–±–æ—Ç–∫–∞...", "#2196f3");
                    break;
                
                case RecordingStatus.Completed:
                case RecordingStatus.Idle:
                    UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                    UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
                    IsRecording = false;
                    break;
                
                case RecordingStatus.Error:
                case RecordingStatus.Cancelled:
                    UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                    UpdateRecordingStatus("–û—à–∏–±–∫–∞", "#f44336");
                    IsRecording = false;
                    break;
            }
        }

        private void OnRecognitionCompleted(object? sender, VoiceRecognitionCompletedEvent e)
        {
            var result = e.Result;
            
            if (result.Success && !string.IsNullOrWhiteSpace(result.RecognizedText))
            {
                ResultText = result.RecognizedText;
                ResultTextBrush = Brushes.White;
                ResultFontStyle = System.Windows.FontStyles.Normal;

                ConfidenceText = $"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.Confidence:P0}";
                ProcessingTimeText = $"–í—Ä–µ–º—è: {result.ProcessingTime.TotalMilliseconds:F0}–º—Å";

                Console.WriteLine($"‚úÖ [MainPageViewModel] –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result.RecognizedText}'");
            }
            else
            {
                string errorMessage = result.ErrorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å";
                ShowError(errorMessage);
            }
        }

        private void ShowError(string message)
        {
            ResultText = message;
            ResultTextBrush = new SolidColorBrush(Color.FromRgb(244, 67, 54)); // #f44336
            ResultFontStyle = System.Windows.FontStyles.Italic;

            ConfidenceText = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText = "–í—Ä–µ–º—è: -";

            UpdateRecordingStatus("–û—à–∏–±–∫–∞", "#f44336");
            
            Console.WriteLine($"‚ùå [MainPageViewModel] –û—à–∏–±–∫–∞: {message}");
        }

        private void ClearResults()
        {
            ResultText = "–û–±—Ä–∞–±–æ—Ç–∫–∞...";
            ResultTextBrush = new SolidColorBrush(Color.FromRgb(153, 153, 153)); // #999999
            ResultFontStyle = System.Windows.FontStyles.Italic;

            ConfidenceText = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText = "–í—Ä–µ–º—è: -";
        }

        private void UpdateRecordingStatus(string status, string colorHex)
        {
            RecordingStatusText = status;
            RecordingStatusBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString(colorHex));
        }

        private void UpdateRecordingButton(string content, string iconSymbol)
        {
            RecordButtonText = content;
            RecordButtonIcon = iconSymbol;
        }

        #endregion
    }
}