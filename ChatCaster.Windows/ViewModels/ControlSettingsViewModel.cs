using ChatCaster.Core.Constants;
using ChatCaster.Core.Models;
using ChatCaster.Windows.Managers;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.Services.GamepadService;
using ChatCaster.Windows.Utilities;
using ChatCaster.Windows.ViewModels.Base;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace ChatCaster.Windows.ViewModels
{
    /// <summary>
    /// ViewModel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –≥–µ–π–º–ø–∞–¥)
    /// –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    /// </summary>
    public partial class ControlSettingsViewModel : BaseSettingsViewModel
    {
        #region Private Services and Managers

        private readonly MainGamepadService _gamepadService;
        private readonly SystemIntegrationService _systemService;
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - —É–±–∏—Ä–∞–µ–º nullable
        private GamepadStatusManager _gamepadStatusManager = null!;
        private GamepadCaptureManager _gamepadCaptureManager = null!;
        private KeyboardCaptureManager _keyboardCaptureManager = null!;
        private CaptureUIStateManager _gamepadUIManager = null!;
        private CaptureUIStateManager _keyboardUIManager = null!;

        #endregion

        #region Observable Properties

        // –ì–µ–π–º–ø–∞–¥ —Å—Ç–∞—Ç—É—Å
        [ObservableProperty]
        private string _gamepadStatusText = "–ì–µ–π–º–ø–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω";

        [ObservableProperty]
        private string _gamepadStatusColor = "#f44336";

        // –ì–µ–π–º–ø–∞–¥ –∑–∞—Ö–≤–∞—Ç
        [ObservableProperty]
        private string _gamepadComboText = "LB + RB";

        [ObservableProperty]
        private string _gamepadComboTextColor = "White";

        [ObservableProperty]
        private bool _isWaitingForGamepadInput = false;

        [ObservableProperty]
        private int _gamepadCaptureTimeLeft = 0;

        [ObservableProperty]
        private bool _showGamepadTimer = false;

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞—Ö–≤–∞—Ç
        [ObservableProperty]
        private string _keyboardComboText = "Ctrl + Shift + R";

        [ObservableProperty]
        private string _keyboardComboTextColor = "White";

        [ObservableProperty]
        private bool _isWaitingForKeyboardInput = false;

        [ObservableProperty]
        private int _keyboardCaptureTimeLeft = 0;

        [ObservableProperty]
        private bool _showKeyboardTimer = false;

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å XAML)
        [ObservableProperty]
        private string _keyboardStatusText = "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞";

        [ObservableProperty]
        private string _keyboardStatusColor = "#4caf50";

        #endregion

        #region Commands

        [RelayCommand]
        private async Task StartKeyboardCapture()
        {
            System.Diagnostics.Debug.WriteLine("[ControlSettingsViewModel] StartKeyboardCapture –≤—ã–∑–≤–∞–Ω");
            
            if (IsWaitingForKeyboardInput) 
            {
                System.Diagnostics.Debug.WriteLine("[ControlSettingsViewModel] –£–∂–µ –∂–¥–µ–º –≤–≤–æ–¥, –≤—ã—Ö–æ–¥–∏–º");
                return;
            }

            try
            {
                System.Diagnostics.Debug.WriteLine("[ControlSettingsViewModel] –í—ã–∑—ã–≤–∞–µ–º StartCaptureAsync...");
                await _keyboardCaptureManager.StartCaptureAsync(AppConstants.CaptureTimeoutSeconds);
                System.Diagnostics.Debug.WriteLine("[ControlSettingsViewModel] StartCaptureAsync –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[ControlSettingsViewModel] –û—à–∏–±–∫–∞: {ex.Message}");
                StatusMessage = $"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {ex.Message}";
            }
        }

        [RelayCommand]
        private async Task StartGamepadCapture()
        {
            if (IsWaitingForGamepadInput) return;

            try
            {
                await _gamepadCaptureManager.StartCaptureAsync(AppConstants.CaptureTimeoutSeconds);
            }
            catch (Exception ex)
            {
                StatusMessage = $"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≥–µ–π–º–ø–∞–¥–∞: {ex.Message}";
            }
        }

        #endregion

        #region Constructor

        public ControlSettingsViewModel(
            ConfigurationService configurationService,
            ServiceContext serviceContext,
            MainGamepadService gamepadService,
            SystemIntegrationService systemService) : base(configurationService, serviceContext)
        {
            System.Diagnostics.Debug.WriteLine("üî• [ControlSettingsViewModel] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞—á–∞—Ç");
            
            _gamepadService = gamepadService ?? throw new ArgumentNullException(nameof(gamepadService));
            _systemService = systemService ?? throw new ArgumentNullException(nameof(systemService));

            System.Diagnostics.Debug.WriteLine("üî• [ControlSettingsViewModel] –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã...");
            
            try
            {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                InitializeManagers();
                
                System.Diagnostics.Debug.WriteLine("üî• [ControlSettingsViewModel] –°–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå [ControlSettingsViewModel] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"‚ùå [ControlSettingsViewModel] StackTrace: {ex.StackTrace}");
                throw;
            }
            
            System.Diagnostics.Debug.WriteLine("üî• [ControlSettingsViewModel] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω");
        }

        #endregion

        #region Manager Initialization

        private void InitializeManagers()
        {
            // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            _gamepadStatusManager = new GamepadStatusManager(_gamepadService);
            _gamepadCaptureManager = new GamepadCaptureManager(_gamepadService);
            _keyboardCaptureManager = new KeyboardCaptureManager();
            
            System.Diagnostics.Debug.WriteLine("üî• [ControlSettingsViewModel] –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
            
            // –°–æ–∑–¥–∞–µ–º UI –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            _gamepadUIManager = new CaptureUIStateManager();
            _keyboardUIManager = new CaptureUIStateManager();

            System.Diagnostics.Debug.WriteLine("üî• [ControlSettingsViewModel] UI –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            SubscribeToManagerEvents();
        }

        #endregion

        #region BaseSettingsViewModel Implementation

        protected override async Task LoadPageSpecificSettingsAsync()
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            var config = _serviceContext!.Config;
            
            GamepadComboText = config.Input.GamepadShortcut?.DisplayText ?? "LB + RB";
            KeyboardComboText = config.Input.KeyboardShortcut?.DisplayText ?? "Ctrl + Shift + R";

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
            _gamepadUIManager.SetIdleState(GamepadComboText);
            _keyboardUIManager.SetIdleState(KeyboardComboText);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–π–º–ø–∞–¥–∞
            await _gamepadStatusManager.RefreshStatusAsync();
        }

        protected override async Task ApplySettingsToConfigAsync(AppConfig config)
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏–π
            await Task.CompletedTask;
        }

        protected override async Task ApplySettingsToServicesAsync()
        {
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–π–º–ø–∞–¥–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await _gamepadService.StopMonitoringAsync();
            await _gamepadService.StartMonitoringAsync(_serviceContext!.Config.Input.GamepadShortcut);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≥–µ–π–º–ø–∞–¥–∞
            await _serviceContext.GamepadVoiceCoordinator!.UpdateGamepadSettingsAsync(
                _serviceContext.Config.Input.GamepadShortcut);
        }

        protected override async Task InitializePageSpecificDataAsync()
        {
            System.Diagnostics.Debug.WriteLine("üî• [ControlSettingsViewModel] InitializePageSpecificDataAsync –Ω–∞—á–∞—Ç");
            
            await LoadPageSpecificSettingsAsync();
        }

        public override void SubscribeToUIEvents()
        {
            // –°–æ–±—ã—Ç–∏—è –≥–µ–π–º–ø–∞–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ GamepadStatusManager
        }

        protected override void UnsubscribeFromUIEvents()
        {
            // –°–æ–±—ã—Ç–∏—è –æ—Ç–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ CleanupPageSpecific
        }

        protected override void CleanupPageSpecific()
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            UnsubscribeFromManagerEvents();

            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            _gamepadStatusManager?.Dispose();
            _gamepadCaptureManager?.Dispose();
            _keyboardCaptureManager?.Dispose();
            _gamepadUIManager?.Dispose();
            _keyboardUIManager?.Dispose();
        }

        #endregion

        #region Manager Event Subscriptions

        private void SubscribeToManagerEvents()
        {
            // –°–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–π–º–ø–∞–¥–∞
            _gamepadStatusManager.StatusChanged += OnGamepadStatusChanged;

            // –°–æ–±—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –≥–µ–π–º–ø–∞–¥–∞
            _gamepadCaptureManager.CaptureCompleted += OnGamepadCaptureCompleted;
            _gamepadCaptureManager.CaptureTimeout += OnGamepadCaptureTimeout;
            _gamepadCaptureManager.StatusChanged += OnGamepadCaptureStatusChanged;
            _gamepadCaptureManager.CaptureError += OnGamepadCaptureError;

            // –°–æ–±—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            _keyboardCaptureManager.CaptureCompleted += OnKeyboardCaptureCompleted;
            _keyboardCaptureManager.CaptureTimeout += OnKeyboardCaptureTimeout;
            _keyboardCaptureManager.StatusChanged += OnKeyboardCaptureStatusChanged;
            _keyboardCaptureManager.CaptureError += OnKeyboardCaptureError;

            // –°–æ–±—ã—Ç–∏—è UI –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            _gamepadUIManager.StateChanged += OnGamepadUIStateChanged;
            _keyboardUIManager.StateChanged += OnKeyboardUIStateChanged;
        }

        private void UnsubscribeFromManagerEvents()
        {
            // –°–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–π–º–ø–∞–¥–∞
            _gamepadStatusManager.StatusChanged -= OnGamepadStatusChanged;

            // –°–æ–±—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –≥–µ–π–º–ø–∞–¥–∞
            _gamepadCaptureManager.CaptureCompleted -= OnGamepadCaptureCompleted;
            _gamepadCaptureManager.CaptureTimeout -= OnGamepadCaptureTimeout;
            _gamepadCaptureManager.StatusChanged -= OnGamepadCaptureStatusChanged;
            _gamepadCaptureManager.CaptureError -= OnGamepadCaptureError;

            // –°–æ–±—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            _keyboardCaptureManager.CaptureCompleted -= OnKeyboardCaptureCompleted;
            _keyboardCaptureManager.CaptureTimeout -= OnKeyboardCaptureTimeout;
            _keyboardCaptureManager.StatusChanged -= OnKeyboardCaptureStatusChanged;
            _keyboardCaptureManager.CaptureError -= OnKeyboardCaptureError;

            // –°–æ–±—ã—Ç–∏—è UI –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            _gamepadUIManager.StateChanged -= OnGamepadUIStateChanged;
            _keyboardUIManager.StateChanged -= OnKeyboardUIStateChanged;
        }

        #endregion

        #region Event Handlers

        // –ì–µ–π–º–ø–∞–¥ —Å—Ç–∞—Ç—É—Å
        private void OnGamepadStatusChanged(string statusText, string statusColor)
        {
            GamepadStatusText = statusText;
            GamepadStatusColor = statusColor;
        }

        // –ì–µ–π–º–ø–∞–¥ –∑–∞—Ö–≤–∞—Ç
        private async void OnGamepadCaptureCompleted(GamepadShortcut capturedShortcut)
        {
            System.Diagnostics.Debug.WriteLine($"üî• [VM] OnGamepadCaptureCompleted: {capturedShortcut.DisplayText}");
            System.Diagnostics.Debug.WriteLine($"üî• [VM] IsWaitingForGamepadInput –î–û: {IsWaitingForGamepadInput}");
            
            try
            {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                IsWaitingForGamepadInput = false;
                System.Diagnostics.Debug.WriteLine($"üî• [VM] IsWaitingForGamepadInput –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞: {IsWaitingForGamepadInput}");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                _serviceContext!.Config.Input.GamepadShortcut = capturedShortcut;
                await OnUISettingChangedAsync();

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                GamepadComboText = capturedShortcut.DisplayText;
                System.Diagnostics.Debug.WriteLine($"üî• [VM] GamepadComboText —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {GamepadComboText}");
                
                await _gamepadUIManager.CompleteSuccessAsync(capturedShortcut.DisplayText);
                _gamepadUIManager.SetIdleState(GamepadComboText);
                
                System.Diagnostics.Debug.WriteLine($"üî• [VM] OnGamepadCaptureCompleted –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå [VM] –û—à–∏–±–∫–∞ –≤ OnGamepadCaptureCompleted: {ex.Message}");
                IsWaitingForGamepadInput = false;
                await _gamepadUIManager.CompleteWithErrorAsync($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}");
            }
        }

        private async void OnGamepadCaptureTimeout()
        {
            IsWaitingForGamepadInput = false;
            await _gamepadUIManager.CompleteWithTimeoutAsync();
        }

        private void OnGamepadCaptureStatusChanged(string status)
        {
            System.Diagnostics.Debug.WriteLine($"üî• [VM] OnGamepadCaptureStatusChanged: {status}");
            System.Diagnostics.Debug.WriteLine($"üî• [VM] _gamepadCaptureManager.IsCapturing: {_gamepadCaptureManager.IsCapturing}");
            
            if (_gamepadCaptureManager.IsCapturing)
            {
                System.Diagnostics.Debug.WriteLine($"üî• [VM] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IsWaitingForGamepadInput = true");
                _gamepadUIManager.StartCapture(status, AppConstants.CaptureTimeoutSeconds);
                IsWaitingForGamepadInput = true;
            }
            else
            {
                System.Diagnostics.Debug.WriteLine($"üî• [VM] –ó–∞—Ö–≤–∞—Ç –ù–ï –∞–∫—Ç–∏–≤–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IsWaitingForGamepadInput = false");
                IsWaitingForGamepadInput = false;
            }
            
            System.Diagnostics.Debug.WriteLine($"üî• [VM] IsWaitingForGamepadInput –∏—Ç–æ–≥–æ–≤–æ–µ: {IsWaitingForGamepadInput}");
        }

        private async void OnGamepadCaptureError(string error)
        {
            IsWaitingForGamepadInput = false;
            await _gamepadUIManager.CompleteWithErrorAsync(error);
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞—Ö–≤–∞—Ç
        private async void OnKeyboardCaptureCompleted(KeyboardShortcut capturedShortcut)
        {
            System.Diagnostics.Debug.WriteLine($"üî• [VM] OnKeyboardCaptureCompleted: {capturedShortcut.DisplayText}");
            System.Diagnostics.Debug.WriteLine($"üî• [VM] IsWaitingForKeyboardInput –î–û: {IsWaitingForKeyboardInput}");
            
            try
            {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                IsWaitingForKeyboardInput = false;
                System.Diagnostics.Debug.WriteLine($"üî• [VM] IsWaitingForKeyboardInput –ü–û–°–õ–ï —Å–±—Ä–æ—Å–∞: {IsWaitingForKeyboardInput}");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                _serviceContext!.Config.Input.KeyboardShortcut = capturedShortcut;
                await OnUISettingChangedAsync();

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Ç–∫–µ–π
                bool registered = await _systemService.RegisterGlobalHotkeyAsync(capturedShortcut);
                if (!registered)
                {
                    System.Diagnostics.Debug.WriteLine("[VM] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–æ—Ç–∫–µ—è");
                    await _keyboardUIManager.CompleteWithErrorAsync("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–æ—Ç–∫–µ—è");
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                KeyboardComboText = capturedShortcut.DisplayText;
                System.Diagnostics.Debug.WriteLine($"üî• [VM] KeyboardComboText —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {KeyboardComboText}");
                
                await _keyboardUIManager.CompleteSuccessAsync(capturedShortcut.DisplayText);
                _keyboardUIManager.SetIdleState(KeyboardComboText);
                
                System.Diagnostics.Debug.WriteLine($"üî• [VM] OnKeyboardCaptureCompleted –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå [VM] –û—à–∏–±–∫–∞ –≤ OnKeyboardCaptureCompleted: {ex.Message}");
                IsWaitingForKeyboardInput = false;
                await _keyboardUIManager.CompleteWithErrorAsync($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}");
            }
        }

        private async void OnKeyboardCaptureTimeout()
        {
            IsWaitingForKeyboardInput = false;
            await _keyboardUIManager.CompleteWithTimeoutAsync();
        }

        private void OnKeyboardCaptureStatusChanged(string status)
        {
            System.Diagnostics.Debug.WriteLine($"üî• [VM] OnKeyboardCaptureStatusChanged: {status}");
            System.Diagnostics.Debug.WriteLine($"üî• [VM] _keyboardCaptureManager.IsCapturing: {_keyboardCaptureManager.IsCapturing}");
            
            if (_keyboardCaptureManager.IsCapturing)
            {
                System.Diagnostics.Debug.WriteLine($"üî• [VM] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IsWaitingForKeyboardInput = true");
                _keyboardUIManager.StartCapture(status, AppConstants.CaptureTimeoutSeconds);
                IsWaitingForKeyboardInput = true;
            }
            else
            {
                System.Diagnostics.Debug.WriteLine($"üî• [VM] –ó–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ù–ï –∞–∫—Ç–∏–≤–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IsWaitingForKeyboardInput = false");
                IsWaitingForKeyboardInput = false;
            }
            
            System.Diagnostics.Debug.WriteLine($"üî• [VM] IsWaitingForKeyboardInput –∏—Ç–æ–≥–æ–≤–æ–µ: {IsWaitingForKeyboardInput}");
        }

        private async void OnKeyboardCaptureError(string error)
        {
            IsWaitingForKeyboardInput = false;
            await _keyboardUIManager.CompleteWithErrorAsync(error);
        }

        // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
        private void OnGamepadUIStateChanged(CaptureUIState state)
        {
            GamepadComboText = state.Text;
            GamepadComboTextColor = state.TextColor;
            ShowGamepadTimer = state.ShowTimer;
            GamepadCaptureTimeLeft = state.TimeLeft;
            
            if (!string.IsNullOrEmpty(state.StatusMessage))
            {
                StatusMessage = state.StatusMessage;
            }
        }

        private void OnKeyboardUIStateChanged(CaptureUIState state)
        {
            KeyboardComboText = state.Text;
            KeyboardComboTextColor = state.TextColor;
            ShowKeyboardTimer = state.ShowTimer;
            KeyboardCaptureTimeLeft = state.TimeLeft;
            
            if (!string.IsNullOrEmpty(state.StatusMessage))
            {
                StatusMessage = state.StatusMessage;
            }
        }

        #endregion
    }
}