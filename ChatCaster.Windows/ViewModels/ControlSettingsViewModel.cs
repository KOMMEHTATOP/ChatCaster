using ChatCaster.Core.Models;
using ChatCaster.Core.Services.Core;
using ChatCaster.Core.Services.Input;
using ChatCaster.Core.Services.System;
using ChatCaster.Windows.Services.GamepadService;
using ChatCaster.Windows.ViewModels.Base;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Serilog;

namespace ChatCaster.Windows.ViewModels
{
    /// <summary>
    /// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ViewModel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    /// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–µ–π–º–ø–∞–¥–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    /// </summary>
    public partial class ControlSettingsViewModel : BaseSettingsViewModel
    {
        private readonly ILocalizationService _localizationService;

        // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        [ObservableProperty]
        private string _pageTitle = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ";

        [ObservableProperty]
        private string _pageDescription = "–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏";

        [ObservableProperty]
        private string _gamepadLabel = "–ì–µ–π–º–ø–∞–¥:";

        [ObservableProperty]
        private string _keyboardLabel = "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:";

        
        #region Components

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        public GamepadCaptureComponentViewModel GamepadComponent { get; }
        public KeyboardCaptureComponentViewModel KeyboardComponent { get; }

        #endregion

        #region Commands

        [RelayCommand]
        private async Task StartKeyboardCapture()
        {
            Log.Debug("–ö–æ–º–∞–Ω–¥–∞ StartKeyboardCapture –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
            await KeyboardComponent.StartCaptureAsync();
        }

        [RelayCommand]
        private async Task StartGamepadCapture()
        {
            Log.Debug("–ö–æ–º–∞–Ω–¥–∞ StartGamepadCapture –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
            await GamepadComponent.StartCaptureAsync();
        }

        [RelayCommand]
        private async Task PageUnloaded()
        {
            Log.Debug("–ö–æ–º–∞–Ω–¥–∞ PageUnloaded –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
            
            try
            {
                // Cleanup –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ViewModel
                await Task.Run(CleanupPageSpecific);
                Log.Debug("ControlSettingsView –≤—ã–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ ControlSettingsView —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É");
            }
        }

        #endregion

        #region Constructor

        public ControlSettingsViewModel(
            IConfigurationService configurationService,
            AppConfig currentConfig,
            IGamepadService gamepadService,
            ISystemIntegrationService systemService,
            GamepadVoiceCoordinator gamepadVoiceCoordinator,
            ILocalizationService localizationService) : base(configurationService, currentConfig)
        {
            _localizationService = localizationService;
            _localizationService.LanguageChanged += OnLanguageChanged;
            UpdateLocalizedStrings();


            Log.Debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ControlSettingsViewModel –Ω–∞—á–∞—Ç–∞");
            Log.Information("üîç AudioSettingsViewModel —Å–æ–∑–¥–∞–Ω —Å AppConfig HashCode: {HashCode}, SelectedLanguage: {Language}", 
                currentConfig.GetHashCode(), currentConfig.System.SelectedLanguage);

            try
            {
                GamepadComponent = new GamepadCaptureComponentViewModel(gamepadService, currentConfig, gamepadVoiceCoordinator);
                KeyboardComponent = new KeyboardCaptureComponentViewModel(systemService, currentConfig, configurationService);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                SubscribeToComponentEvents();
                
                Log.Information("ControlSettingsViewModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ControlSettingsViewModel");
                throw;
            }
        }

        #endregion

        #region BaseSettingsViewModel Implementation

        protected override async Task LoadPageSpecificSettingsAsync()
        {
            try
            {
                await GamepadComponent.LoadSettingsAsync();
                await KeyboardComponent.LoadSettingsAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            }
        }

        protected override Task ApplySettingsToConfigAsync(AppConfig config)
        {
            config.System.SelectedLanguage = _currentConfig.System.SelectedLanguage;
            return Task.CompletedTask;
        }

        protected override async Task ApplySettingsToServicesAsync()
        {
            try
            {
                await GamepadComponent.ApplySettingsAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º");
            }
        }

        protected override async Task InitializePageSpecificDataAsync()
        {
            await LoadPageSpecificSettingsAsync();
        }

        public override void SubscribeToUIEvents()
        {
        }

        protected override void UnsubscribeFromUIEvents()
        {
            UnsubscribeFromComponentEvents();
        }

        protected override void CleanupPageSpecific()
        {
            try
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
                UnsubscribeFromComponentEvents();
                _localizationService.LanguageChanged -= OnLanguageChanged;
                base.CleanupPageSpecific();

                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                GamepadComponent?.Dispose();
                KeyboardComponent?.Dispose();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ cleanup ControlSettings");
            }
        }

        #endregion

        #region Component Events Management

        private void SubscribeToComponentEvents()
        {
            try
            {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                GamepadComponent.StatusMessageChanged += OnComponentStatusMessageChanged;
                KeyboardComponent.StatusMessageChanged += OnComponentStatusMessageChanged;
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                GamepadComponent.SettingChanged += OnComponentSettingChangedAsync;
                KeyboardComponent.SettingChanged += OnComponentSettingChangedAsync;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
            }
        }

        private void UnsubscribeFromComponentEvents()
        {
            try
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                GamepadComponent.StatusMessageChanged -= OnComponentStatusMessageChanged;
                KeyboardComponent.StatusMessageChanged -= OnComponentStatusMessageChanged;
                
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
                GamepadComponent.SettingChanged -= OnComponentSettingChangedAsync;
                KeyboardComponent.SettingChanged -= OnComponentSettingChangedAsync;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
            }
        }

        #endregion

        private void OnLanguageChanged(object? sender, EventArgs e)
        {
            UpdateLocalizedStrings();
        }

        private void UpdateLocalizedStrings()
        {
            PageTitle = _localizationService.GetString("Control_PageTitle");
            PageDescription = _localizationService.GetString("Control_PageDescription");
            GamepadLabel = _localizationService.GetString("Control_Gamepad");
            KeyboardLabel = _localizationService.GetString("Control_Keyboard");
        }
        
        

        #region Event Handlers

        private void OnComponentStatusMessageChanged(string message)
        {
            try
            {
                StatusMessage = message;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞");
            }
        }

        private async Task OnComponentSettingChangedAsync()
        {
            try
            {
                await OnUISettingChangedAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞");
            }
        }

        #endregion
    }
}