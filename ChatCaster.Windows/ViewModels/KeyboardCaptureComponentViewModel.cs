using ChatCaster.Core.Constants;
using ChatCaster.Core.Events;
using ChatCaster.Core.Models;
using ChatCaster.Core.Services.Core;
using ChatCaster.Core.Services.System;
using ChatCaster.Windows.Managers;
using CommunityToolkit.Mvvm.ComponentModel;
using Serilog;

namespace ChatCaster.Windows.ViewModels
{
    /// <summary>
    /// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    /// </summary>
    public partial class KeyboardCaptureComponentViewModel : BaseCaptureComponentViewModel
    {
        private readonly ISystemIntegrationService _systemService;
        private readonly AppConfig _currentConfig;
        private readonly IConfigurationService _configurationService;
        
        private KeyboardCaptureManager? _captureManager;

        // –°—Ç–∞—Ç—É—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        [ObservableProperty]
        private string _statusText = "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞";

        [ObservableProperty]
        private string _statusColor = "#4caf50";

        public KeyboardCaptureComponentViewModel(
            ISystemIntegrationService systemService,
            AppConfig currentConfig,
            IConfigurationService configurationService) 
        {
            _systemService = systemService ?? throw new ArgumentNullException(nameof(systemService));
            _currentConfig = currentConfig ?? throw new ArgumentNullException(nameof(currentConfig));
            _configurationService = configurationService ?? throw new ArgumentNullException(nameof(configurationService)); 
    
            InitializeManagers();
        }
        
        private void InitializeManagers()
        {
            try
            {
                _captureManager = new KeyboardCaptureManager(_currentConfig);
                _uiManager = new CaptureUIStateManager();

                SubscribeToEvents();
                
                Log.Debug("KeyboardCaptureComponent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KeyboardCaptureComponent");
                throw;
            }
        }

        public Task LoadSettingsAsync()
        {
            Log.Information("üîç LoadSettingsAsync –≤—ã–∑–≤–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Idle —Å–æ—Å—Ç–æ—è–Ω–∏–µ");
            try
            {
                var shortcut = _currentConfig.Input.KeyboardShortcut;
                ComboText = shortcut?.DisplayText ?? "Ctrl + Shift + R";
                Log.Information("üîç LoadSettingsAsync —É—Å—Ç–∞–Ω–æ–≤–∏–ª ComboText: {ComboText}", ComboText);
                _uiManager?.SetIdleState(ComboText);
                
                Log.Debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {Combo}", ComboText);
                return Task.CompletedTask;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
                return Task.CompletedTask;
            }
        }

        public override async Task StartCaptureAsync()
        {
            if (IsWaitingForInput || _captureManager == null)
            {
                Log.Debug("–ó–∞—Ö–≤–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                return;
            }

            try
            {
                Log.Debug("–ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");

                // –í–∫–ª—é—á–∞–µ–º capture mode - –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                _systemService.SetHotkeyCaptureMode(true);
                Log.Debug("KeyboardCaptureComponent: –≤–∫–ª—é—á–µ–Ω capture mode");

                await _captureManager.StartCaptureAsync(AppConstants.CaptureTimeoutSeconds);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
                
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–ª—é—á–∞–µ–º capture mode
                _systemService.SetHotkeyCaptureMode(false);
                
                OnStatusMessageChanged($"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {ex.Message}");
            }
        }

        private void SubscribeToEvents()
        {
            if (_captureManager != null)
            {
                _captureManager.CaptureCompleted += OnCaptureCompleted;
                _captureManager.CaptureTimeout += OnCaptureTimeout;
                _captureManager.StatusChanged += OnCaptureStatusChanged;
                _captureManager.CaptureError += OnCaptureError;
            }

            if (_uiManager != null)
            {
                _uiManager.StateChanged += OnUIStateChanged;
            }

            _configurationService.ConfigurationChanged += OnConfigurationChanged;
        }

        private void UnsubscribeFromEvents()
        {
            if (_captureManager != null)
            {
                _captureManager.CaptureCompleted -= OnCaptureCompleted;
                _captureManager.CaptureTimeout -= OnCaptureTimeout;
                _captureManager.StatusChanged -= OnCaptureStatusChanged;
                _captureManager.CaptureError -= OnCaptureError;
            }

            if (_uiManager != null)
            {
                _uiManager.StateChanged -= OnUIStateChanged;
            }
            _configurationService.ConfigurationChanged -= OnConfigurationChanged;  
        }
        
        private void OnConfigurationChanged(object? sender, ConfigurationChangedEvent e)
        {
            Log.Information("üîç KeyboardComponent –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {SettingName}", e.SettingName);
            Log.Information("üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI: IsWaitingForInput={IsWaiting}, ComboTextColor={Color}", 
                IsWaitingForInput, ComboTextColor);
            _ = LoadSettingsAsync();
        }

        // Event handlers
        private void OnCaptureCompleted(KeyboardShortcut capturedShortcut)
        {
            _ = HandleCaptureCompletedAsync(capturedShortcut);
        }

        private async Task HandleCaptureCompletedAsync(KeyboardShortcut capturedShortcut)
        {
            try
            {
                IsWaitingForInput = false;

                // –û—Ç–∫–ª—é—á–∞–µ–º capture mode - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö–æ—Ç–∫–µ–µ–≤
                _systemService.SetHotkeyCaptureMode(false);
                Log.Debug("KeyboardCaptureComponent: –≤—ã–∫–ª—é—á–µ–Ω capture mode –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞");

                // ‚úÖ –°–ù–ê–ß–ê–õ–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º SUCCESS (–∑–µ–ª–µ–Ω—ã–π)
                if (_uiManager != null)
                {
                    await _uiManager.CompleteSuccessAsync(capturedShortcut.DisplayText);
                }

                // ‚úÖ –ü–û–¢–û–ú –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç OnConfigurationChanged)
                _currentConfig.Input.KeyboardShortcut = capturedShortcut;
                await OnSettingChangedAsync(); 

                // ‚úÖ –ü–û–¢–û–ú —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–æ—Ç–∫–µ–π
                await _systemService.UnregisterGlobalHotkeyAsync();
                bool registered = await _systemService.RegisterGlobalHotkeyAsync(capturedShortcut);
        
                if (!registered)
                {
                    Log.Warning("–•–æ—Ç–∫–µ–π –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
                }

                Log.Information("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {Shortcut}", capturedShortcut.DisplayText);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏");
                
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–∞–µ–º capture mode
                _systemService.SetHotkeyCaptureMode(false);
                
                IsWaitingForInput = false;
                if (_uiManager != null)
                {
                    await _uiManager.CompleteWithErrorAsync($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}");
                }
            }
        }
        
        private void OnCaptureTimeout()
        {
            _ = HandleTimeoutAsync();
        }

        private async Task HandleTimeoutAsync()
        {
            // –û—Ç–∫–ª—é—á–∞–µ–º capture mode –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
            _systemService.SetHotkeyCaptureMode(false);
            Log.Debug("KeyboardCaptureComponent: –≤—ã–∫–ª—é—á–µ–Ω capture mode –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞");

            IsWaitingForInput = false;
            if (_uiManager != null)
            {
                await _uiManager.CompleteWithTimeoutAsync();
            }
        }

        private void OnCaptureStatusChanged(string status)
        {
            if (_captureManager?.IsCapturing == true)
            {
                _uiManager?.StartCapture(status, AppConstants.CaptureTimeoutSeconds);
                IsWaitingForInput = true;
            }
            else
            {
                IsWaitingForInput = false;
            }
        }

        private void OnCaptureError(string error)
        {
            _ = HandleErrorAsync(error);
        }

        private async Task HandleErrorAsync(string error)
        {
            // –û—Ç–∫–ª—é—á–∞–µ–º capture mode –ø—Ä–∏ –æ—à–∏–±–∫–µ
            _systemService.SetHotkeyCaptureMode(false);
            Log.Debug("KeyboardCaptureComponent: –≤—ã–∫–ª—é—á–µ–Ω capture mode –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏");

            IsWaitingForInput = false;
            if (_uiManager != null)
            {
                await _uiManager.CompleteWithErrorAsync(error);
            }
        }

        public override void Dispose()
        {
            // –ü—Ä–∏ Dispose —Ç–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–∞–µ–º capture mode –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            try
            {
                _systemService.SetHotkeyCaptureMode(false);
            }
            catch (Exception ex)
            {
                Log.Warning(ex, "KeyboardCaptureComponent: –æ—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è capture mode –ø—Ä–∏ Dispose");
            }

            UnsubscribeFromEvents();
            
            _captureManager?.Dispose();
            base.Dispose();
            
            _captureManager = null;
        }
    }
}