using CommunityToolkit.Mvvm.ComponentModel;
using ChatCaster.Windows.Services;
using ChatCaster.Core.Models;

namespace ChatCaster.Windows.ViewModels.Base
{
    public abstract partial class BaseSettingsViewModel : ViewModelBase, ISettingsViewModel
    {
        #region Protected Services

        protected readonly ConfigurationService? _configurationService;
        protected readonly ServiceContext? _serviceContext;
        #endregion

        #region Observable Properties

        [ObservableProperty]
        private bool _isLoadingUI = false;

        [ObservableProperty]
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _statusMessage = "";

        [ObservableProperty]
        private bool _hasUnsavedChanges = false;

        #endregion

        #region Constructor

        protected BaseSettingsViewModel(
            ConfigurationService? configurationService, 
            ServiceContext? serviceContext)
        {
            _configurationService = configurationService;
            _serviceContext = serviceContext;
        }

        #endregion

        #region ISettingsViewModel Implementation

        public async Task LoadSettingsAsync()
        {
            try
            {
                IsLoadingUI = true;
                StatusMessage = "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...";

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await LoadBaseSettingsAsync();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await LoadPageSpecificSettingsAsync();

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ UI —Å–æ–±—ã—Ç–∏—è
                SubscribeToUIEvents();

                StatusMessage = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã";
                IsInitialized = true;
            }
            catch (Exception ex)
            {
                StatusMessage = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {ex.Message}";
                Console.WriteLine($"‚ùå [{GetType().Name}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
            finally
            {
                IsLoadingUI = false;
            }
        }

        public async Task ApplySettingsAsync()
        {
            if (IsLoadingUI || _serviceContext?.Config == null || _configurationService == null)
                return;

            try
            {
                StatusMessage = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...";

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                await ApplySettingsToConfigAsync(_serviceContext.Config);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                await _configurationService.SaveConfigAsync(_serviceContext.Config);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å–µ—Ä–≤–∏—Å–∞–º
                await ApplySettingsToServicesAsync();

                HasUnsavedChanges = false;
                StatusMessage = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã";

                Console.WriteLine($"‚úÖ [{GetType().Name}] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                StatusMessage = $"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}";
                Console.WriteLine($"‚ùå [{GetType().Name}] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        public abstract void SubscribeToUIEvents();

        public virtual void Cleanup()
        {
            try
            {
                // –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
                UnsubscribeFromUIEvents();
                
                // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                CleanupPageSpecific();

                Console.WriteLine($"üßπ [{GetType().Name}] Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [{GetType().Name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ cleanup: {ex.Message}");
            }
        }

        public async Task InitializePageDataAsync()
        {
            try
            {
                StatusMessage = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...";

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await InitializePageSpecificDataAsync();

                StatusMessage = "–ì–æ—Ç–æ–≤–æ";
            }
            catch (Exception ex)
            {
                StatusMessage = $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}";
                Console.WriteLine($"‚ùå [{GetType().Name}] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
            }
        }

        #endregion

        #region Protected Virtual Methods (Override in derived classes)

        /// <summary>
        /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        /// </summary>
        protected virtual async Task LoadBaseSettingsAsync()
        {
            // –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            await Task.CompletedTask;
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        /// </summary>
        protected abstract Task LoadPageSpecificSettingsAsync();

        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –∫ –æ–±—ä–µ–∫—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        /// </summary>
        protected abstract Task ApplySettingsToConfigAsync(AppConfig config);

        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å–µ—Ä–≤–∏—Å–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        /// </summary>
        protected virtual async Task ApplySettingsToServicesAsync()
        {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            await Task.CompletedTask;
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã–µ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –º–æ–¥–µ–ª–∏ –∏ —Ç.–¥.)
        /// </summary>
        protected virtual async Task InitializePageSpecificDataAsync()
        {
            await Task.CompletedTask;
        }

        /// <summary>
        /// –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç UI —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
        /// </summary>
        protected virtual void UnsubscribeFromUIEvents()
        {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }

        /// <summary>
        /// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        /// </summary>
        protected virtual void CleanupPageSpecific()
        {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }

        #endregion

        #region Protected Helper Methods

        /// <summary>
        /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ UI —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        /// </summary>
        protected async void OnUISettingChanged()
        {
            if (IsLoadingUI) return;

            HasUnsavedChanges = true;
            await ApplySettingsAsync();
        }

        /// <summary>
        /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ViewModels
        /// </summary>
        protected async Task OnUISettingChangedAsync()
        {
            if (IsLoadingUI) return;

            HasUnsavedChanges = true;
            await ApplySettingsAsync();
        }

        /// <summary>
        /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ UI
        /// </summary>
        protected void UpdateStatus(string message, bool isError = false)
        {
            StatusMessage = message;
            if (isError)
            {
                Console.WriteLine($"‚ùå [{GetType().Name}] {message}");
            }
            else
            {
                Console.WriteLine($"üìù [{GetType().Name}] {message}");
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        /// </summary>
        protected bool IsReadyForOperation()
        {
            if (IsLoadingUI)
            {
                Console.WriteLine($"‚è≥ [{GetType().Name}] –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ UI");
                return false;
            }

            if (_serviceContext?.Config == null)
            {
                Console.WriteLine($"‚ùå [{GetType().Name}] ServiceContext.Config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                return false;
            }

            if (_configurationService == null)
            {
                Console.WriteLine($"‚ùå [{GetType().Name}] ConfigurationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                return false;
            }

            return true;
        }

        /// <summary>
        /// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ ComboBox –∫ enum –∑–Ω–∞—á–µ–Ω–∏—è–º
        /// </summary>
        protected void SelectComboBoxItemByTag<T>(System.Windows.Controls.ComboBox comboBox, T value) where T : struct, Enum
        {
            foreach (System.Windows.Controls.ComboBoxItem item in comboBox.Items)
            {
                if (item.Tag is string tag && Enum.TryParse<T>(tag, out var itemValue) && itemValue.Equals(value))
                {
                    item.IsSelected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ enum –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ ComboBox
        /// </summary>
        protected T? GetSelectedComboBoxValue<T>(System.Windows.Controls.ComboBox comboBox) where T : struct, Enum
        {
            var selectedItem = comboBox.SelectedItem as System.Windows.Controls.ComboBoxItem;
            if (selectedItem?.Tag is string tag && Enum.TryParse<T>(tag, out var value))
            {
                return value;
            }
            return null;
        }

        #endregion

        #region Public Initialization Method

        /// <summary>
        /// –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        public async Task InitializeAsync()
        {
            try
            {
                Console.WriteLine($"üî• [{GetType().Name}] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é");

                // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await InitializePageDataAsync();

                // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await LoadSettingsAsync();

                Console.WriteLine($"‚úÖ [{GetType().Name}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [{GetType().Name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                UpdateStatus($"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}", true);
            }
        }

        #endregion
    }
}