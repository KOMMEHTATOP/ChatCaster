using ChatCaster.Core.Constants;
using System.Windows;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Configuration;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.Views;
using ChatCaster.Windows.ViewModels;
using ChatCaster.Core.Models;
using ChatCaster.Core.Logging;
using ChatCaster.Core.Services.Audio;
using ChatCaster.Core.Services.Core;
using ChatCaster.Core.Services.Input;
using ChatCaster.Core.Services.Overlay;
using ChatCaster.Core.Services.System;
using ChatCaster.Core.Services.UI;
using ChatCaster.Core.Updates;
using ChatCaster.SpeechRecognition.Whisper.Extensions;
using ChatCaster.SpeechRecognition.Whisper.Constants;
using ChatCaster.Windows.Managers.MainPage;
using ChatCaster.Windows.Managers.VoiceRecording;
using ChatCaster.Windows.Services.IntegrationService;
using ChatCaster.Windows.Services.OverlayService;
using ChatCaster.Windows.Services.Navigation;
using Serilog;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace ChatCaster.Windows
{
    public class Program
    {
        private static IServiceProvider? _serviceProvider;
        private static Mutex? _singleInstanceMutex;

        // P/Invoke –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫–Ω–∞–º–∏
        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool IsIconic(IntPtr hWnd);

        private const int SW_RESTORE = 9;
        private const int SW_SHOW = 5;

        [STAThread]
        public static void Main(string[] args)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º single instance
            if (!CheckSingleInstance())
            {
                return; // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
            }

            try
            {
                InitializeLogging();
                Log.Information("ChatCaster –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...");

                // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                var host = CreateHostBuilder(args).Build();
                _serviceProvider = host.Services;

                // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ WPF –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                var app = new App();
                app.InitializeComponent();

                // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ DI
                var mainWindow = _serviceProvider.GetRequiredService<ChatCasterWindow>();
                var trayService = _serviceProvider.GetRequiredService<ITrayService>();
                var notificationService = _serviceProvider.GetRequiredService<INotificationService>();

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TrayService
                trayService.Initialize();

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NotificationService
                notificationService.InitializeAsync().GetAwaiter().GetResult();

                app.MainWindow = mainWindow;
                
                // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                app.Run(mainWindow);
            }
            catch (Exception ex)
            {
                Log.Fatal(ex, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatCaster");
                MessageBox.Show(
                    $"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n{ex.Message}",
                    "ChatCaster - –û—à–∏–±–∫–∞",
                    MessageBoxButton.OK,
                    MessageBoxImage.Error);
            }
            finally
            {
                Log.CloseAndFlush();
                _serviceProvider?.GetService<IHost>()?.Dispose();
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º mutex
                _singleInstanceMutex?.ReleaseMutex();
                _singleInstanceMutex?.Dispose();
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private static bool CheckSingleInstance()
        {
            const string mutexName = "ChatCaster_SingleInstance_Mutex";
            
            try
            {
                _singleInstanceMutex = new Mutex(true, mutexName, out bool createdNew);
                
                if (!createdNew)
                {
                    // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ
                    Log.Information("ChatCaster —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ");
                    ActivateExistingInstance();
                    return false;
                }
                
                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ single instance");
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫
                return true;
            }
        }

        /// <summary>
        /// –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        /// </summary>
        private static void ActivateExistingInstance()
        {
            try
            {
                var currentProcessName = Process.GetCurrentProcess().ProcessName;
                var processes = Process.GetProcessesByName(currentProcessName);

                foreach (var process in processes.Where(p => p.Id != Environment.ProcessId))
                {
                    var mainWindowHandle = process.MainWindowHandle;
                    if (mainWindowHandle != IntPtr.Zero)
                    {
                        // –ï—Å–ª–∏ –æ–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
                        if (IsIconic(mainWindowHandle))
                        {
                            ShowWindow(mainWindowHandle, SW_RESTORE);
                        }
                        else
                        {
                            ShowWindow(mainWindowHandle, SW_SHOW);
                        }
                        
                        // –í—ã–≤–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
                        SetForegroundWindow(mainWindowHandle);
                        
                        Log.Information("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ ChatCaster");
                        return;
                    }
                }

                Log.Warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–∫–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ChatCaster");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞");
            }
        }

        private static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((context, config) =>
                {
                    config.AddJsonFile("appsettings.json", optional: true)
                        .AddUserSecrets<Program>(optional: true);
                })
                .ConfigureServices((context, services) => { ConfigureServices(services, context.Configuration); });

        private static void ConfigureServices(IServiceCollection services, IConfiguration configuration)
        {
            Log.Debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...");

            // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
            services.AddSingleton(configuration);

            // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AppConfig
            services.AddSingleton<AppConfig>();
            services.AddSingleton<IConfigurationService, ConfigurationService>();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            services.AddSingleton<AppConfig>(provider =>
            {
                var configService = provider.GetRequiredService<IConfigurationService>();
                return configService.LoadConfigAsync().GetAwaiter().GetResult();
            });

            // === WHISPER –ú–û–î–£–õ–¨ ===
            services.AddWhisperAsSpeechRecognition(config =>
            {
                // –ü–æ–ª—É—á–∞–µ–º AppConfig –∏–∑ DI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Whisper
                var serviceProvider = services.BuildServiceProvider();
                var appConfig = serviceProvider.GetRequiredService<AppConfig>();
                var speechConfig = appConfig.SpeechRecognition;

                config.ModelSize = GetWhisperModelSize(speechConfig);
                config.ThreadCount = Environment.ProcessorCount / 2;
                config.EnableGpu = speechConfig.UseGpuAcceleration;
                config.Language = speechConfig.Language;
                config.ModelPath = AppConstants.Paths.GetModelsDirectory();
                speechConfig.EngineSettings["ModelPath"] = config.ModelPath;
                Log.Information("üîç [WHISPER_CONFIG] AppContext.BaseDirectory: {BaseDir}", AppContext.BaseDirectory);
                Log.Information("üîç [WHISPER_CONFIG] ModelPath —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ModelPath}", config.ModelPath);

                config.UseVAD = true;
                config.InitializationTimeoutSeconds = 30;
                config.RecognitionTimeoutSeconds = 60;
                config.MaxTokens = speechConfig.MaxTokens;
            });

            // === –û–°–ù–û–í–ù–´–ï –°–ï–†–í–ò–°–´ ===
            services.AddSingleton<ISystemIntegrationService, SystemIntegrationService>();
            services.AddSingleton<IOverlayService, WindowsOverlayService>();
            services.AddSingleton<ILocalizationService, LocalizationService>();

            // === –ê–£–î–ò–û –°–ï–†–í–ò–°–´ ===
            services.AddSingleton<WindowsAudioCompatibility>();
            services.AddSingleton<IAudioCaptureService>(provider =>
            {
                return new AudioCaptureService(provider.GetRequiredService<WindowsAudioCompatibility>());
            });

            // === –ì–ï–ô–ú–ü–ê–î –°–ï–†–í–ò–°–´ ===
            services.AddSingleton<Services.GamepadService.MainGamepadService>(provider =>
                new Services.GamepadService.MainGamepadService(
                    new Services.GamepadService.XInputProvider(),
                    provider.GetRequiredService<IConfigurationService>()
                ));
            services.AddSingleton<IGamepadService>(provider =>
                provider.GetRequiredService<Services.GamepadService.MainGamepadService>());

            // === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –°–ï–†–í–ò–°–´ ===
            services.AddSingleton<IWindowService, WindowService>();
            services.AddSingleton<ITextInputService, TextInputService>();
            services.AddSingleton<IGlobalHotkeyService, GlobalHotkeyService>();
            services.AddSingleton<ISystemNotificationService, SystemNotificationService>();
            services.AddSingleton<IStartupManagerService, WindowsStartupManagerService>();

            // === TRAY –°–ï–†–í–ò–°–´ ===
            services.AddSingleton<ITrayService, TrayService>();
            services.AddSingleton<INotificationService, NotificationService>();

            // === VOICE RECORDING –°–ï–†–í–ò–°–´ ===
            services.AddSingleton<IVoiceRecordingService>(provider =>
                new VoiceRecordingCoordinator(
                    provider.GetRequiredService<IAudioCaptureService>(),
                    provider.GetRequiredService<ISpeechRecognitionService>(),
                    provider.GetRequiredService<IConfigurationService>()
                ));

            services.AddSingleton<Services.GamepadService.GamepadVoiceCoordinator>(provider =>
                new Services.GamepadService.GamepadVoiceCoordinator(
                    provider.GetRequiredService<IGamepadService>(),
                    provider.GetRequiredService<IVoiceRecordingService>(),
                    provider.GetRequiredService<ISystemIntegrationService>(),
                    provider.GetRequiredService<IConfigurationService>(),
                    provider.GetRequiredService<ITrayService>()
                ));

            // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
            services.AddSingleton<ApplicationInitializationService>();

            // –ù–ê–í–ò–ì–ê–¶–ò–Ø 
            services.AddSingleton<PageFactory>();
            services.AddSingleton<PageCacheManager>();
            services.AddSingleton<ViewModelCleanupService>();
            services.AddSingleton<ViewModels.Navigation.NavigationManager>();

            // === –ú–ï–ù–ï–î–ñ–ï–†–´ MAINPAGE ===
            services.AddSingleton<RecordingStatusManager>();
            services.AddSingleton<DeviceDisplayManager>(provider =>
                new DeviceDisplayManager(
                    provider.GetRequiredService<IAudioCaptureService>(),
                    provider.GetRequiredService<IConfigurationService>(),
                    provider.GetRequiredService<ILocalizationService>()
                ));

            // === –ö–û–ú–ü–û–ù–ï–ù–¢–´ VIEWMODELS ===
            services.AddSingleton<ViewModels.Components.RecordingStatusComponentViewModel>();
            services.AddSingleton<ViewModels.Components.RecognitionResultsComponentViewModel>();

            // === VIEWMODELS ===
            services.AddSingleton<ChatCasterWindowViewModel>();
            services.AddSingleton<AudioSettingsViewModel>();
            services.AddSingleton<InterfaceSettingsViewModel>();
            services.AddSingleton<ControlSettingsViewModel>();
            services.AddSingleton<MainPageViewModel>();

            // === VIEWS ===
            services.AddSingleton<ChatCasterWindow>();

            // === –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô ===
            services.AddSingleton<IUpdateService, GitHubUpdateService>();

            Log.Information("DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–∑ EngineSettings –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        /// </summary>
        private static string GetWhisperModelSize(SpeechRecognitionConfig speechConfig)
        {
            if (speechConfig.EngineSettings.TryGetValue("ModelSize", out var modelSizeObj))
            {
                var modelSizeStr = modelSizeObj?.ToString();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                if (!string.IsNullOrEmpty(modelSizeStr) &&
                    WhisperConstants.ModelSizes.All.Contains(modelSizeStr))
                {
                    return modelSizeStr;
                }
            }

            return WhisperConstants.ModelSizes.Base;
        }

        private static void InitializeLogging()
        {
            try
            {
                var loggingConfig = new LoggingConfig();

#if DEBUG
                loggingConfig.EnableConsoleLogging = true;
                loggingConfig.MinimumLevel = Serilog.Events.LogEventLevel.Debug;
#else
                loggingConfig.EnableConsoleLogging = false;
                loggingConfig.MinimumLevel = Serilog.Events.LogEventLevel.Information;
#endif

                Log.Logger = LoggingConfiguration.CreateLogger(loggingConfig);
                Log.Information("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
            }
            catch (Exception ex)
            {
                Log.Information($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }
    }
}