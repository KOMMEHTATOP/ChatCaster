using System.Timers;
using ChatCaster.Core.Events;
using ChatCaster.Core.Models;
using ChatCaster.Core.Services;

namespace ChatCaster.Windows.Services.GamepadService;

/// <summary>
/// –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–π–º–ø–∞–¥–∞–º–∏
/// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –¥–µ—Ç–µ–∫—Ü–∏—è, –ø—Ä–æ–≤–∞–π–¥–µ—Ä
/// </summary>
public class MainGamepadService : IGamepadService, IDisposable
{
    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    public event EventHandler<GamepadConnectedEvent>? GamepadConnected;
    public event EventHandler<GamepadDisconnectedEvent>? GamepadDisconnected;
    public event EventHandler<GamepadShortcutPressedEvent>? ShortcutPressed;

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    private readonly IXInputProvider _inputProvider;
    private readonly GamepadMonitor _monitor;
    private readonly ShortcutDetector _detector;
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫
    private System.Timers.Timer? _pollingTimer;
    private readonly object _lockObject = new();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    private bool _isMonitoring = false;
    private bool _isDisposed = false;
    private GamepadShortcut? _currentShortcut;
    private int _pollingRateMs = 16; // ~60 FPS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    public MainGamepadService() : this(new XInputProvider())
    {
        Console.WriteLine("üéÆ [MainGamepadService] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∑–≤–∞–Ω");
    }

    public MainGamepadService(IXInputProvider inputProvider)
    {
        Console.WriteLine("üéÆ [MainGamepadService] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—ã–∑–≤–∞–Ω");
    
        _inputProvider = inputProvider ?? throw new ArgumentNullException(nameof(inputProvider));
        _monitor = new GamepadMonitor(_inputProvider);
        _detector = new ShortcutDetector();

        Console.WriteLine("üéÆ [MainGamepadService] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã");

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        _monitor.GamepadConnected += OnGamepadConnected;
        _monitor.GamepadDisconnected += OnGamepadDisconnected;
        _detector.ShortcutPressed += OnShortcutPressed;
    
        Console.WriteLine("üéÆ [MainGamepadService] –°–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã");
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å XInput
        try 
        {
            bool isAvailable = _inputProvider.IsXInputAvailable();
            Console.WriteLine($"üéÆ [MainGamepadService] XInput –¥–æ—Å—Ç—É–ø–µ–Ω: {isAvailable}");
        
            if (isAvailable)
            {
                int firstController = _inputProvider.FindFirstConnectedController();
                Console.WriteLine($"üéÆ [MainGamepadService] –ü–µ—Ä–≤—ã–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: {firstController}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [MainGamepadService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ XInput: {ex.Message}");
        }
    
        Console.WriteLine("üéÆ [MainGamepadService] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    #region IGamepadService Implementation

    public bool IsMonitoring
    {
        get
        {
            lock (_lockObject)
            {
                return _isMonitoring;
            }
        }
    }

    public bool IsGamepadConnected => _monitor.IsGamepadConnected;

    public async Task StartMonitoringAsync(GamepadShortcut shortcut)
    {
        if (shortcut == null)
            throw new ArgumentNullException(nameof(shortcut));

        await Task.Run(() =>
        {
            lock (_lockObject)
            {
                if (_isMonitoring)
                {
                    return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
                }

                if (!_inputProvider.IsXInputAvailable())
                {
                    throw new InvalidOperationException("XInput –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ");
                }

                if (!_detector.IsValidShortcut(shortcut))
                {
                    throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫", nameof(shortcut));
                }

                try
                {
                    _currentShortcut = shortcut;

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                    _monitor.StartMonitoring(1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –∫–Ω–æ–ø–æ–∫
                    StartButtonPolling();

                    _isMonitoring = true;
                    Console.WriteLine($"[MainGamepadService] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: {shortcut.DisplayText}");
                }
                catch (Exception ex)
                {
                    // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    StopMonitoringInternal();
                    throw new InvalidOperationException($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–µ–π–º–ø–∞–¥–∞: {ex.Message}", ex);
                }
            }
        });
    }

    public async Task StopMonitoringAsync()
    {
        await Task.Run(() =>
        {
            lock (_lockObject)
            {
                StopMonitoringInternal();
            }
        });
    }

    public async Task<GamepadInfo?> GetConnectedGamepadAsync()
    {
        return await Task.Run(() =>
        {
            return _monitor.GetActiveGamepadInfo();
        });
    }

    public GamepadState? GetCurrentState()
    {
        lock (_lockObject)
        {
            int activeIndex = _monitor.ActiveControllerIndex;
            if (activeIndex < 0)
                return null;

            return _inputProvider.GetControllerState(activeIndex);
        }
    }

    public async Task<bool> TestConnectionAsync()
    {
        return await Task.Run(() =>
        {
            if (!_inputProvider.IsXInputAvailable())
                return false;

            int controllerIndex = _inputProvider.FindFirstConnectedController();
            return controllerIndex >= 0;
        });
    }

    #endregion

    #region Private Methods

    /// <summary>
    /// –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–µ–∑ lock)
    /// </summary>
    private void StopMonitoringInternal()
    {
        if (!_isMonitoring)
            return;

        try
        {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å –∫–Ω–æ–ø–æ–∫
            StopButtonPolling();

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            _monitor.StopMonitoring();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            _detector.ResetState();

            _currentShortcut = null;
            _isMonitoring = false;

            Console.WriteLine("[MainGamepadService] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MainGamepadService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {ex.Message}");
        }
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å –∫–Ω–æ–ø–æ–∫ –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    private void StartButtonPolling()
    {
        StopButtonPolling(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω

        _pollingTimer = new System.Timers.Timer(_pollingRateMs);
        _pollingTimer.Elapsed += OnPollingTimer;
        _pollingTimer.AutoReset = true;
        _pollingTimer.Start();
    }

    /// <summary>
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ä–æ—Å –∫–Ω–æ–ø–æ–∫
    /// </summary>
    private void StopButtonPolling()
    {
        if (_pollingTimer != null)
        {
            _pollingTimer.Stop();
            _pollingTimer.Dispose();
            _pollingTimer = null;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–æ–∫
    /// </summary>
    private void OnPollingTimer(object? sender, ElapsedEventArgs e)
    {
        if (!_isMonitoring)
            return;

        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–µ–π–º–ø–∞–¥–∞
            int activeIndex = _monitor.ActiveControllerIndex;
            if (activeIndex < 0)
            {
                // –ì–µ–π–º–ø–∞–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
                _detector.ResetState();
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            var currentState = _inputProvider.GetControllerState(activeIndex);
            if (currentState == null)
            {
                _detector.ResetState();
                return;
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (_currentShortcut != null && _detector.CurrentShortcut != _currentShortcut)
            {
                _detector.ConfigureShortcut(_currentShortcut, activeIndex);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            _detector.UpdateState(currentState);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MainGamepadService] –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–æ—Å–µ –∫–Ω–æ–ø–æ–∫: {ex.Message}");
        }
    }

    #endregion

    #region Event Handlers

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    private void OnGamepadConnected(object? sender, GamepadConnectedEvent e)
    {
        Console.WriteLine($"[MainGamepadService] –ì–µ–π–º–ø–∞–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω: {e.GamepadInfo.Name}");
        
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–∞–ª—å—à–µ
        GamepadConnected?.Invoke(this, e);

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        _monitor.ForceConnectionCheck();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    private void OnGamepadDisconnected(object? sender, GamepadDisconnectedEvent e)
    {
        Console.WriteLine($"[MainGamepadService] –ì–µ–π–º–ø–∞–¥ –æ—Ç–∫–ª—é—á–µ–Ω: —Å–ª–æ—Ç {e.GamepadIndex}");
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        _detector.ResetState();
        
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–∞–ª—å—à–µ
        GamepadDisconnected?.Invoke(this, e);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    /// </summary>
    private void OnShortcutPressed(object? sender, GamepadShortcutPressedEvent e)
    {
        Console.WriteLine($"[MainGamepadService] –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e.Shortcut.DisplayText} ({e.HoldTimeMs}ms)");
        
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–∞–ª—å—à–µ
        ShortcutPressed?.Invoke(this, e);
    }

    #endregion

    #region Configuration

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –æ–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–æ–∫
    /// </summary>
    /// <param name="pollingRateMs">–ß–∞—Å—Ç–æ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω–∏–º—É–º 10ms)</param>
    public void SetPollingRate(int pollingRateMs)
    {
        lock (_lockObject)
        {
            _pollingRateMs = Math.Max(pollingRateMs, 10); // –ú–∏–Ω–∏–º—É–º 10ms (100 FPS)
            
            // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            if (_isMonitoring && _pollingTimer != null)
            {
                StartButtonPolling();
            }
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç–æ—Ç—É –æ–ø—Ä–æ—Å–∞
    /// </summary>
    public int GetPollingRate()
    {
        lock (_lockObject)
        {
            return _pollingRateMs;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    /// </summary>
    public (bool isPressed, int? holdTime) GetShortcutStatus()
    {
        return (_detector.IsShortcutCurrentlyPressed(), _detector.GetCurrentHoldTime());
    }

    #endregion

    #region IDisposable

    public void Dispose()
    {
        if (!_isDisposed)
        {
            lock (_lockObject)
            {
                StopMonitoringInternal();
                
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
                _monitor.GamepadConnected -= OnGamepadConnected;
                _monitor.GamepadDisconnected -= OnGamepadDisconnected;
                _detector.ShortcutPressed -= OnShortcutPressed;
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                _monitor.Dispose();
                
                _isDisposed = true;
            }
        }
    }

    #endregion
}