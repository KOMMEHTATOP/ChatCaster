using ChatCaster.Core.Events;
using ChatCaster.Core.Models;
using ChatCaster.Core.Services;
using ChatCaster.Windows.Services;

namespace ChatCaster.Windows.Services.GamepadService;

/// <summary>
/// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–µ–∂–¥—É –≥–µ–π–º–ø–∞–¥–æ–º –∏ –∑–∞–ø–∏—Å—å—é –≥–æ–ª–æ—Å–∞
/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –≥–µ–π–º–ø–∞–¥–∞ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å—é
/// </summary>
public class GamepadVoiceCoordinator : IDisposable
{
    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private readonly IGamepadService _gamepadService;
    private readonly IVoiceRecordingService _voiceService;
    private readonly ISystemIntegrationService _systemService;
    private readonly IConfigurationService _configService;
    private readonly ITrayService _trayService; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –∏–∑ DI

    private readonly object _lockObject = new();
    private bool _isDisposed = false;
    private bool _isInitialized = false;

    // –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    public enum VoiceActivationMode
    {
        Toggle, // –û–¥–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ —Å—Ç–∞—Ä—Ç, –≤—Ç–æ—Ä–æ–µ —Å—Ç–æ–ø
        PushToTalk // –î–µ—Ä–∂–∞—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    }

    private VoiceActivationMode _activationMode = VoiceActivationMode.Toggle;

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º ITrayService –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public GamepadVoiceCoordinator(
        IGamepadService gamepadService,
        IVoiceRecordingService voiceService,
        ISystemIntegrationService systemService,
        IConfigurationService configService,
        ITrayService trayService) // ‚úÖ –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†
    {
        _gamepadService = gamepadService ?? throw new ArgumentNullException(nameof(gamepadService));
        _voiceService = voiceService ?? throw new ArgumentNullException(nameof(voiceService));
        _systemService = systemService ?? throw new ArgumentNullException(nameof(systemService));
        _configService = configService ?? throw new ArgumentNullException(nameof(configService));
        _trayService = trayService ?? throw new ArgumentNullException(nameof(trayService)); // ‚úÖ –ù–û–í–û–ï

        Console.WriteLine("üéÆ [GamepadVoiceCoordinator] –°–æ–∑–¥–∞–Ω —Å ITrayService –∏–∑ DI");
    }

    /// <summary>
    /// –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞
    /// </summary>
    public VoiceActivationMode ActivationMode
    {
        get
        {
            lock (_lockObject)
            {
                return _activationMode;
            }
        }
        set
        {
            lock (_lockObject)
            {
                _activationMode = value;
                Console.WriteLine($"[GamepadVoiceCoordinator] –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {value}");
            }
        }
    }

    /// <summary>
    /// –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public bool IsInitialized
    {
        get
        {
            lock (_lockObject)
            {
                return _isInitialized;
            }
        }
    }

    /// <summary>
    /// –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    public bool IsGamepadActive => _gamepadService.IsMonitoring;

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    /// </summary>
    public async Task<bool> InitializeAsync()
    {
        Console.WriteLine("üéÆ [GamepadVoiceCoordinator] InitializeAsync –Ω–∞—á–∞—Ç");

        try
        {
            lock (_lockObject)
            {
                if (_isInitialized)
                {
                    Console.WriteLine("üéÆ [GamepadVoiceCoordinator] –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    return true;
                }

                Console.WriteLine("üéÆ [GamepadVoiceCoordinator] –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≥–µ–π–º–ø–∞–¥–∞...");
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≥–µ–π–º–ø–∞–¥–∞
                _gamepadService.GamepadConnected += OnGamepadConnected;
                _gamepadService.GamepadDisconnected += OnGamepadDisconnected;
                _gamepadService.ShortcutPressed += OnGamepadShortcutPressed;

                Console.WriteLine("üéÆ [GamepadVoiceCoordinator] –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏...");
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                _voiceService.StatusChanged += OnVoiceRecordingStatusChanged;
                _voiceService.RecognitionCompleted += OnVoiceRecognitionCompleted;
            }

            Console.WriteLine("üéÆ [GamepadVoiceCoordinator] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...");
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–π–º–ø–∞–¥–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            var config = await _configService.LoadConfigAsync();
            Console.WriteLine(
                $"üéÆ [GamepadVoiceCoordinator] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. EnableGamepadControl: {config.Input.EnableGamepadControl}");

            if (!config.Input.EnableGamepadControl)
            {
                Console.WriteLine("‚ö†Ô∏è [GamepadVoiceCoordinator] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–π–º–ø–∞–¥–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");

                lock (_lockObject)
                {
                    _isInitialized = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
                }

                return true;
            }

            if (config.Input.GamepadShortcut == null)
            {
                Console.WriteLine("‚ùå [GamepadVoiceCoordinator] GamepadShortcut –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                return false;
            }

            Console.WriteLine(
                $"üéÆ [GamepadVoiceCoordinator] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–π–º–ø–∞–¥–∞: {config.Input.GamepadShortcut.PrimaryButton} + {config.Input.GamepadShortcut.SecondaryButton}");

            Console.WriteLine("üéÆ [GamepadVoiceCoordinator] –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–π–º–ø–∞–¥–∞...");
            await _gamepadService.StartMonitoringAsync(config.Input.GamepadShortcut);
            Console.WriteLine("‚úÖ [GamepadVoiceCoordinator] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–π–º–ø–∞–¥–∞ –∑–∞–ø—É—â–µ–Ω");

            lock (_lockObject)
            {
                _isInitialized = true;
            }

            Console.WriteLine("‚úÖ [GamepadVoiceCoordinator] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [GamepadVoiceCoordinator] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
            _trayService.ShowNotification("–û—à–∏–±–∫–∞ –≥–µ–π–º–ø–∞–¥–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–π–º–ø–∞–¥", NotificationType.Error);
            return false;
        }
    }
    
    /// <summary>
    /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    /// </summary>
    public async Task ShutdownAsync()
    {
        try
        {
            lock (_lockObject)
            {
                if (!_isInitialized)
                    return;

                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
                _gamepadService.GamepadConnected -= OnGamepadConnected;
                _gamepadService.GamepadDisconnected -= OnGamepadDisconnected;
                _gamepadService.ShortcutPressed -= OnGamepadShortcutPressed;
                _voiceService.StatusChanged -= OnVoiceRecordingStatusChanged;
                _voiceService.RecognitionCompleted -= OnVoiceRecognitionCompleted;

                _isInitialized = false;
            }

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–π–º–ø–∞–¥–∞
            await _gamepadService.StopMonitoringAsync();

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∏–¥–µ—Ç
            if (_voiceService.IsRecording)
            {
                await _voiceService.CancelRecordingAsync();
            }

            Console.WriteLine("[GamepadVoiceCoordinator] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[GamepadVoiceCoordinator] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    public async Task UpdateGamepadSettingsAsync(GamepadShortcut newShortcut)
    {
        try
        {
            if (!_isInitialized)
                return;

            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await _gamepadService.StopMonitoringAsync();
            await _gamepadService.StartMonitoringAsync(newShortcut);

            Console.WriteLine($"[GamepadVoiceCoordinator] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–π–º–ø–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {newShortcut.DisplayText}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[GamepadVoiceCoordinator] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    public async Task<bool> TestGamepadAsync()
    {
        try
        {
            return await _gamepadService.TestConnectionAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[GamepadVoiceCoordinator] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞: {ex.Message}");
            return false;
        }
    }

    #region Event Handlers

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    private void OnGamepadConnected(object? sender, GamepadConnectedEvent e)
    {
        Console.WriteLine($"[GamepadVoiceCoordinator] üéÆ –ì–µ–π–º–ø–∞–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω: {e.GamepadInfo.Name}");
        _trayService.ShowNotification("–ì–µ–π–º–ø–∞–¥", $"–ü–æ–¥–∫–ª—é—á–µ–Ω: {e.GamepadInfo.Name}", NotificationType.Success);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    private void OnGamepadDisconnected(object? sender, GamepadDisconnectedEvent e)
    {
        Console.WriteLine($"[GamepadVoiceCoordinator] üéÆ –ì–µ–π–º–ø–∞–¥ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑ —Å–ª–æ—Ç–∞ {e.GamepadIndex}");
        _trayService.ShowNotification("–ì–µ–π–º–ø–∞–¥", "–ì–µ–π–º–ø–∞–¥ –æ—Ç–∫–ª—é—á–µ–Ω", NotificationType.Warning);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –æ–Ω–∞ –∏–¥–µ—Ç
        Task.Run(async () =>
        {
            try
            {
                if (_voiceService.IsRecording)
                {
                    await _voiceService.CancelRecordingAsync();
                    Console.WriteLine("[GamepadVoiceCoordinator] –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–µ–π–º–ø–∞–¥–∞");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[GamepadVoiceCoordinator] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {ex.Message}");
            }
        });
    }

    /// <summary>
    /// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    private void OnGamepadShortcutPressed(object? sender, GamepadShortcutPressedEvent e)
    {
        Console.WriteLine($"[GamepadVoiceCoordinator] üéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e.Shortcut.DisplayText} ({e.HoldTimeMs}ms)");

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        Task.Run(async () =>
        {
            try
            {
                await HandleShortcutPressed(e);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[GamepadVoiceCoordinator] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {ex.Message}");
                _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–π–º–ø–∞–¥–∞", NotificationType.Error);
            }
        });
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    /// </summary>
    private async Task HandleShortcutPressed(GamepadShortcutPressedEvent e)
    {
        switch (_activationMode)
        {
            case VoiceActivationMode.Toggle:
                await HandleToggleMode();
                break;

            case VoiceActivationMode.PushToTalk:
                // –ë—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Toggle
                await HandleToggleMode();
                break;

            default:
                Console.WriteLine($"[GamepadVoiceCoordinator] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {_activationMode}");
                break;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ Toggle (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø)
    /// </summary>
    private async Task HandleToggleMode()
    {
        if (_voiceService.IsRecording)
        {
            // –ó–∞–ø–∏—Å—å –∏–¥–µ—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            Console.WriteLine("[GamepadVoiceCoordinator] üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ –≥–µ–π–º–ø–∞–¥—É");
            var result = await _voiceService.StopRecordingAsync();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            if (result.Success && !string.IsNullOrEmpty(result.RecognizedText))
            {
                await _systemService.SendTextAsync(result.RecognizedText);
                Console.WriteLine($"[GamepadVoiceCoordinator] ‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: '{result.RecognizedText}'");
                _trayService.ShowNotification("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", result.RecognizedText, NotificationType.Success);
            }
            else
            {
                Console.WriteLine($"[GamepadVoiceCoordinator] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {result.ErrorMessage}");
                _trayService.ShowNotification("–û—à–∏–±–∫–∞", result.ErrorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å", NotificationType.Error);
            }
        }
        else
        {
            // –ó–∞–ø–∏—Å—å –Ω–µ –∏–¥–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º
            Console.WriteLine("[GamepadVoiceCoordinator] üé§ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ –≥–µ–π–º–ø–∞–¥—É");
            bool started = await _voiceService.StartRecordingAsync();

            if (started)
            {
                Console.WriteLine("[GamepadVoiceCoordinator] ‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å");
                _trayService.ShowNotification("–ó–∞–ø–∏—Å—å", "–ì–æ–≤–æ—Ä–∏—Ç–µ...", NotificationType.Info);
            }
            else
            {
                Console.WriteLine("[GamepadVoiceCoordinator] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å");
                _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", NotificationType.Error);
            }
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
    /// </summary>
    private void OnVoiceRecordingStatusChanged(object? sender, RecordingStatusChangedEvent e)
    {
        // –£–±—Ä–∞–ª–∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ - –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    /// </summary>
    private void OnVoiceRecognitionCompleted(object? sender, VoiceRecognitionCompletedEvent e)
    {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ HandleToggleMode, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å
        if (e.Result.Success)
        {
            Console.WriteLine($"[GamepadVoiceCoordinator] üéâ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: '{e.Result.RecognizedText}'");
        }
        else
        {
            Console.WriteLine($"[GamepadVoiceCoordinator] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e.Result.ErrorMessage}");
        }
    }

    #endregion

    public void Dispose()
    {
        if (!_isDisposed)
        {
            Task.Run(async () => await ShutdownAsync());
            _isDisposed = true;
        }
    }
}