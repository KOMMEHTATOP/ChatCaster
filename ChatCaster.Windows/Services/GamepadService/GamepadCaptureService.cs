using ChatCaster.Core.Events;
using ChatCaster.Core.Models;
using ChatCaster.Core.Services;
using ChatCaster.Core.Constants;

namespace ChatCaster.Windows.Services.GamepadService;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥–µ–π–º–ø–∞–¥–∞
/// –†–∞–±–æ—Ç–∞–µ—Ç –ù–ê–î –æ—Å–Ω–æ–≤–Ω—ã–º MainGamepadService, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π
/// </summary>
public class GamepadCaptureService : IDisposable
{
    public event EventHandler<GamepadShortcut>? ShortcutCaptured;
    public event EventHandler<string>? CaptureStatusChanged;
    
    private readonly MainGamepadService _mainGamepadService;
    private CancellationTokenSource? _captureTokenSource;
    private bool _isCapturing = false;
    private bool _isDisposed = false;
    
    // –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    private readonly HashSet<GamepadButton> _accumulatedButtons = new();
    private DateTime _firstButtonPressTime = DateTime.MinValue;
    
    public bool IsCapturing => _isCapturing;
    
    public GamepadCaptureService(MainGamepadService mainGamepadService)
    {
        _mainGamepadService = mainGamepadService ?? throw new ArgumentNullException(nameof(mainGamepadService));
    }
    
    /// <summary>
    /// –ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    public async Task<bool> StartCaptureAsync(int timeoutSeconds = 30)
    {
        if (_isCapturing)
        {
            Console.WriteLine("üéÆ [Capture] –ó–∞—Ö–≤–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");
            return false;
        }
        
        try
        {
            _isCapturing = true;
            _captureTokenSource = new CancellationTokenSource();
            _accumulatedButtons.Clear();
            _firstButtonPressTime = DateTime.MinValue;
            
            Console.WriteLine("üéÆ [Capture] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–µ–π–º–ø–∞–¥–∞");
            CaptureStatusChanged?.Invoke(this, "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫ –Ω–∞ –≥–µ–π–º–ø–∞–¥–µ...");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            await CaptureWithTimeout(timeoutSeconds, _captureTokenSource.Token);
            
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [Capture] –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            CaptureStatusChanged?.Invoke(this, $"–û—à–∏–±–∫–∞: {ex.Message}");
            StopCapture();
            return false;
        }
    }
    
    /// <summary>
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç
    /// </summary>
    public void StopCapture()
    {
        if (!_isCapturing)
            return;
            
        try
        {
            _captureTokenSource?.Cancel();
            _isCapturing = false;
            _accumulatedButtons.Clear();
            
            Console.WriteLine("üéÆ [Capture] –ó–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            CaptureStatusChanged?.Invoke(this, "–ó–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå [Capture] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
        }
    }
    
    /// <summary>
    /// –ó–∞—Ö–≤–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
    /// </summary>
    private async Task CaptureWithTimeout(int timeoutSeconds, CancellationToken cancellationToken)
    {
        var timeoutTask = Task.Delay(timeoutSeconds * 1000, cancellationToken);
        
        while (!cancellationToken.IsCancellationRequested)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if (timeoutTask.IsCompleted)
            {
                Console.WriteLine("‚è∞ [Capture] –¢–∞–π–º–∞—É—Ç –∑–∞—Ö–≤–∞—Ç–∞");
                CaptureStatusChanged?.Invoke(this, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ");
                StopCapture();
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –û–°–ù–û–í–ù–û–ô —Å–µ—Ä–≤–∏—Å
            var currentState = _mainGamepadService.GetCurrentState();
            if (currentState == null)
            {
                await Task.Delay(AppConstants.CapturePollingRateMs, cancellationToken);
                continue;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            await ProcessGamepadState(currentState, cancellationToken);
            
            await Task.Delay(AppConstants.CapturePollingRateMs, cancellationToken); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ Core
        }
    }
    
    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–π–º–ø–∞–¥–∞ –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
    /// </summary>
    private async Task ProcessGamepadState(GamepadState currentState, CancellationToken cancellationToken)
    {
        var currentlyPressed = currentState.GetPressedButtons().ToHashSet();
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
        if (currentlyPressed.Count > 0)
        {
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
            if (_firstButtonPressTime == DateTime.MinValue)
            {
                _firstButtonPressTime = DateTime.Now;
                Console.WriteLine("üéÆ [Capture] –ù–∞—á–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫");
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
            foreach (var button in currentlyPressed)
            {
                if (_accumulatedButtons.Add(button)) // Add –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤—ã–π
                {
                    Console.WriteLine($"üéÆ [Capture] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button}");
                }
            }
            
            Console.WriteLine($"üéÆ [Capture] –ù–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏: {string.Join(", ", currentlyPressed)}");
            Console.WriteLine($"üéÆ [Capture] –í—Å–µ–≥–æ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {string.Join(", ", _accumulatedButtons)}");
        }
        else if (_accumulatedButtons.Count > 0)
        {
            // –í—Å–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—É—â–µ–Ω—ã, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
            var holdTime = DateTime.Now - _firstButtonPressTime;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ Core)
            if (holdTime.TotalMilliseconds >= AppConstants.MinHoldTimeMs)
            {
                Console.WriteLine("üéÆ [Capture] –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—É—â–µ–Ω—ã");
                
                // –°–æ–∑–¥–∞–µ–º —à–æ—Ä—Ç–∫–∞—Ç –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                var shortcut = CreateShortcutFromAccumulatedButtons();
                Console.WriteLine($"üéÆ [Capture] –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {shortcut.DisplayText}");
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞—Ö–≤–∞—Ç–µ
                ShortcutCaptured?.Invoke(this, shortcut);
                CaptureStatusChanged?.Invoke(this, $"–ó–∞—Ö–≤–∞—á–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {shortcut.DisplayText}");
                
                StopCapture();
                return;
            }
            else
            {
                Console.WriteLine($"üéÆ [Capture] –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ({holdTime.TotalMilliseconds:F0}ms), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º");
                _accumulatedButtons.Clear();
                _firstButtonPressTime = DateTime.MinValue;
            }
        }
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç GamepadShortcut –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    /// </summary>
    private GamepadShortcut CreateShortcutFromAccumulatedButtons()
    {
        var buttonsList = _accumulatedButtons.ToList();
        
        if (buttonsList.Count == 1)
        {
            // –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –¥—É–±–ª–∏—Ä—É–µ–º –µ—ë –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Core
            return new GamepadShortcut
            {
                PrimaryButton = buttonsList[0],
                SecondaryButton = buttonsList[0], 
                RequireBothButtons = false,
                HoldTimeMs = AppConstants.MinHoldTimeMs // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ Core
            };
        }
        else if (buttonsList.Count >= 2)
        {
            // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ (–º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
            return new GamepadShortcut
            {
                PrimaryButton = buttonsList[0],
                SecondaryButton = buttonsList[1],
                RequireBothButtons = true,
                HoldTimeMs = AppConstants.MinHoldTimeMs // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ Core
            };
        }
        else
        {
            // Fallback (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
            return new GamepadShortcut
            {
                PrimaryButton = GamepadButton.A,
                SecondaryButton = GamepadButton.B,
                RequireBothButtons = false,
                HoldTimeMs = AppConstants.MinHoldTimeMs
            };
        }
    }
    
    public void Dispose()
    {
        if (!_isDisposed)
        {
            StopCapture();
            _captureTokenSource?.Dispose();
            _isDisposed = true;
        }
    }
}