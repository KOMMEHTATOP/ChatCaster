using ChatCaster.Core.Models;
using ChatCaster.Core.Services.Audio;
using ChatCaster.Core.Services.Core;
using ChatCaster.Core.Services.Overlay;
using ChatCaster.Core.Services.System;
using ChatCaster.Windows.Services.GamepadService;
using Serilog;
using System.IO;

namespace ChatCaster.Windows.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    /// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ ChatCasterWindowViewModel
    /// </summary>
    public class ApplicationInitializationService
    {
        private readonly IConfigurationService _configurationService;
        private readonly ISpeechRecognitionService _speechService;
        private readonly IAudioCaptureService _audioService;
        private readonly IOverlayService _overlayService;
        private readonly ISystemIntegrationService _systemService;
        private readonly GamepadVoiceCoordinator _gamepadVoiceCoordinator;
        private readonly IStartupManagerService _startupManagerService;


        public ApplicationInitializationService(
            IConfigurationService configurationService,
            ISpeechRecognitionService speechService,
            IAudioCaptureService audioService,
            IOverlayService overlayService,
            ISystemIntegrationService systemService,
            GamepadVoiceCoordinator gamepadVoiceCoordinator,
            IStartupManagerService startupManagerService)
        {
            _configurationService = configurationService ?? throw new ArgumentNullException(nameof(configurationService));
            _speechService = speechService ?? throw new ArgumentNullException(nameof(speechService));
            _audioService = audioService ?? throw new ArgumentNullException(nameof(audioService));
            _overlayService = overlayService ?? throw new ArgumentNullException(nameof(overlayService));
            _systemService = systemService ?? throw new ArgumentNullException(nameof(systemService));
            _gamepadVoiceCoordinator =
                gamepadVoiceCoordinator ?? throw new ArgumentNullException(nameof(gamepadVoiceCoordinator));
            _startupManagerService = startupManagerService ?? throw new ArgumentNullException(nameof(startupManagerService));
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public async Task<AppConfig> InitializeApplicationAsync()
        {
            try
            {
                // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                var config = _configurationService.CurrentConfig;
                Log.Information("üîç [PATH] Current directory: {CurrentDir}", Directory.GetCurrentDirectory());
                Log.Information("üîç [PATH] Base directory: {BaseDir}", AppContext.BaseDirectory);
                Log.Information("üîç [PATH] Models path: {ModelsPath}", Path.GetFullPath("Models"));

                // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defaults
                await EnsureDefaultConfigurationAsync(config);

                // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
                await InitializeSpeechRecognitionAsync(config);
                await InitializeAudioAsync(config);
                await InitializeOverlayAsync(config);
                await InitializeHotkeysAsync(config);
                await InitializeGamepadAsync();

                return config;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "ApplicationInitializationService: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏
        /// </summary>
        public async Task<bool> RegisterHotkeysAsync(AppConfig config)
        {
            try
            {
                if (config.Input.KeyboardShortcut != null)
                {
                    var registered = await _systemService.RegisterGlobalHotkeyAsync(config.Input.KeyboardShortcut);
                    return registered;
                }

                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "ApplicationInitializationService: –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–æ—Ç–∫–µ–µ–≤");
                return false;
            }
        }

        private async Task EnsureDefaultConfigurationAsync(AppConfig config)
        {
            bool configChanged = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Whisper –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (!config.SpeechRecognition.EngineSettings.ContainsKey("ModelSize") ||
                string.IsNullOrEmpty(config.SpeechRecognition.EngineSettings["ModelSize"]?.ToString()))
            {
                config.SpeechRecognition.EngineSettings["ModelSize"] = "tiny";
                configChanged = true;
                Log.Information("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Whisper: tiny");
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try
            {
                await _startupManagerService.SetStartupAsync(config.System.StartWithSystem);
                Log.Information("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {StartWithSystem}", config.System.StartWithSystem);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞");
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–∏
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (string.IsNullOrEmpty(config.Audio.SelectedDeviceId))
            {
                try
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    var devices = await _audioService.GetAvailableDevicesAsync();
                    var defaultDevice = devices.FirstOrDefault(d => d.IsDefault)
                                        ?? devices.FirstOrDefault();

                    if (defaultDevice != null)
                    {
                        config.Audio.SelectedDeviceId = defaultDevice.Id;
                        configChanged = true;
                        Log.Information("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {DeviceName}", defaultDevice.Name);
                    }
                    else
                    {
                        Log.Warning("ApplicationInitializationService: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "ApplicationInitializationService: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (configChanged)
            {
                await _configurationService.SaveConfigAsync(config);
            }
        }

        private async Task InitializeSpeechRecognitionAsync(AppConfig config)
        {
            var speechInitialized = await _speechService.InitializeAsync(config.SpeechRecognition);
        }

        private async Task InitializeAudioAsync(AppConfig config)
        {
            if (!string.IsNullOrEmpty(config.Audio.SelectedDeviceId))
            {
                try
                {
                    var deviceSet = await _audioService.SetActiveDeviceAsync(config.Audio.SelectedDeviceId);
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "ApplicationInitializationService: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {DeviceId}",
                        config.Audio.SelectedDeviceId);
                }
            }
            else
            {
                Log.Warning("ApplicationInitializationService: –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
            }
        }

        private async Task InitializeOverlayAsync(AppConfig config)
        {
            await _overlayService.ApplyConfigAsync(config.Overlay);
        }

        private async Task InitializeHotkeysAsync(AppConfig config)
        {
            await RegisterHotkeysAsync(config);
        }

        private async Task InitializeGamepadAsync()
        {
            var gamepadInitialized = await _gamepadVoiceCoordinator.InitializeAsync();
        }
    }
}
