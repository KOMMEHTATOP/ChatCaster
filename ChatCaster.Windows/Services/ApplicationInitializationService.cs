using ChatCaster.Core.Models;
using ChatCaster.Core.Services.Audio;
using ChatCaster.Core.Services.Core;
using ChatCaster.Core.Services.Overlay;
using ChatCaster.Core.Services.System;
using ChatCaster.Core.Services.UI;
using ChatCaster.Core.Updates;
using ChatCaster.Core.Constants;
using ChatCaster.Windows.Services.GamepadService;
using Serilog;
using System.IO;

namespace ChatCaster.Windows.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    /// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ ChatCasterWindowViewModel
    /// </summary>
    public class ApplicationInitializationService
    {
        private readonly IConfigurationService _configurationService;
        private readonly ISpeechRecognitionService _speechService;
        private readonly IAudioCaptureService _audioService;
        private readonly IOverlayService _overlayService;
        private readonly ISystemIntegrationService _systemService;
        private readonly GamepadVoiceCoordinator _gamepadVoiceCoordinator;
        private readonly IStartupManagerService _startupManagerService;
        private readonly IUpdateService _updateService;
        private readonly INotificationService _notificationService;

        public ApplicationInitializationService(
            IConfigurationService configurationService,
            ISpeechRecognitionService speechService,
            IAudioCaptureService audioService,
            IOverlayService overlayService,
            ISystemIntegrationService systemService,
            GamepadVoiceCoordinator gamepadVoiceCoordinator,
            IStartupManagerService startupManagerService,
            IUpdateService updateService,
            INotificationService notificationService)
        {
            _configurationService = configurationService ?? throw new ArgumentNullException(nameof(configurationService));
            _speechService = speechService ?? throw new ArgumentNullException(nameof(speechService));
            _audioService = audioService ?? throw new ArgumentNullException(nameof(audioService));
            _overlayService = overlayService ?? throw new ArgumentNullException(nameof(overlayService));
            _systemService = systemService ?? throw new ArgumentNullException(nameof(systemService));
            _gamepadVoiceCoordinator =
                gamepadVoiceCoordinator ?? throw new ArgumentNullException(nameof(gamepadVoiceCoordinator));
            _startupManagerService = startupManagerService ?? throw new ArgumentNullException(nameof(startupManagerService));
            _updateService = updateService ?? throw new ArgumentNullException(nameof(updateService));
            _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService));
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        public async Task<AppConfig> InitializeApplicationAsync()
        {
            try
            {
                // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                var config = _configurationService.CurrentConfig;
                Log.Information("üîç [PATH] Current directory: {CurrentDir}", Directory.GetCurrentDirectory());
                Log.Information("üîç [PATH] Base directory: {BaseDir}", AppContext.BaseDirectory);
                Log.Information("üîç [PATH] Models path: {ModelsPath}",
                    Path.Combine(AppContext.BaseDirectory, "Models"));

                // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defaults
                await EnsureDefaultConfigurationAsync(config);

                var modelsDir = Path.Combine(AppContext.BaseDirectory, "Models");
                var modelFile = Path.Combine(modelsDir, "ggml-tiny.bin");
                Log.Information("üîç [CHECK] Models directory exists: {Exists}", Directory.Exists(modelsDir));
                Log.Information("üîç [CHECK] Model file exists: {Exists}, Path: {Path}", File.Exists(modelFile), modelFile);

                // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
                await InitializeSpeechRecognitionAsync(config);
                await InitializeAudioAsync(config);
                await InitializeOverlayAsync(config);
                await InitializeHotkeysAsync(config);
                await InitializeGamepadAsync();

                // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫)
                _ = Task.Run(async () => await CheckForUpdatesAsync(config));

                return config;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "ApplicationInitializationService: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏
        /// </summary>
        public async Task<bool> RegisterHotkeysAsync(AppConfig config)
        {
            try
            {
                if (config.Input.KeyboardShortcut != null)
                {
                    var registered = await _systemService.RegisterGlobalHotkeyAsync(config.Input.KeyboardShortcut);
                    return registered;
                }

                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "ApplicationInitializationService: –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–æ—Ç–∫–µ–µ–≤");
                return false;
            }
        }

        private async Task EnsureDefaultConfigurationAsync(AppConfig config)
        {
            bool configChanged = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ModelPath
            if (!config.SpeechRecognition.EngineSettings.ContainsKey("ModelPath") ||
                string.IsNullOrEmpty(config.SpeechRecognition.EngineSettings["ModelPath"]?.ToString()))
            {
                config.SpeechRecognition.EngineSettings["ModelPath"] = Path.Combine(AppContext.BaseDirectory, "Models");
                configChanged = true;
                Log.Information("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ModelPath: {ModelPath}",
                    config.SpeechRecognition.EngineSettings["ModelPath"]);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Whisper –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (!config.SpeechRecognition.EngineSettings.ContainsKey("ModelSize") ||
                string.IsNullOrEmpty(config.SpeechRecognition.EngineSettings["ModelSize"]?.ToString()))
            {
                config.SpeechRecognition.EngineSettings["ModelSize"] = "tiny";
                configChanged = true;
                Log.Information("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Whisper: tiny");
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try
            {
                await _startupManagerService.SetStartupAsync(config.System.StartWithSystem);
                Log.Information("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {StartWithSystem}", config.System.StartWithSystem);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (string.IsNullOrEmpty(config.Audio.SelectedDeviceId))
            {
                try
                {
                    var devices = await _audioService.GetAvailableDevicesAsync();
                    var defaultDevice = devices.FirstOrDefault(d => d.IsDefault) ?? devices.FirstOrDefault();

                    if (defaultDevice != null)
                    {
                        config.Audio.SelectedDeviceId = defaultDevice.Id;
                        configChanged = true;
                        Log.Information("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {DeviceName}", defaultDevice.Name);
                    }
                    else
                    {
                        Log.Warning("ApplicationInitializationService: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "ApplicationInitializationService: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
                }
            }

            if (configChanged)
            {
                await _configurationService.SaveConfigAsync(config);
            }
        }

        private async Task InitializeSpeechRecognitionAsync(AppConfig config)
        {
            // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ –ü–ï–†–ï–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
            var modelsDir = Path.Combine(AppContext.BaseDirectory, "Models");
            var modelFile = Path.Combine(modelsDir, "ggml-tiny.bin");

            Log.Information("üîç [INIT] Models directory exists: {Exists}", Directory.Exists(modelsDir));
            Log.Information("üîç [INIT] Model file exists BEFORE init: {Exists}, Path: {Path}", File.Exists(modelFile),
                modelFile);

            Log.Information("üîç [INIT] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Whisper —Å –º–æ–¥–µ–ª—å—é: {ModelSize}",
                config.SpeechRecognition.EngineSettings.TryGetValue("ModelSize", out var model) ? model : "unknown");

            bool speechInitialized = false;

            try
            {
                speechInitialized = await _speechService.InitializeAsync(config.SpeechRecognition);
                Log.Information("üîç [INIT] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {Success}", speechInitialized);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "üîç [INIT] –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Whisper: {Type}, {Message}",
                    ex.GetType().Name, ex.Message);
            }

            Log.Information("üîç [INIT] Model file exists AFTER init: {Exists}", File.Exists(modelFile));
            Log.Information("üîç [INIT] Speech service initialized: {Success}, IsInitialized: {IsInitialized}",
                speechInitialized, _speechService.IsInitialized);
        }

        private async Task InitializeAudioAsync(AppConfig config)
        {
            if (!string.IsNullOrEmpty(config.Audio.SelectedDeviceId))
            {
                try
                {
                    var deviceSet = await _audioService.SetActiveDeviceAsync(config.Audio.SelectedDeviceId);
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "ApplicationInitializationService: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {DeviceId}",
                        config.Audio.SelectedDeviceId);
                }
            }
            else
            {
                Log.Warning("ApplicationInitializationService: –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
            }
        }

        private async Task InitializeOverlayAsync(AppConfig config)
        {
            await _overlayService.ApplyConfigAsync(config.Overlay);
        }

        private async Task InitializeHotkeysAsync(AppConfig config)
        {
            await RegisterHotkeysAsync(config);
        }

        private async Task InitializeGamepadAsync()
        {
            var gamepadInitialized = await _gamepadVoiceCoordinator.InitializeAsync();
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private async Task CheckForUpdatesAsync(AppConfig config)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (!_updateService.ShouldCheckForUpdates(config.Updates))
                {
                    Log.Debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
                    return;
                }

                Log.Information("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ");

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                _updateService.ProgressChanged += OnUpdateProgressChanged;
                _updateService.OperationCompleted += OnUpdateOperationCompleted;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                var result = await _updateService.CheckForUpdatesAsync(
                    AppConstants.AppVersion, 
                    config.Updates.IncludePreReleases);

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                config.Updates.LastCheckTime = DateTime.UtcNow;
                await _configurationService.SaveConfigAsync(config);

                if (result.IsSuccess && result.ResultType == UpdateResultType.UpdateAvailable && result.UpdateInfo != null)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ª–∏ —ç—Ç–∞ –≤–µ—Ä—Å–∏—è
                    if (config.Updates.SkippedVersions.Contains(result.UpdateInfo.Version))
                    {
                        Log.Information("–í–µ—Ä—Å–∏—è {Version} –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", result.UpdateInfo.Version);
                        return;
                    }

                    Log.Information("–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {Version}", result.UpdateInfo.Version);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    _notificationService.NotifyUpdateAvailable(result.UpdateInfo.Version, 
                        GetShortReleaseNotes(result.UpdateInfo.ReleaseNotes));

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if (config.Updates.AutoDownload)
                    {
                        _ = Task.Run(async () => await DownloadUpdateAsync(result.UpdateInfo, config));
                    }
                }
                else if (!result.IsSuccess)
                {
                    Log.Warning("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {Error}", result.ErrorMessage);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞
                    if (!IsNetworkError(result.ErrorMessage))
                    {
                        _notificationService.NotifyUpdateError(result.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
                    }
                }
                else
                {
                    Log.Information("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ");
            }
            finally
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
                _updateService.ProgressChanged -= OnUpdateProgressChanged;
                _updateService.OperationCompleted -= OnUpdateOperationCompleted;
            }
        }

        /// <summary>
        /// –°–∫–∞—á–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        /// </summary>
        private async Task DownloadUpdateAsync(UpdateInfo updateInfo, AppConfig config)
        {
            try
            {
                Log.Information("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {Version}", updateInfo.Version);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                _updateService.ProgressChanged += OnUpdateProgressChanged;
                _updateService.OperationCompleted += OnUpdateOperationCompleted;

                var result = await _updateService.DownloadUpdateAsync(updateInfo);

                if (result.IsSuccess && !string.IsNullOrEmpty(result.DownloadedFilePath))
                {
                    Log.Information("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {FilePath}", result.DownloadedFilePath);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
                    var isValid = await _updateService.ValidateUpdateFileAsync(result.DownloadedFilePath, updateInfo.FileHash);
                    
                    if (isValid)
                    {
                        _notificationService.NotifyUpdateReadyToInstall(updateInfo.Version);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        config.Updates.AdditionalData["DownloadedUpdatePath"] = result.DownloadedFilePath;
                        config.Updates.AdditionalData["DownloadedUpdateVersion"] = updateInfo.Version;
                        await _configurationService.SaveConfigAsync(config);
                    }
                    else
                    {
                        Log.Warning("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º");
                        File.Delete(result.DownloadedFilePath);
                        _notificationService.NotifyUpdateError("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω");
                    }
                }
                else
                {
                    Log.Warning("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {Error}", result.ErrorMessage);
                    _notificationService.NotifyUpdateError(result.ErrorMessage ?? "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
                _notificationService.NotifyUpdateError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
            }
            finally
            {
                _updateService.ProgressChanged -= OnUpdateProgressChanged;
                _updateService.OperationCompleted -= OnUpdateOperationCompleted;
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnUpdateProgressChanged(object? sender, UpdateResult result)
        {
            try
            {
                if (result.ResultType == UpdateResultType.DownloadInProgress && result.UpdateInfo != null)
                {
                    _notificationService.NotifyUpdateDownloadProgress(result.UpdateInfo.Version, result.ProgressPercentage);
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnUpdateOperationCompleted(object? sender, UpdateResult result)
        {
            try
            {
                Log.Information("–û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {ResultType}, Success: {Success}", 
                    result.ResultType, result.IsSuccess);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ release notes –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        private string? GetShortReleaseNotes(string? releaseNotes)
        {
            if (string.IsNullOrEmpty(releaseNotes))
                return null;

            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            var lines = releaseNotes.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            if (lines.Length > 0)
            {
                var firstLine = lines[0].Trim();
                return firstLine.Length > 100 ? firstLine.Substring(0, 97) + "..." : firstLine;
            }

            return releaseNotes.Length > 100 ? releaseNotes.Substring(0, 97) + "..." : releaseNotes;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π
        /// </summary>
        private bool IsNetworkError(string? errorMessage)
        {
            if (string.IsNullOrEmpty(errorMessage))
                return false;

            var networkKeywords = new[] { "network", "connection", "timeout", "dns", "socket", "http" };
            return networkKeywords.Any(keyword => errorMessage.ToLowerInvariant().Contains(keyword));
        }
    }
}