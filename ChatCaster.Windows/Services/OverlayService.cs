using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Effects;
using ChatCaster.Core.Services;
using ChatCaster.Core.Models;
using ChatCaster.Core.Events;
using Serilog;
using System.Diagnostics;

namespace ChatCaster.Windows.Services;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è overlay —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Windows WPF
/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
/// </summary>
public class OverlayService : IOverlayService, IDisposable
{
    public event EventHandler<OverlayPositionChangedEvent>? PositionChanged;

    private OverlayWindow? _overlayWindow;
    private OverlayConfig? _currentConfig;
    private bool _isDisposed;
    
    private IVoiceRecordingService? _voiceService;
    private IConfigurationService? _configService;

    public bool IsVisible => _overlayWindow?.IsVisible == true;
    public (int X, int Y) CurrentPosition => _overlayWindow != null 
        ? ((int)_overlayWindow.Left, (int)_overlayWindow.Top) 
        : (0, 0);

    public void SubscribeToVoiceService(IVoiceRecordingService voiceService, IConfigurationService configService)
    {
        if (_voiceService != null)
        {
            _voiceService.StatusChanged -= OnRecordingStatusChanged;
        }
        
        _voiceService = voiceService;
        _configService = configService;
    
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        voiceService.StatusChanged += OnRecordingStatusChanged;
        Debug.WriteLine("OverlayService –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è VoiceRecordingService");
    }

    private async void OnRecordingStatusChanged(object? sender, RecordingStatusChangedEvent e)
    {
        try
        {
            Debug.WriteLine($"OverlayService –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ: {e.OldStatus} ‚Üí {e.NewStatus}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (_configService?.CurrentConfig?.Overlay?.IsEnabled != true)
            {
                Debug.WriteLine("Overlay –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                return;
            }
            
            switch (e.NewStatus)
            {
                case RecordingStatus.Recording:
                    await ShowAsync(RecordingStatus.Recording);
                    break;
                case RecordingStatus.Processing:
                    await UpdateStatusAsync(RecordingStatus.Processing);
                    break;
                case RecordingStatus.Completed:
                    await UpdateStatusAsync(RecordingStatus.Completed);
                    await Task.Delay(2000); // –ü–æ–∫–∞–∑–∞—Ç—å 2 —Å–µ–∫
                    await HideAsync();
                    break;
                case RecordingStatus.Error:
                case RecordingStatus.Cancelled:
                    await UpdateStatusAsync(e.NewStatus);
                    await Task.Delay(1000);
                    await HideAsync();
                    break;
                case RecordingStatus.Idle:
                    await HideAsync();
                    break;
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ OnRecordingStatusChanged: {ex.Message}");
        }
    }

    public async Task ShowAsync(RecordingStatus status)
    {
        try
        {
            if (Application.Current == null) 
            {
                Debug.WriteLine("Application.Current is null, cannot show overlay");
                return;
            }

            if (Application.Current.Dispatcher.CheckAccess())
            {
                CreateOrShowOverlay(status);
            }
            else
            {
                await Application.Current.Dispatcher.InvokeAsync(() => CreateOrShowOverlay(status));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ overlay: {ex.Message}");
        }
    }

    private void CreateOrShowOverlay(RecordingStatus status)
    {
        try
        {
            if (_overlayWindow == null)
            {
                CreateOverlayWindow();
            }
            
            if (_overlayWindow != null)
            {
                UpdateOverlayStatus(status);
                if (!_overlayWindow.IsVisible)
                {
                    _overlayWindow.Show();
                    Debug.WriteLine($"Overlay –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: {status}");
                }
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ CreateOrShowOverlay: {ex.Message}");
        }
    }

    public async Task HideAsync()
    {
        try
        {
            if (Application.Current == null) 
            {
                Debug.WriteLine("Application.Current is null, cannot hide overlay");
                return;
            }

            if (Application.Current.Dispatcher.CheckAccess())
            {
                HideOverlay();
            }
            else
            {
                await Application.Current.Dispatcher.InvokeAsync(HideOverlay);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è overlay: {ex.Message}");
        }
    }

    private void HideOverlay()
    {
        try
        {
            if (_overlayWindow?.IsVisible == true)
            {
                _overlayWindow.Hide();
                Debug.WriteLine("Overlay —Å–∫—Ä—ã—Ç");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ HideOverlay: {ex.Message}");
        }
    }

    public async Task UpdateStatusAsync(RecordingStatus status, string? message = null)
    {
        try
        {
            if (Application.Current == null) 
            {
                Debug.WriteLine("Application.Current is null, cannot update overlay status");
                return;
            }

            if (Application.Current.Dispatcher.CheckAccess())
            {
                UpdateOverlayStatusInternal(status, message);
            }
            else
            {
                await Application.Current.Dispatcher.InvokeAsync(() => UpdateOverlayStatusInternal(status, message));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ overlay: {ex.Message}");
        }
    }

    private void UpdateOverlayStatusInternal(RecordingStatus status, string? message)
    {
        try
        {
            if (_overlayWindow != null)
            {
                UpdateOverlayStatus(status, message);
                Debug.WriteLine($"Overlay —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ UpdateOverlayStatusInternal: {ex.Message}");
        }
    }

    public async Task UpdatePositionAsync(int x, int y)
    {
        try
        {
            if (Application.Current == null) 
            {
                Debug.WriteLine("Application.Current is null, cannot update overlay position");
                return;
            }

            if (Application.Current.Dispatcher.CheckAccess())
            {
                UpdatePositionInternal(x, y);
            }
            else
            {
                await Application.Current.Dispatcher.InvokeAsync(() => UpdatePositionInternal(x, y));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ overlay: {ex.Message}");
        }
    }

    private void UpdatePositionInternal(int x, int y)
    {
        try
        {
            if (_overlayWindow != null)
            {
                _overlayWindow.Left = x;
                _overlayWindow.Top = y;
                PositionChanged?.Invoke(this, new OverlayPositionChangedEvent
                {
                    NewX = x,
                    NewY = y,
                    Source = "manual"
                });
                Debug.WriteLine($"Overlay –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ({x}, {y})");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ UpdatePositionInternal: {ex.Message}");
        }
    }

    public async Task<bool> ApplyConfigAsync(OverlayConfig config)
    {
        try
        {
            if (Application.Current == null) 
            {
                Debug.WriteLine("Application.Current is null, cannot apply overlay config");
                return false;
            }

            if (Application.Current.Dispatcher.CheckAccess())
            {
                return ApplyConfigInternal(config);
            }
            else
            {
                return await Application.Current.Dispatcher.InvokeAsync(() => ApplyConfigInternal(config));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ overlay: {ex.Message}");
            return false;
        }
    }

    private bool ApplyConfigInternal(OverlayConfig config)
    {
        try
        {
            Log.Information($"üîç ApplyConfigInternal –≤—ã–∑–≤–∞–Ω: Position={config.Position}");
            _currentConfig = config;
            if (_overlayWindow != null)
            {
                Log.Information($"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–∫–Ω—É: {config.Position}");
                ApplyConfigToWindow(_overlayWindow, config);
            }
            else
            {
                Log.Information("üîç –û–∫–Ω–æ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é");
            }
            Debug.WriteLine("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è overlay –ø—Ä–∏–º–µ–Ω–µ–Ω–∞");
            return true;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ ApplyConfigInternal: {ex.Message}");
            return false;
        }
    }
    
    private void CreateOverlayWindow()
    {
        try
        {
            Log.Information($"üîç CreateOverlayWindow: _currentConfig = {(_currentConfig != null ? $"Position={_currentConfig.Position}" : "NULL")}");
        
            _overlayWindow = new OverlayWindow();
            if (_currentConfig != null)
            {
                Log.Information($"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {_currentConfig.Position}");
                ApplyConfigToWindow(_overlayWindow, _currentConfig);
            }
            else
            {
                Log.Information("üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: TopRight");
                var defaultConfig = new OverlayConfig
                {
                    Position = OverlayPosition.TopRight,
                    OffsetX = 50,
                    OffsetY = 50,
                    Opacity = 0.9f
                };
                ApplyConfigToWindow(_overlayWindow, defaultConfig);
            }
            Debug.WriteLine("Overlay –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è overlay –æ–∫–Ω–∞: {ex.Message}");
        }
    }

    private void ApplyConfigToWindow(OverlayWindow window, OverlayConfig config)
    {
        try
        {
            window.Opacity = config.Opacity;
            var (x, y) = CalculatePosition(config.Position, config.OffsetX, config.OffsetY);
            window.Left = x;
            window.Top = y;
            Debug.WriteLine($"Overlay –ø–æ–∑–∏—Ü–∏—è: {config.Position} ({x}, {y}), –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {config.Opacity}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –æ–∫–Ω—É: {ex.Message}");
        }
    }

    private (int X, int Y) CalculatePosition(OverlayPosition position, int offsetX, int offsetY)
    {
        try
        {
            var screenWidth = (int)SystemParameters.PrimaryScreenWidth;
            var screenHeight = (int)SystemParameters.PrimaryScreenHeight;
            const int overlayWidth = 200;
            const int overlayHeight = 80;

            return position switch
            {
                OverlayPosition.TopLeft => (offsetX, offsetY),
                OverlayPosition.TopRight => (screenWidth - overlayWidth - offsetX, offsetY),
                OverlayPosition.BottomLeft => (offsetX, screenHeight - overlayHeight - offsetY),
                OverlayPosition.BottomRight => (screenWidth - overlayWidth - offsetX, screenHeight - overlayHeight - offsetY),
                OverlayPosition.TopCenter => (screenWidth / 2 - overlayWidth / 2, offsetY),
                OverlayPosition.BottomCenter => (screenWidth / 2 - overlayWidth / 2, screenHeight - overlayHeight - offsetY),
                OverlayPosition.MiddleLeft => (offsetX, screenHeight / 2 - overlayHeight / 2),
                OverlayPosition.MiddleRight => (screenWidth - overlayWidth - offsetX, screenHeight / 2 - overlayHeight / 2),
                OverlayPosition.MiddleCenter => (screenWidth / 2 - overlayWidth / 2, screenHeight / 2 - overlayHeight / 2),
                _ => (screenWidth - overlayWidth - 50, 50)
            };
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ overlay: {ex.Message}");
            return (50, 50); // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    private void UpdateOverlayStatus(RecordingStatus status, string? customMessage = null)
    {
        if (_overlayWindow == null) return;
        try
        {
            var (text, color, icon) = GetStatusDisplay(status, customMessage);
            _overlayWindow.UpdateStatus(icon, text, color);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ overlay: {ex.Message}");
        }
    }

    private (string Text, Brush Color, string Icon) GetStatusDisplay(RecordingStatus status, string? customMessage)
    {
        if (!string.IsNullOrEmpty(customMessage))
        {
            return (customMessage, Brushes.White, "üé§");
        }
        return status switch
        {
            RecordingStatus.Idle => ("–ì–æ—Ç–æ–≤", Brushes.LimeGreen, "üé§"),
            RecordingStatus.Recording => ("–ó–∞–ø–∏—Å—å...", Brushes.OrangeRed, "üî¥"),
            RecordingStatus.Processing => ("–û–±—Ä–∞–±–æ—Ç–∫–∞...", Brushes.Yellow, "‚ö°"),
            RecordingStatus.Completed => ("–ì–æ—Ç–æ–≤–æ!", Brushes.LimeGreen, "‚úÖ"),
            RecordingStatus.Error => ("–û—à–∏–±–∫–∞", Brushes.Red, "‚ùå"),
            RecordingStatus.Cancelled => ("–û—Ç–º–µ–Ω–µ–Ω–æ", Brushes.Gray, "üö´"),
            _ => ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", Brushes.White, "‚ùì")
        };
    }

    public void Dispose()
    {
        if (!_isDisposed)
        {
            try
            {
                // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ Dispose
                if (_voiceService != null)
                {
                    _voiceService.StatusChanged -= OnRecordingStatusChanged;
                }

                if (Application.Current?.Dispatcher != null)
                {
                    if (Application.Current.Dispatcher.CheckAccess())
                    {
                        DisposeInternal();
                    }
                    else
                    {
                        Application.Current.Dispatcher.Invoke(DisposeInternal);
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–≤–µ—Ä–ª–µ—è: {ex.Message}");
            }
            _isDisposed = true;
        }
    }

    private void DisposeInternal()
    {
        try
        {
            _overlayWindow?.Close();
            _overlayWindow = null;
            Debug.WriteLine("Overlay disposed");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ DisposeInternal: {ex.Message}");
        }
    }
}

/// <summary>
/// WPF –æ–∫–Ω–æ –¥–ª—è overlay –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
/// </summary>
public class OverlayWindow : Window
{
    private readonly TextBlock _iconText;
    private readonly TextBlock _statusText;

    public OverlayWindow()
    {
        try
        {
            WindowStyle = WindowStyle.None;
            AllowsTransparency = true;
            Topmost = true;
            ShowInTaskbar = false;
            ResizeMode = ResizeMode.NoResize;
            SizeToContent = SizeToContent.WidthAndHeight;
            Background = new SolidColorBrush(Color.FromArgb(220, 30, 30, 30));

            var border = new Border
            {
                CornerRadius = new CornerRadius(10),
                Background = Background,
                Padding = new Thickness(15d),
                BorderBrush = new SolidColorBrush(Color.FromArgb(100, 120, 120, 120)),
                BorderThickness = new Thickness(1)
            };

            var stackPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                VerticalAlignment = VerticalAlignment.Center,
                HorizontalAlignment = HorizontalAlignment.Center
            };

            _iconText = new TextBlock
            {
                FontSize = 20,
                Margin = new Thickness(0, 0, 10, 0),
                VerticalAlignment = VerticalAlignment.Center,
                Text = "üé§"
            };

            _statusText = new TextBlock
            {
                FontSize = 14,
                FontWeight = FontWeights.SemiBold,
                Foreground = Brushes.White,
                VerticalAlignment = VerticalAlignment.Center,
                Text = "–ì–æ—Ç–æ–≤",
                MaxWidth = 200,
                TextWrapping = TextWrapping.Wrap
            };

            stackPanel.Children.Add(_iconText);
            stackPanel.Children.Add(_statusText);
            border.Child = stackPanel;
            Content = border;

            Effect = new DropShadowEffect
            {
                Color = Colors.Black,
                BlurRadius = 10,
                ShadowDepth = 3,
                Opacity = 0.5
            };
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OverlayWindow: {ex.Message}");
        }
    }

    public void UpdateStatus(string icon, string text, Brush color)
    {
        try
        {
            _iconText.Text = icon;
            _statusText.Text = text;
            _statusText.Foreground = color;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI overlay: {ex.Message}");
        }
    }
}