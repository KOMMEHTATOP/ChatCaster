using NAudio.Wave;
using NAudio.CoreAudioApi;
using ChatCaster.Core.Services;
using ChatCaster.Core.Models;
using Serilog;

namespace ChatCaster.Windows.Services;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞—Ö–≤–∞—Ç–∞ —á–µ—Ä–µ–∑ NAudio –¥–ª—è Windows
/// </summary>
public class AudioCaptureService : IAudioCaptureService, IDisposable
{
    private static readonly ILogger _logger = Log.ForContext<AudioCaptureService>();
    
    public event EventHandler<float>? VolumeChanged;
    public event EventHandler<byte[]>? AudioDataReceived;

    private WaveInEvent? _waveIn;
    private AudioConfig? _currentConfig;
    private readonly Lock _lockObject = new();
    private bool _isDisposed;

    public bool IsCapturing { get; private set; }
    public float CurrentVolume { get; private set; }
    public AudioDevice? ActiveDevice { get; private set; }

    public AudioCaptureService()
    {
        _logger.Information("üî¥ AudioCaptureService –°–û–ó–î–ê–ù - {HashCode}", GetHashCode());
    }


    
    public async Task<IEnumerable<AudioDevice>> GetAvailableDevicesAsync()
    {
        return await Task.Run(() =>
        {
            var devices = new List<AudioDevice>();

            try
            {
                // WaveIn —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–≤–∫–ª—é—á–∞—è USB –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã)
                for (int i = 0; i < WaveInEvent.DeviceCount; i++)
                {
                    var caps = WaveInEvent.GetCapabilities(i);

                    devices.Add(new AudioDevice
                    {
                        Id = $"wavein:{i}",
                        Name = caps.ProductName,
                        Description = $"WaveIn Device #{i}",
                        IsDefault = i == 0,
                        IsEnabled = true,
                        Type = DetectDeviceType(caps.ProductName),
                        MaxChannels = caps.Channels,
                        SupportedSampleRates = new[]
                        {
                            8000, 11025, 16000, 22050, 44100, 48000
                        }
                    });
                }

                // WASAPI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Windows Audio API)
                using var deviceEnumerator = new MMDeviceEnumerator();
                var wasapiDevices = deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);

                foreach (var device in wasapiDevices)
                {
                    try
                    {
                        devices.Add(new AudioDevice
                        {
                            Id = $"wasapi:{device.ID}",
                            Name = device.FriendlyName,
                            Description = device.DeviceFriendlyName,
                            IsDefault =
                                device.ID == deviceEnumerator.GetDefaultAudioEndpoint(DataFlow.Capture, Role.Communications)
                                    .ID,
                            IsEnabled = device.State == DeviceState.Active,
                            Type = DetectDeviceType(device.FriendlyName),
                            MaxChannels = device.AudioClient.MixFormat.Channels,
                            SupportedSampleRates = new[]
                            {
                                8000, 16000, 22050, 44100, 48000
                            }
                        });
                    }
                    catch
                    {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    }
                }
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}", ex);
            }

            return devices.DistinctBy(d => d.Name).ToList();
        });
    }

    public async Task<AudioDevice?> GetDefaultDeviceAsync()
    {
        var devices = await GetAvailableDevicesAsync();
        return devices.FirstOrDefault(d => d.IsDefault);
    }

    public async Task<bool> SetActiveDeviceAsync(string deviceId)
    {
        try
        {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞—Ö–≤–∞—Ç –µ—Å–ª–∏ –∏–¥–µ—Ç
            if (IsCapturing)
            {
                await StopCaptureAsync();
            }

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            var devices = await GetAvailableDevicesAsync();
            ActiveDevice = devices.FirstOrDefault(d => d.Id == deviceId);

            return ActiveDevice != null;
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {deviceId}: {ex.Message}", ex);
        }
    }

    public async Task<bool> StartCaptureAsync(AudioConfig config)
    {
        return await Task.Run(() =>
        {
            lock (_lockObject)
            {
                try
                {
                    if (IsCapturing)
                    {
                        throw new InvalidOperationException("–ó–∞—Ö–≤–∞—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                    }

                    _currentConfig = config;

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    int deviceNumber = 0;

                    if (!string.IsNullOrEmpty(config.SelectedDeviceId))
                    {
                        if (config.SelectedDeviceId.StartsWith("wavein:"))
                        {
                            int.TryParse(config.SelectedDeviceId.Substring(7), out deviceNumber);
                        }
                    }

                    // –°–æ–∑–¥–∞–µ–º WaveIn - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 16kHz –¥–ª—è Whisper
                    _logger.Information("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç: 16000Hz, 16bit, 1ch –¥–ª—è Whisper");

                    _waveIn = new WaveInEvent
                    {
                        DeviceNumber = deviceNumber,
                        WaveFormat = new WaveFormat(16000, 16, 1), // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ 16kHz –¥–ª—è Whisper
                        BufferMilliseconds = 50
                    };

                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                    _waveIn.DataAvailable += OnDataAvailable;
                    _waveIn.RecordingStopped += OnRecordingStopped;

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç
                    _waveIn.StartRecording();
                    IsCapturing = true;

                    return true;
                }
                catch (Exception ex)
                {
                    throw new InvalidOperationException($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ: {ex.Message}", ex);
                }
            }
        });
    }

    public async Task StopCaptureAsync()
    {
        await Task.Run(() =>
        {
            lock (_lockObject)
            {
                try
                {
                    if (_waveIn != null && IsCapturing)
                    {
                        _waveIn.DataAvailable -= OnDataAvailable;  
                        _waveIn.RecordingStopped -= OnRecordingStopped;  
                        _waveIn.StopRecording();
                        _waveIn.Dispose();
                        _waveIn = null;
                    }

                    IsCapturing = false;
                    CurrentVolume = 0;
                }
                catch (Exception ex)
                {
                    throw new InvalidOperationException($"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ: {ex.Message}", ex);
                }
            }
        });
    }

    private void OnDataAvailable(object? sender, WaveInEventArgs e)
    {
        try
        {
            // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            float volume = CalculateVolume(e.Buffer, e.BytesRecorded);
            CurrentVolume = volume;
            VolumeChanged?.Invoke(this, volume);
            
            if (_currentConfig == null || !(volume >= _currentConfig.VolumeThreshold))
                return;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            var audioData = new byte[e.BytesRecorded];
            Array.Copy(e.Buffer, audioData, e.BytesRecorded);
            AudioDataReceived?.Invoke(this, audioData);
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö");
        }
    }

    private void OnRecordingStopped(object? sender, StoppedEventArgs e)
    {
        if (e.Exception != null)
        {
            _logger.Error(e.Exception, "–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π");
        }
    }

    private static float CalculateVolume(byte[] buffer, int bytesRecorded)
    {
        if (bytesRecorded == 0) return 0;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ 16-–±–∏—Ç–Ω—ã–µ —Å—ç–º–ø–ª—ã
        float sum = 0;
        int sampleCount = bytesRecorded / 2;

        for (int i = 0; i < bytesRecorded; i += 2)
        {
            if (i + 1 < bytesRecorded)
            {
                short sample = (short)((buffer[i + 1] << 8) | buffer[i]);
                sum += Math.Abs(sample);
            }
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1
        float average = sum / sampleCount;
        return Math.Min(average / 32768.0f, 1.0f);
    }

    private static AudioDeviceType DetectDeviceType(string deviceName)
    {
        var name = deviceName.ToLower();

        if (name.Contains("usb")) return AudioDeviceType.UsbMicrophone;
        if (name.Contains("bluetooth")) return AudioDeviceType.BluetoothMicrophone;
        if (name.Contains("webcam") || name.Contains("camera")) return AudioDeviceType.WebcamMicrophone;
        if (name.Contains("headset")) return AudioDeviceType.HeadsetMicrophone;
        if (name.Contains("line")) return AudioDeviceType.LineIn;

        return AudioDeviceType.Microphone;
    }

    public async Task<bool> TestMicrophoneAsync()
    {
        try
        {
            if (ActiveDevice == null)
            {
                _logger.Information("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                return false;
            }

            // –ü—Ä–æ–±—É–µ–º –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
            var testConfig = new AudioConfig
            {
                SelectedDeviceId = ActiveDevice.Id,
                SampleRate = 16000,
                Channels = 1,
                BitsPerSample = 16,
                MaxRecordingSeconds = _currentConfig!.MinRecordingSeconds
            };

            bool captureStarted = await StartCaptureAsync(testConfig);

            if (captureStarted)
            {
                await Task.Delay(500); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
                await StopCaptureAsync();
                _logger.Information("–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–µ–Ω");
                return true;
            }

            _logger.Information("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞—Ö–≤–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            return false;
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
            return false;
        }
    }

    public void Dispose()
    {
        if (!_isDisposed)
        {
            try
            {
                _logger.Information("AudioCaptureService Dispose –Ω–∞—á–∞—Ç");

                lock (_lockObject)
                {
                    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    if (_waveIn != null && IsCapturing)
                    {
                        _logger.Information("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WaveIn...");
                        _waveIn.StopRecording();
                        _waveIn.DataAvailable -= OnDataAvailable;
                        _waveIn.RecordingStopped -= OnRecordingStopped;
                        _waveIn.Dispose();
                        _waveIn = null;
                        _logger.Information("WaveIn –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    }

                    IsCapturing = false;
                    CurrentVolume = 0;
                    ActiveDevice = null;
                    _currentConfig = null;

                    _logger.Information("AudioCaptureService Dispose –∑–∞–≤–µ—Ä—à–µ–Ω");
                }
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "–û—à–∏–±–∫–∞ –≤ AudioCaptureService.Dispose");
            }
            finally
            {
                _isDisposed = true;
            }
        }
    }
}