using System.Windows;
using System.Windows.Forms;
using System.Drawing;
using ChatCaster.Core.Models;
using System.IO;
using Application = System.Windows.Application;

namespace ChatCaster.Windows.Services;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å System Tray
/// </summary>
public class TrayService : IDisposable
{
    private static int _instanceCounter = 0;
    private readonly int _instanceId;
    
    private NotifyIcon? _notifyIcon;
    private const string NormalIconPath = "Resources/mic_normal.ico";
    private bool _hasShownTrayNotification = false;
    private bool _isDisposed = false;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤
    private readonly Window _mainWindow;
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private AppConfig? _config;

    public bool IsVisible
    {
        get => _notifyIcon?.Visible == true;
    }

    public TrayService(Window mainWindow)
    {
        _instanceId = ++_instanceCounter;
        _mainWindow = mainWindow;
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        Application.Current.Exit += (s, e) => Dispose();
        Application.Current.SessionEnding += (s, e) => Dispose();
        AppDomain.CurrentDomain.ProcessExit += (s, e) => Dispose();
        
        Console.WriteLine($"[TRAY-{_instanceId}] TrayService —Å–æ–∑–¥–∞–Ω");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    public void SetConfig(AppConfig config)
    {
        _config = config;
    }

    public void Initialize()
    {
        Console.WriteLine($"[TRAY-{_instanceId}] Initialize –≤—ã–∑–≤–∞–Ω");

        try
        {
            _notifyIcon = new NotifyIcon
            {
                Icon = File.Exists(NormalIconPath) 
                    ? new Icon(NormalIconPath) 
                    : SystemIcons.Application,
                Text = "ChatCaster - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                Visible = true
            };

            Console.WriteLine($"[TRAY] NotifyIcon —Å–æ–∑–¥–∞–Ω");

            // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            _notifyIcon.DoubleClick += (s, e) => ShowMainWindow();

            CreateContextMenu();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[TRAY] –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è NotifyIcon: {ex.Message}");
            try
            {
                _notifyIcon = new NotifyIcon
                {
                    Icon = SystemIcons.Application,
                    Text = "ChatCaster - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                    Visible = true
                };
                CreateContextMenu();
            }
            catch (Exception fallbackEx)
            {
                Console.WriteLine($"[TRAY] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {fallbackEx.Message}");
            }
        }
    }

    private void CreateContextMenu()
    {
        if (_notifyIcon == null) return;

        var contextMenu = new ContextMenuStrip();
        contextMenu.Items.Add("üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ", null, (s, e) => ShowMainWindow());
        contextMenu.Items.Add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", null, (s, e) => ShowSettings());
        contextMenu.Items.Add("-"); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        contextMenu.Items.Add("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", null, (s, e) => ShowAbout());
        contextMenu.Items.Add("‚ùå –í—ã—Ö–æ–¥", null, (s, e) => ExitApplication());

        _notifyIcon.ContextMenuStrip = contextMenu;
    }

    private void ShowMainWindow()
    {
        try
        {
            _mainWindow.Show();
            _mainWindow.WindowState = WindowState.Normal;
            _mainWindow.ShowInTaskbar = true;
            _mainWindow.Activate();
            _mainWindow.Focus();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞: {ex.Message}");
        }
    }

    private void ShowSettings()
    {
        try
        {
            ShowMainWindow();
            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
            if (_mainWindow is ChatCaster.Windows.Views.ChatCasterWindow window)
            {
                window.NavigateToSettings();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
        }
    }
    
    public void ShowNotification(string title, string message, int timeout = 3000)
    {
        try
        {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (_config?.System?.ShowNotifications != true)
            {
                Console.WriteLine($"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {title} - {message}");
                return;
            }

            if (_notifyIcon != null)
            {
                Console.WriteLine($"üîî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {title} - {message}");
                _notifyIcon.ShowBalloonTip(timeout, title, message, ToolTipIcon.Info);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}");
        }
    }

    private void ShowAbout()
    {
        System.Windows.MessageBox.Show("ChatCaster v1.0.0\n\n–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–ª—è –∏–≥—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–π–º–ø–∞–¥–∞\n\n" +
                        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: WPF, NAudio, Whisper.net, XInput\n\n" +
                        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n" +
                        "‚Ä¢ –ì–µ–π–º–ø–∞–¥: LB + RB (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)\n" +
                        "‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: Ctrl+Shift+R",
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", MessageBoxButton.OK, MessageBoxImage.Information);
    }

    private void ExitApplication()
    {
        try
        {
            Console.WriteLine($"[TRAY-{_instanceId}] ExitApplication –≤—ã–∑–≤–∞–Ω");
            Dispose(); // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç—Ä–µ–π
            System.Windows.Application.Current.Shutdown();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[TRAY-{_instanceId}] –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {ex.Message}");
            Environment.Exit(0);
        }
    }

    public void UpdateStatus(string status)
    {
        try
        {
            if (_notifyIcon == null)
                return;

            string trayText = status.Length > 120 ? status.Substring(0, 117) + "..." : status;
            _notifyIcon.Text = trayText;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
        }
    }

    public void ShowFirstTimeNotification(AppConfig config)
    {
        if (_hasShownTrayNotification || !config.System.ShowNotifications)
            return;

        _notifyIcon?.ShowBalloonTip(3000, "ChatCaster", 
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", 
            ToolTipIcon.Info);
        _hasShownTrayNotification = true;
    }

    public void Dispose()
    {
        if (!_isDisposed)
        {
            try
            {
                Console.WriteLine($"[TRAY-{_instanceId}] Disposing...");
                
                if (_notifyIcon != null)
                {
                    _notifyIcon.Visible = false;
                    _notifyIcon.Icon?.Dispose(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
                    _notifyIcon.ContextMenuStrip?.Dispose(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ–Ω—é
                    _notifyIcon.Dispose();
                    _notifyIcon = null;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
                    // RefreshSystemTray(); —É–¥–∞–ª–∏–ª 
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[TRAY-{_instanceId}] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {ex.Message}");
            }
            _isDisposed = true;
        }
    }
}