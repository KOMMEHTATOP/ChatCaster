using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using ChatCaster.Core.Models;
using ChatCaster.Core.Services;
using Serilog;
using Application = System.Windows.Application;

namespace ChatCaster.Windows.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç—Ä–µ–µ–º
/// –°–ª–∞–±–æ —Å–≤—è–∑–∞–Ω —Å UI —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
/// </summary>
public class TrayService : ITrayService, IDisposable
{
    #region Fields

    private NotifyIcon? _notifyIcon;
    private AppConfig? _config;
    private bool _hasShownFirstTimeNotification = false;
    private bool _isDisposed = false;

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    private const string NormalIconPath = "Resources/mic_normal.ico";
    private const string DefaultTooltip = "ChatCaster - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ";

    #endregion

    #region Properties

    public bool IsVisible => _notifyIcon?.Visible == true;

    #endregion

    #region Events

    public event EventHandler? ShowMainWindowRequested;
    public event EventHandler? ShowSettingsRequested;
    public event EventHandler? ExitApplicationRequested;

    #endregion

    #region Constructor & Initialization

    public TrayService()
    {
        Log.Information($"TrayService #{GetHashCode()} —Å–æ–∑–¥–∞–Ω");

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        Application.Current.Exit += (s, e) => Dispose();
        Application.Current.SessionEnding += (s, e) => Dispose();
        AppDomain.CurrentDomain.ProcessExit += (s, e) => Dispose();
    }

    public void Initialize()
    {
        if (_isDisposed)
        {
            Log.Warning($"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–≥–æ TrayService #{GetHashCode()}");
            return;
        }

        Log.Information($"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TrayService #{GetHashCode()}");

        try
        {
            _notifyIcon = new NotifyIcon
            {
                Icon = LoadIcon(),
                Text = DefaultTooltip,
                Visible = true
            };

            // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            _notifyIcon.DoubleClick += OnDoubleClick;

            CreateContextMenu();

            Log.Information($"TrayService #{GetHashCode()} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }
        catch (Exception ex)
        {
            Log.Error(ex, $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayService #{GetHashCode()}");
            
            // Fallback –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
            try
            {
                _notifyIcon = new NotifyIcon
                {
                    Icon = SystemIcons.Application,
                    Text = DefaultTooltip,
                    Visible = true
                };
                CreateContextMenu();
                Log.Warning($"TrayService #{GetHashCode()} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å fallback –∏–∫–æ–Ω–∫–æ–π");
            }
            catch (Exception fallbackEx)
            {
                Log.Fatal(fallbackEx, $"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayService #{GetHashCode()}");
            }
        }
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    public void SetConfig(AppConfig config)
    {
        _config = config;
        Log.Debug($"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ TrayService #{GetHashCode()}");
    }

    #endregion

    #region Icon Management

    private Icon LoadIcon()
    {
        try
        {
            if (File.Exists(NormalIconPath))
            {
                return new Icon(NormalIconPath);
            }
            else
            {
                Log.Warning("–§–∞–π–ª –∏–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {IconPath}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é", NormalIconPath);
                return SystemIcons.Application;
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é");
            return SystemIcons.Application;
        }
    }

    #endregion

    #region Context Menu

    private void CreateContextMenu()
    {
        if (_notifyIcon == null) 
        {
            Log.Warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è null NotifyIcon");
            return;
        }

        try
        {
            var contextMenu = new ContextMenuStrip();
            
            // üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ
            contextMenu.Items.Add("üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ", null, (s, e) => OnShowMainWindowRequested());
            
            // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            contextMenu.Items.Add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", null, (s, e) => OnShowSettingsRequested());
            
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            contextMenu.Items.Add(new ToolStripSeparator());
            
            // ‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
            contextMenu.Items.Add("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", null, (s, e) => ShowAboutDialog());
            
            // ‚ùå –í—ã—Ö–æ–¥
            contextMenu.Items.Add("‚ùå –í—ã—Ö–æ–¥", null, (s, e) => OnExitApplicationRequested());

            _notifyIcon.ContextMenuStrip = contextMenu;
            
            Log.Debug("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é");
        }
    }

    #endregion

    #region Public Methods

    public void ShowNotification(string title, string message, NotificationType type = NotificationType.Info, int timeout = 3000)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (_config?.System?.ShowNotifications != true)
            {
                Log.Debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {Title} - {Message}", title, message);
                return;
            }

            if (_notifyIcon == null || _isDisposed)
            {
                Log.Warning("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º TrayService");
                return;
            }

            var toolTipIcon = GetToolTipIcon(type);
            
            Log.Information("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [{Type}]: {Title} - {Message}", type, title, message);
            
            _notifyIcon.ShowBalloonTip(timeout, title, message, toolTipIcon);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {Title} - {Message}", title, message);
        }
    }

    public void UpdateStatus(string status)
    {
        try
        {
            if (_notifyIcon == null || _isDisposed)
            {
                Log.Warning("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º TrayService");
                return;
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É tooltip (Windows –ª–∏–º–∏—Ç ~127 —Å–∏–º–≤–æ–ª–æ–≤)
            string tooltipText = status.Length > 120 ? status.Substring(0, 117) + "..." : status;
            _notifyIcon.Text = tooltipText;
            
            Log.Debug("–°—Ç–∞—Ç—É—Å —Ç—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω: {Status}", status);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è: {Status}", status);
        }
    }

    public void ShowFirstTimeNotification()
    {
        if (_hasShownFirstTimeNotification || _config?.System?.ShowNotifications != true)
        {
            return;
        }

        ShowNotification(
            "ChatCaster", 
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", 
            NotificationType.Info);
            
        _hasShownFirstTimeNotification = true;
        Log.Debug("–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –≤ —Ç—Ä–µ–π");
    }

    #endregion

    #region Event Handlers

    private void OnDoubleClick(object? sender, EventArgs e)
    {
        try
        {
            Log.Debug("–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ —Ç—Ä–µ—è");
            OnShowMainWindowRequested();
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ç—Ä–µ—é");
        }
    }

    private void OnShowMainWindowRequested()
    {
        try
        {
            Log.Debug("–ó–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ —Ç—Ä–µ—è");
            ShowMainWindowRequested?.Invoke(this, EventArgs.Empty);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏—è ShowMainWindowRequested");
        }
    }

    private void OnShowSettingsRequested()
    {
        try
        {
            Log.Debug("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ç—Ä–µ—è");
            ShowSettingsRequested?.Invoke(this, EventArgs.Empty);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏—è ShowSettingsRequested");
        }
    }

    private void OnExitApplicationRequested()
    {
        try
        {
            Log.Debug("–ó–∞–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ—è");
            ExitApplicationRequested?.Invoke(this, EventArgs.Empty);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏—è ExitApplicationRequested");
        }
    }

    private void ShowAboutDialog()
    {
        try
        {
            System.Windows.MessageBox.Show(
                "ChatCaster v1.0.0\n\n" +
                "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–ª—è –∏–≥—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–π–º–ø–∞–¥–∞\n\n" +
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: WPF, NAudio, Whisper.net, XInput\n\n" +
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n" +
                "‚Ä¢ –ì–µ–π–º–ø–∞–¥: LB + RB (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)\n" +
                "‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: Ctrl+Shift+R",
                "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                System.Windows.MessageBoxButton.OK,
                System.Windows.MessageBoxImage.Information);
                
            Log.Debug("–ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'");
        }
    }

    #endregion

    #region Helper Methods

    private ToolTipIcon GetToolTipIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.Info => ToolTipIcon.Info,
            NotificationType.Success => ToolTipIcon.Info, // Windows –Ω–µ –∏–º–µ–µ—Ç Success –∏–∫–æ–Ω–∫–∏
            NotificationType.Warning => ToolTipIcon.Warning,
            NotificationType.Error => ToolTipIcon.Error,
            _ => ToolTipIcon.Info
        };
    }

    #endregion

    #region Disposal

    ~TrayService()
    {
        // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        Dispose();
    }

    public void Dispose()
    {
        if (_isDisposed)
        {
            Log.Debug($"TrayService #{GetHashCode()} —É–∂–µ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
            return;
        }

        try
        {
            Log.Information($"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ TrayService #{GetHashCode()}");

            if (_notifyIcon != null)
            {
                Log.Debug($"–°–∫—Ä—ã–≤–∞–µ–º NotifyIcon #{GetHashCode()}");
                _notifyIcon.Visible = false;
                
                Log.Debug($"–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏–∫–æ–Ω–∫—É #{GetHashCode()}");
                _notifyIcon.Icon?.Dispose();
                
                Log.Debug($"–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é #{GetHashCode()}");
                _notifyIcon.ContextMenuStrip?.Dispose();
                
                Log.Debug($"–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º NotifyIcon #{GetHashCode()}");
                _notifyIcon.Dispose();
                _notifyIcon = null;
                
                // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
                try
                {
                    // –ú–µ—Ç–æ–¥ 1: Win32 API
                    RefreshSystemTray();
                    
                    // –ú–µ—Ç–æ–¥ 2: –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    Task.Delay(100).ContinueWith(_ => 
                    {
                        try
                        {
                            // –ü—Ä–∏–Ω—É–∂–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
                            GC.Collect();
                            GC.WaitForPendingFinalizers();
                            GC.Collect();
                            
                            // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ—è
                            RefreshSystemTray();
                            Log.Debug("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
                        }
                        catch (Exception ex)
                        {
                            Log.Debug(ex, "–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—è");
                        }
                    });
                    
                    Log.Debug("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
                }
                catch (Exception ex)
                {
                    Log.Warning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π");
                }
            }

            _isDisposed = true;
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ Dispose –≤—ã–∑–≤–∞–Ω —è–≤–Ω–æ
            GC.SuppressFinalize(this);
            
            Log.Information($"TrayService #{GetHashCode()} —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
        }
        catch (Exception ex)
        {
            Log.Error(ex, $"–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è TrayService #{GetHashCode()}");
        }
    }

    /// <summary>
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π Windows
    /// </summary>
    private static void RefreshSystemTray()
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º handle –æ–∫–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
            var systemTrayHandle = FindWindow("Shell_TrayWnd", null);
            if (systemTrayHandle != IntPtr.Zero)
            {
                var trayNotifyHandle = FindWindowEx(systemTrayHandle, IntPtr.Zero, "TrayNotifyWnd", null);
                if (trayNotifyHandle != IntPtr.Zero)
                {
                    var sysPagerHandle = FindWindowEx(trayNotifyHandle, IntPtr.Zero, "SysPager", null);
                    if (sysPagerHandle != IntPtr.Zero)
                    {
                        var toolbarHandle = FindWindowEx(sysPagerHandle, IntPtr.Zero, "ToolbarWindow32", null);
                        if (toolbarHandle != IntPtr.Zero)
                        {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—è
                            SendMessage(toolbarHandle, 0x001A, IntPtr.Zero, IntPtr.Zero); // WM_SETTINGCHANGE
                            Log.Debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Log.Warning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è");
        }
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: Win32 API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç—Ä–µ–µ–º
    [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

    [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

    [System.Runtime.InteropServices.DllImport("user32.dll", CharSet = System.Runtime.InteropServices.CharSet.Auto)]
    private static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

    #endregion
}