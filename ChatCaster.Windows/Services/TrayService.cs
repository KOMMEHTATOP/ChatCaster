using System.Drawing;
using System.IO;
using System.Windows.Forms;
using ChatCaster.Core.Services.Core;
using ChatCaster.Core.Services.UI;
using Serilog;

namespace ChatCaster.Windows.Services;

/// <summary>
/// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TrayService - —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ —Å NotifyIcon
/// –í—Å—è —Å–ª–æ–∂–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ Window
/// </summary>
public class TrayService : ITrayService, IDisposable
{
    private NotifyIcon? _notifyIcon;
    private readonly IConfigurationService _configService;
    private bool _hasShownFirstTimeNotification;
    private bool _isDisposed;
    
    #region Properties

    public bool IsVisible => _notifyIcon?.Visible == true;

    #endregion

    #region Events

    public event EventHandler? ShowMainWindowRequested;
    public event EventHandler? ShowSettingsRequested;
    public event EventHandler? ExitApplicationRequested;

    #endregion

    #region Constructor

    public TrayService(IConfigurationService configService)
    {
        _configService = configService ?? throw new ArgumentNullException(nameof(configService));
    }

    #endregion

    #region Public Methods

    public void Initialize()
    {
        if (_isDisposed)
        {
            return;
        }
        
        try
        {
            _notifyIcon = new NotifyIcon
            {
                Icon = LoadIcon(),
                Text = "ChatCaster - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                Visible = true
            };

            // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            _notifyIcon.DoubleClick += OnDoubleClick;

            CreateContextMenu();
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayService");
            throw;
        }
    }

    public void ShowNotification(string title, string message, NotificationType type = NotificationType.Info, int timeout = 3000)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (_configService.CurrentConfig?.System?.ShowNotifications != true)
            {
                return;
            }

            if (_notifyIcon == null || _isDisposed)
            {
                return;
            }

            var toolTipIcon = GetToolTipIcon(type);
            
            _notifyIcon.ShowBalloonTip(timeout, title, message, toolTipIcon);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {Title} - {Message}", title, message);
        }
    }

    public void UpdateStatus(string status)
    {
        try
        {
            if (_notifyIcon == null || _isDisposed)
            {
                return;
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É tooltip (Windows –ª–∏–º–∏—Ç ~127 —Å–∏–º–≤–æ–ª–æ–≤)
            string tooltipText = status.Length > 120 ? status.Substring(0, 117) + "..." : status;
            _notifyIcon.Text = tooltipText;
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è: {Status}", status);
        }
    }

    public void ShowFirstTimeNotification()
    {
        if (_hasShownFirstTimeNotification) return;
        
        ShowNotification(
            "ChatCaster", 
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", 
            NotificationType.Info);
            
        _hasShownFirstTimeNotification = true;
    }

    #endregion

    #region Private Methods

    private Icon LoadIcon()
    {
        try
        {
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            var iconStream = System.Windows.Application.GetResourceStream(new Uri("pack://application:,,,/Resources/Logo.ico"));
            if (iconStream != null)
            {
                return new Icon(iconStream.Stream);
            }
        
            // Fallback: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ —Ñ–∞–π–ª
            if (File.Exists("Resources/Logo.ico"))
            {
                return new Icon("Resources/Logo.ico");
            }
        
            return SystemIcons.Application;
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é");
            return SystemIcons.Application;
        }
    }
    
    private void CreateContextMenu()
    {
        if (_notifyIcon == null) 
        {
            return;
        }

        try
        {
            var contextMenu = new ContextMenuStrip();
            
            contextMenu.Items.Add("üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ", null, (s, e) => ShowMainWindowRequested?.Invoke(this, EventArgs.Empty));
            contextMenu.Items.Add(new ToolStripSeparator());
            contextMenu.Items.Add("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", null, (s, e) => ShowAboutDialog());
            contextMenu.Items.Add("‚ùå –í—ã—Ö–æ–¥", null, (s, e) => ExitApplicationRequested?.Invoke(this, EventArgs.Empty));

            _notifyIcon.ContextMenuStrip = contextMenu;
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é");
        }
    }

    private void OnDoubleClick(object? sender, EventArgs e)
    {
        try
        {
            ShowMainWindowRequested?.Invoke(this, EventArgs.Empty);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ç—Ä–µ—é");
        }
    }

    // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è "–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞" –æ—Å—Ç–∞–≤–∏–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
    private void ShowAboutDialog()
    {
        try
        {
            System.Windows.MessageBox.Show(
                "ChatCaster v1.0.0\n\n" +
                "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–ª—è –∏–≥—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–π–º–ø–∞–¥–∞\n\n" +
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n" +
                "‚Ä¢ –ì–µ–π–º–ø–∞–¥: LB + RB (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)\n" +
                "‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: Ctrl+Shift+R",
                "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                System.Windows.MessageBoxButton.OK,
                System.Windows.MessageBoxImage.Information);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'");
        }
    }

    private ToolTipIcon GetToolTipIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.Info => ToolTipIcon.Info,
            NotificationType.Success => ToolTipIcon.Info, 
            NotificationType.Warning => ToolTipIcon.Warning,
            NotificationType.Error => ToolTipIcon.Error,
            _ => ToolTipIcon.Info
        };
    }

    #endregion

    #region Disposal

    public void Dispose()
    {
        if (_isDisposed)
        {
            return;
        }

        try
        {
            if (_notifyIcon != null)
            {
                _notifyIcon.Visible = false;
                _notifyIcon.Icon?.Dispose();
                _notifyIcon.ContextMenuStrip?.Dispose();
                _notifyIcon.Dispose();
                _notifyIcon = null;
            }

            _isDisposed = true;
            GC.SuppressFinalize(this);
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è TrayService");
        }
    }

    #endregion
}