using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.ComponentModel;
using Wpf.Ui.Controls;
using ChatCaster.Windows.Views.ViewSettings;
using ChatCaster.Windows.Services;
using ChatCaster.Core.Models;
using WpfKey = System.Windows.Input.Key;
using WpfModifierKeys = System.Windows.Input.ModifierKeys;

namespace ChatCaster.Windows.Views
{
    public partial class ChatCasterWindow : FluentWindow
    {
        private readonly AudioCaptureService _audioService;
        private readonly SpeechRecognitionService _speechService;
        private readonly GamepadService _gamepadService;
        private readonly SystemIntegrationService _systemService;
        private readonly OverlayService _overlayService;
        private readonly ConfigurationService _configService;
        private readonly ServiceContext _serviceContext;
        private readonly TrayService _trayService;

        // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        private MainPageView? _cachedMainPage;
        private AudioSettingsView? _cachedAudioPage;
        private InterfaceSettingsView? _cachedInterfacePage;
        private ControlSettingsView? _cachedControlPage;

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        private AppConfig _currentConfig;

        private bool _isSidebarVisible = true;

        public ChatCasterWindow()
        {
            InitializeComponent();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            Console.InputEncoding = System.Text.Encoding.UTF8;

            // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ MainWindow
            _audioService = new AudioCaptureService();
            _speechService = new SpeechRecognitionService();
            _gamepadService = new GamepadService();
            _systemService = new SystemIntegrationService();
            _overlayService = new OverlayService();
            _configService = new ConfigurationService();

            // –î–û–ë–ê–í–ò–¢–¨ —Å–æ–∑–¥–∞–Ω–∏–µ VoiceRecordingService:
            var voiceRecordingService = new VoiceRecordingService(
                _audioService,
                _speechService,
                _configService
            );

            _overlayService.SubscribeToVoiceService(voiceRecordingService, _configService);

            // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–ø–æ—Ç–æ–º –∑–∞–≥—Ä—É–∑–∏–º –∏–∑ —Ñ–∞–π–ª–∞)
            _currentConfig = new AppConfig();

            // –°–æ–∑–¥–∞–µ–º ServiceContext –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
            _serviceContext = new ServiceContext(_currentConfig)
            {
                GamepadService = _gamepadService,
                AudioService = _audioService,
                SpeechService = _speechService,
                SystemService = _systemService,
                OverlayService = _overlayService,
                ConfigurationService = _configService,
                VoiceRecordingService = voiceRecordingService
            };

            // –°–æ–∑–¥–∞–µ–º TrayService
            _trayService = new TrayService(this);
            _trayService.Initialize();

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            Closing += ChatCasterWindow_Closing;

            LoadMainPage();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI
            Loaded += ChatCasterWindow_Loaded;
        }

        private async void ChatCasterWindow_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                Console.WriteLine($"üî• [ChatCasterWindow] ChatCasterWindow_Loaded –Ω–∞—á–∞—Ç");

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                _currentConfig = await _configService.LoadConfigAsync();
                _serviceContext.Config = _currentConfig;
                _trayService.SetConfig(_currentConfig);
                Console.WriteLine($"üìù [ChatCasterWindow] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Whisper —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                Console.WriteLine("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper...");
                await _speechService.InitializeAsync(_currentConfig.Whisper);
                Console.WriteLine("Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏
                Console.WriteLine($"üìù [ChatCasterWindow] –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ GlobalHotkeyPressed");
                _systemService.GlobalHotkeyPressed += OnGlobalHotkeyPressed;
                Console.WriteLine($"üìù [ChatCasterWindow] –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–æ—Ç–∫–µ–π –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if (_currentConfig.Input.KeyboardShortcut != null)
                {
                    Console.WriteLine(
                        $"üìù [ChatCasterWindow] –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö–æ—Ç–∫–µ–π: {FormatKeyboardShortcut(_currentConfig.Input.KeyboardShortcut)}");
                    Console.WriteLine($"üìù [ChatCasterWindow] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
                    bool registered = await _systemService.RegisterGlobalHotkeyAsync(_currentConfig.Input.KeyboardShortcut);
                    Console.WriteLine($"üìù [ChatCasterWindow] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered}");
                }
                else
                {
                    Console.WriteLine($"üìù [ChatCasterWindow] –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö–æ—Ç–∫–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω");
                }

                // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                if (_currentConfig.System.StartMinimized)
                {
                    this.WindowState = WindowState.Minimized;
                    this.ShowInTaskbar = false;
                    this.Hide();
                }

                _trayService.UpdateStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏");
                Console.WriteLine($"üî• [ChatCasterWindow] ChatCasterWindow_Loaded –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [ChatCasterWindow] –û—à–∏–±–∫–∞ –≤ ChatCasterWindow_Loaded: {ex.Message}");
            }
        }
        public void NavigateToSettings()
        {
            try
            {
                NavigateToPageAsync("Interface");
                UpdateNavigationButtons("Interface");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {ex.Message}");
            }
        }
        private async void OnGlobalHotkeyPressed(object? sender, KeyboardShortcut shortcut)
        {
            try
            {
                Console.WriteLine($"üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Ç–∫–µ–π: {FormatKeyboardShortcut(shortcut)}");

                // –ù–û–í–û–ï: –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ VoiceRecordingService
                await HandleVoiceRecordingAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ—Ç–∫–µ—è: {ex.Message}");
                _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–æ—Ç–∫–µ—è");
            }
        }

        private async Task HandleVoiceRecordingAsync()
        {
            try
            {
                var voiceService = _serviceContext.VoiceRecordingService;

                if (voiceService == null)
                {
                    Console.WriteLine("‚ùå VoiceRecordingService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ –≥–æ—Ç–æ–≤");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    Console.WriteLine("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å...");
                    _trayService.UpdateStatus("–û–±—Ä–∞–±–æ—Ç–∫–∞...");

                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    var result = await voiceService.StopRecordingAsync();

                    if (result.Success && !string.IsNullOrEmpty(result.RecognizedText))
                    {
                        Console.WriteLine($"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{result.RecognizedText}'");
                        _trayService.ShowNotification("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", result.RecognizedText);
                        _trayService.UpdateStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏");

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
                        await _systemService.SendTextAsync(result.RecognizedText);

                        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MainPageView –æ—Ç–∫—Ä—ã—Ç–∞
                        UpdateMainPageIfVisible(result.RecognizedText, false);
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.ErrorMessage}");
                        _trayService.ShowNotification("–û—à–∏–±–∫–∞", result.ErrorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å");
                        _trayService.UpdateStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏");
                    }
                }
                else
                {
                    Console.WriteLine("üé§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...");

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
                    bool started = await voiceService.StartRecordingAsync();

                    if (started)
                    {
                        Console.WriteLine("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å");
                        _trayService.UpdateStatus("–ó–∞–ø–∏—Å—å...");

                        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MainPageView –æ—Ç–∫—Ä—ã—Ç–∞
                        UpdateMainPageIfVisible("", true);
                    }
                    else
                    {
                        Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å");
                        _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ HandleVoiceRecordingAsync: {ex.Message}");
                _trayService.ShowNotification("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏");
                _trayService.UpdateStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏");
            }
        }

        private void UpdateMainPageIfVisible(string recognizedText, bool isRecording)
        {
            try
            {
                Dispatcher.InvokeAsync(() =>
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ MainPageView
                    if (ContentFrame.Content is MainPageView mainPageView)
                    {
                        Console.WriteLine($"üì± –û–±–Ω–æ–≤–ª—è–µ–º UI MainPageView");

                        if (isRecording)
                        {
                            // –ù–ê–ß–ê–õ–ò –∑–∞–ø–∏—Å—å - –∫–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
                            mainPageView.UpdateRecordingStatus("–ó–∞–ø–∏—Å—å...", "#ff9800");
                            mainPageView.UpdateRecordingButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "RecordCircle24");
                        }
                        else
                        {
                            // –ó–ê–ö–û–ù–ß–ò–õ–ò –∑–∞–ø–∏—Å—å - –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å"
                            mainPageView.UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
                            mainPageView.UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");

                            if (!string.IsNullOrEmpty(recognizedText))
                            {
                                mainPageView.ResultText.Text = recognizedText; // –ò –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ UpdateRecognizedText
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine($"üì± MainPageView –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, UI –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º");
                    }
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {ex.Message}");
            }
        }


// –ù–û–í–û–ï: –î–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        private string FormatKeyboardShortcut(KeyboardShortcut shortcut)
        {
            var parts = new List<string>();

            if (shortcut.Modifiers.HasFlag(Core.Models.ModifierKeys.Control))
                parts.Add("Ctrl");
            if (shortcut.Modifiers.HasFlag(Core.Models.ModifierKeys.Shift))
                parts.Add("Shift");
            if (shortcut.Modifiers.HasFlag(Core.Models.ModifierKeys.Alt))
                parts.Add("Alt");
            if (shortcut.Modifiers.HasFlag(Core.Models.ModifierKeys.Windows))
                parts.Add("Win");

            parts.Add(shortcut.Key.ToString());

            return string.Join(" + ", parts);
        }

        private void ChatCasterWindow_Closing(object? sender, CancelEventArgs e)
        {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –û–ë–†–ê–¢–ù–û–ô
            // MinimizeToTrayCheckBox.IsChecked = true -> —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π
            // MinimizeToTrayCheckBox.IsChecked = false -> –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    
            // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å "—Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π" –í–ö–õ–Æ–ß–ï–ù - –ù–ï —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            if (_currentConfig?.System?.AllowCompleteExit != true) // —Ç.–µ. —á–µ–∫–±–æ–∫—Å "—Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π" –≤–∫–ª—é—á–µ–Ω
            {
                // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π
                e.Cancel = true;
                this.Hide();
                this.ShowInTaskbar = false;
                _trayService.ShowFirstTimeNotification(_currentConfig);
            }
            else
            {
                // –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—á–µ–∫–±–æ–∫—Å "—Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π" –≤—ã–∫–ª—é—á–µ–Ω)
                _trayService.Dispose();
            }
        }

        private void LoadMainPage()
        {
            _cachedMainPage ??= new MainPageView(_audioService, _speechService, _serviceContext, _overlayService);
            ContentFrame.Navigate(_cachedMainPage);
            UpdateNavigationButtons("Main");
        }

        private async void NavigationButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Wpf.Ui.Controls.Button button && button.Tag is string pageTag)
            {
                await NavigateToPageAsync(pageTag);
                UpdateNavigationButtons(pageTag);
            }
        }

        private async Task NavigateToPageAsync(string pageTag)
        {
            // Fade out —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            var fadeOut = new DoubleAnimation
            {
                To = 0,
                Duration = TimeSpan.FromMilliseconds(150),
                EasingFunction = new CubicEase
                {
                    EasingMode = EasingMode.EaseOut
                }
            };

            ContentFrame.BeginAnimation(UIElement.OpacityProperty, fadeOut);
            await Task.Delay(150);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            Page targetPage = pageTag switch
            {
                "Main" => _cachedMainPage ??=
                    new MainPageView(_audioService, _speechService, _serviceContext, _overlayService),
                "Audio" => _cachedAudioPage ??=
                    new AudioSettingsView(_audioService, _speechService, _configService, _serviceContext),
                "Interface" => _cachedInterfacePage ??=
                    new InterfaceSettingsView(_overlayService, _configService, _serviceContext),
                "Control" => _cachedControlPage ??=
                    new ControlSettingsView(_gamepadService, _systemService, _configService, _serviceContext),
                _ => _cachedMainPage ??= new MainPageView(_audioService, _speechService, _serviceContext, _overlayService)
            };

            ContentFrame.Navigate(targetPage);

            // Fade in –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            var fadeIn = new DoubleAnimation
            {
                From = 0,
                To = 1,
                Duration = TimeSpan.FromMilliseconds(150),
                EasingFunction = new CubicEase
                {
                    EasingMode = EasingMode.EaseOut
                }
            };

            ContentFrame.BeginAnimation(UIElement.OpacityProperty, fadeIn);
        }


        private void NavigateToPage(string pageTag)
        {
            Page targetPage = pageTag switch
            {
                "Main" => new MainPageView(_audioService, _speechService, _serviceContext, _overlayService),
                "Audio" => new AudioSettingsView(_audioService, _speechService, _configService, _serviceContext),
                "Interface" => new InterfaceSettingsView(_overlayService, _configService, _serviceContext),
                "Control" => new ControlSettingsView(_gamepadService, _systemService, _configService, _serviceContext),
                _ => new MainPageView(_audioService, _speechService, _serviceContext, _overlayService)
            };

            ContentFrame.Navigate(targetPage);
        }

        private void UpdateNavigationButtons(string activePageTag)
        {
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            MainPageButton.Background = Brushes.Transparent;
            AudioPageButton.Background = Brushes.Transparent;
            InterfacePageButton.Background = Brushes.Transparent;
            ControlPageButton.Background = Brushes.Transparent;

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            var activeBrush = new SolidColorBrush(Color.FromRgb(0x0e, 0x63, 0x9c));

            switch (activePageTag)
            {
                case "Main":
                    MainPageButton.Background = activeBrush;
                    break;
                case "Audio":
                    AudioPageButton.Background = activeBrush;
                    break;
                case "Interface":
                    InterfacePageButton.Background = activeBrush;
                    break;
                case "Control":
                    ControlPageButton.Background = activeBrush;
                    break;
            }
        }

        private void ToggleMenu_Click(object sender, RoutedEventArgs e)
        {
            _isSidebarVisible = !_isSidebarVisible;

            var animation = new DoubleAnimation
            {
                To = _isSidebarVisible ? 280 : 0,
                Duration = TimeSpan.FromMilliseconds(300),
                EasingFunction = new CubicEase
                {
                    EasingMode = EasingMode.EaseOut
                }
            };

            SidebarBorder.BeginAnimation(Border.WidthProperty, animation);
        }

        public class GridLengthAnimation : AnimationTimeline
        {
            public GridLength From { get; set; }
            public GridLength To { get; set; }

            public override Type TargetPropertyType => typeof(GridLength);

            protected override Freezable CreateInstanceCore() => new GridLengthAnimation();

            public override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue,
                AnimationClock animationClock)
            {
                if (animationClock.CurrentProgress == null) return From;

                double progress = animationClock.CurrentProgress.Value;
                double fromValue = From.Value;
                double toValue = To.Value;

                double currentValue = fromValue + (toValue - fromValue) * progress;
                return new GridLength(currentValue);
            }
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        //–æ–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ButtonState == MouseButtonState.Pressed)
            {
                this.DragMove();
            }
        }

        // –ì–µ–π–º–ø–∞–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        protected override async void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            switch (e.Key)
            {
                case WpfKey.F1:
                    await NavigateToPageAsync("Main");
                    UpdateNavigationButtons("Main");
                    break;
                case WpfKey.F2:
                    await NavigateToPageAsync("Audio");
                    UpdateNavigationButtons("Audio");
                    break;
                case WpfKey.F3:
                    await NavigateToPageAsync("Interface");
                    UpdateNavigationButtons("Interface");
                    break;
                case WpfKey.F4:
                    await NavigateToPageAsync("Control");
                    UpdateNavigationButtons("Control");
                    break;
                case WpfKey.Tab when Keyboard.Modifiers == WpfModifierKeys.Control:
                    ToggleMenu_Click(this, new RoutedEventArgs());
                    break;
            }
        }

        // Cleanup –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
        protected override void OnClosed(EventArgs e)
        {
            Console.WriteLine("üî• OnClosed –Ω–∞—á–∞—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...");
    
            try
            {
                // –ù–û–í–û–ï: –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
                if (_systemService != null)
                {
                    Console.WriteLine("üìù –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç GlobalHotkeyPressed");
                    _systemService.GlobalHotkeyPressed -= OnGlobalHotkeyPressed;
                }

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
                Console.WriteLine("üéÆ –ó–∞–∫—Ä—ã–≤–∞–µ–º GamepadService...");
                _gamepadService?.Dispose();
        
                Console.WriteLine("‚öôÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º SystemService...");
                _systemService?.Dispose();
        
                Console.WriteLine("üñ•Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º OverlayService...");
                _overlayService?.Dispose();
        
                Console.WriteLine("üé§ –ó–∞–∫—Ä—ã–≤–∞–µ–º AudioService...");
                _audioService?.Dispose();
        
                Console.WriteLine("üó£Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º SpeechService...");
                _speechService?.Dispose();

                Console.WriteLine("üì± –ó–∞–∫—Ä—ã–≤–∞–µ–º TrayService...");
                _trayService?.Dispose();
        
                Console.WriteLine("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–∫—Ä—ã—Ç—ã");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}");
            }

            Console.WriteLine("üîö OnClosed –∑–∞–≤–µ—Ä—à–µ–Ω");
            base.OnClosed(e);
        }    }
}
