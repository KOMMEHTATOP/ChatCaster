using System.Windows;
using System.Windows.Media;
using ChatCaster.Core.Models;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.ViewModels.Settings;
using ChatCaster.Windows.ViewModels.Settings.Speech;
using Wpf.Ui.Controls;
using Serilog;

namespace ChatCaster.Windows.Views.ViewSettings;

public partial class AudioSettingsView 
{
    private readonly AudioCaptureService? _audioCaptureService;
    private readonly SpeechRecognitionService? _speechRecognitionService;

    private bool _isTestingMicrophone = false;
    private bool _isDownloadingModel = false;

    public AudioSettingsView()
    {
        InitializeComponent();
        Log.Information("AudioSettingsView —Å–æ–∑–¥–∞–Ω");
    }

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
    public AudioSettingsView(AudioCaptureService audioCaptureService, 
                            SpeechRecognitionService speechRecognitionService) : this()
    {
        _audioCaptureService = audioCaptureService;
        _speechRecognitionService = speechRecognitionService;
        
        Log.Information("AudioSettingsView –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ViewModel –ò –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è WhisperModelManager
    /// </summary>
    public void SetViewModel(AudioSettingsViewModel viewModel)
    {
        try
        {
            Log.Information("=== –£–°–¢–ê–ù–û–í–ö–ê VIEWMODEL ===");
            
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π ViewModel
            if (DataContext is AudioSettingsViewModel oldViewModel)
            {
                UnsubscribeFromModelEvents(oldViewModel);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π DataContext
            DataContext = viewModel;
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WhisperModelManager
            SubscribeToModelEvents(viewModel);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ViewModel
            _ = viewModel.InitializeAsync();
            
            Log.Information("‚úÖ ViewModel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —Å–æ–±—ã—Ç–∏—è");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ViewModel");
        }
    }

    #region –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è WhisperModelManager
    /// </summary>
    private void SubscribeToModelEvents(AudioSettingsViewModel viewModel)
    {
        try
        {
            viewModel.WhisperModelManager.ModelStatusChanged += OnModelStatusChanged;
            viewModel.WhisperModelManager.DownloadButtonStateChanged += OnDownloadButtonStateChanged;
            
            Log.Information("–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è WhisperModelManager");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WhisperModelManager");
        }
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π WhisperModelManager
    /// </summary>
    private void UnsubscribeFromModelEvents(AudioSettingsViewModel viewModel)
    {
        try
        {
            viewModel.WhisperModelManager.ModelStatusChanged -= OnModelStatusChanged;
            viewModel.WhisperModelManager.DownloadButtonStateChanged -= OnDownloadButtonStateChanged;
            
            Log.Information("–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Å–æ–±—ã—Ç–∏–π WhisperModelManager");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π WhisperModelManager");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏
    /// </summary>
    private void OnModelStatusChanged(object? sender, ModelStatusChangedEventArgs e)
    {
        Dispatcher.Invoke(new Action(() =>
        {
            try
            {
                UpdateModelStatus(e.Status, e.ColorHex);
                Log.Information("–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {Status}", e.Status);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –≤ UI");
            }
        }));
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    /// </summary>
    private void OnDownloadButtonStateChanged(object? sender, ModelDownloadButtonStateChangedEventArgs e)
    {
        Dispatcher.Invoke(new Action(() =>
        {
            try
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
                if (Enum.TryParse<SymbolRegular>(e.Symbol, out var symbolEnum))
                {
                    DownloadButtonIcon.Symbol = symbolEnum;
                }
                
                if (e.Symbol == "CheckmarkCircle24")
                {
                    DownloadButtonIcon.Foreground = new SolidColorBrush(Color.FromRgb(76, 175, 80)); // #4caf50
                    DownloadButtonIcon.FontSize = 18;
                    DownloadButtonIcon.FontWeight = FontWeights.ExtraBold; // –î–µ–ª–∞–µ–º –∫—Ä—É–ø–Ω–µ–µ
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                DownloadModelButton.IsEnabled = e.IsEnabled;
                DownloadModelButton.ToolTip = e.Tooltip;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏
                DownloadModelButton.Appearance = e.Appearance switch
                {
                    "Primary" => ControlAppearance.Primary,
                    "Success" => ControlAppearance.Primary,  
                    "Caution" => ControlAppearance.Caution,
                    "Danger" => ControlAppearance.Danger,
                    _ => ControlAppearance.Secondary
                };
                
                Log.Information("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {Symbol}, {Tooltip}, Enabled={IsEnabled}", 
                    e.Symbol, e.Tooltip, e.IsEnabled);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ UI");
            }
        }));
    }

    #endregion
    
    #region Button Click Handlers

    private async void TestMicrophoneButton_Click(object sender, RoutedEventArgs e)
    {
        try 
        {
            Log.Information("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");

            if (_isTestingMicrophone || _audioCaptureService == null) 
            {
                Log.Warning("‚ö†Ô∏è –¢–µ—Å—Ç —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                return;
            }

            await HandleTestMicrophoneAsync();
        
            Log.Information("‚úÖ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –ë–ï–ó –û–®–ò–ë–û–ö");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
            System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", 
                System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
        }
    }

    private async Task HandleTestMicrophoneAsync()
    {
        try
        {
            _isTestingMicrophone = true;
            TestMicrophoneButton.IsEnabled = false;
            UpdateMicrophoneStatus("–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è...", "#ff9800");

            Log.Information("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");

            var viewModel = DataContext as AudioSettingsViewModel;
            var selectedDevice = viewModel?.SelectedDevice;
            
            if (selectedDevice != null)
            {
                Log.Information("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {DeviceId} ({DeviceName})", 
                    selectedDevice.Id, selectedDevice.Name);
            
                await _audioCaptureService!.SetActiveDeviceAsync(selectedDevice.Id);
            }
            else
            {
                Log.Warning("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                UpdateMicrophoneStatus("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "#ff9800");
                return;
            }

            bool testResult = await _audioCaptureService!.TestMicrophoneAsync();

            if (testResult)
            {
                UpdateMicrophoneStatus("–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç", "#4caf50");
                Log.Information("‚úÖ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
            }
            else
            {
                UpdateMicrophoneStatus("–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º", "#f44336");
                Log.Warning("‚ùå –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–æ—à–µ–ª");
            }
        }
        catch (Exception ex)
        {
            UpdateMicrophoneStatus($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}", "#f44336");
            Log.Error(ex, "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
        }
        finally
        {
            _isTestingMicrophone = false;
            TestMicrophoneButton.IsEnabled = true;
        }
    }
    
    private void DownloadModelButton_Click(object sender, RoutedEventArgs e)
    {
        if (_isDownloadingModel || _speechRecognitionService == null) return;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º WhisperModelManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        var viewModel = DataContext as AudioSettingsViewModel;
        if (viewModel?.WhisperModelManager != null)
        {
            _ = viewModel.WhisperModelManager.DownloadModelAsync();
        }
    }
    
    #endregion

    #region Event Handlers –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    private void OnModelDownloadProgress(object? sender, Core.Events.ModelDownloadProgressEvent e)
    {
        Dispatcher.Invoke(new Action(() =>
        {
            UpdateModelStatus($"–ó–∞–≥—Ä—É–∑–∫–∞ {e.ProgressPercentage}%...", "#ff9800");
        }));
    }

    private void OnModelDownloadCompleted(object? sender, Core.Events.ModelDownloadCompletedEvent e)
    {
        Dispatcher.Invoke(new Action(() =>
        {
            if (_speechRecognitionService != null)
            {
                _speechRecognitionService.DownloadProgress -= OnModelDownloadProgress;
                _speechRecognitionService.DownloadCompleted -= OnModelDownloadCompleted;
            }

            if (e.Success)
            {
                UpdateModelStatus("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞", "#4caf50");
                Log.Information("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            }
            else
            {
                UpdateModelStatus($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e.ErrorMessage}", "#f44336");
                Log.Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {Error}", e.ErrorMessage);
            }

            _isDownloadingModel = false;
        }));
    }

    #endregion

    #region UI Helper Methods
    
    private void UpdateMicrophoneStatus(string text, string color)
    {
        MicrophoneStatusText.Text = text;
        MicrophoneStatusText.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
        MicrophoneStatusIcon.Fill = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
    }

    private void UpdateModelStatus(string text, string color)
    {
        ModelStatusText.Text = text;
        ModelStatusText.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
        ModelStatusIcon.Fill = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
    }

    #endregion

    #region Cleanup
    
    private void Page_Unloaded(object sender, RoutedEventArgs e)
    {
        try
        {
            if (_speechRecognitionService != null)
            {
                _speechRecognitionService.DownloadProgress -= OnModelDownloadProgress;
                _speechRecognitionService.DownloadCompleted -= OnModelDownloadCompleted;
            }
            
            if (DataContext is AudioSettingsViewModel viewModel)
            {
                UnsubscribeFromModelEvents(viewModel);
                viewModel.Cleanup();
            }
            
            Log.Information("AudioSettingsView –≤—ã–≥—Ä—É–∂–µ–Ω");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ AudioSettingsView");
        }
    }

    #endregion
}