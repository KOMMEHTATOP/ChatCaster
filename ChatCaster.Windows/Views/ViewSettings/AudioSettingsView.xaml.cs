using System.Windows;
using System.Windows.Media;
using ChatCaster.Core.Services;
using ChatCaster.Windows.ViewModels.Settings;
using Serilog;

namespace ChatCaster.Windows.Views.ViewSettings;

public partial class AudioSettingsView 
{
    private readonly IAudioCaptureService? _audioCaptureService;
    private readonly ISpeechRecognitionService? _speechRecognitionService;

    private bool _isTestingMicrophone = false;
    private bool _isDownloadingModel = false;

    public AudioSettingsView()
    {
        InitializeComponent();
        Log.Information("AudioSettingsView —Å–æ–∑–¥–∞–Ω");
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
    public AudioSettingsView(IAudioCaptureService audioCaptureService, 
                            ISpeechRecognitionService speechRecognitionService) : this()
    {
        _audioCaptureService = audioCaptureService;
        _speechRecognitionService = speechRecognitionService;
        
        Log.Information("AudioSettingsView –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å DI —Å–µ—Ä–≤–∏—Å–∞–º–∏");
    }

    /// <summary>
    /// ‚úÖ –ú–ï–¢–û–î –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ViewModel –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º Whisper –º–æ–¥—É–ª–µ–º
    /// </summary>
    public void SetViewModel(AudioSettingsViewModel viewModel)
    {
        try
        {
            Log.Information("=== –£–°–¢–ê–ù–û–í–ö–ê VIEWMODEL (–ù–æ–≤—ã–π Whisper –º–æ–¥—É–ª—å) ===");
            
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π ViewModel
            if (DataContext is AudioSettingsViewModel oldViewModel)
            {
                UnsubscribeFromOldEvents(oldViewModel);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π DataContext
            DataContext = viewModel;
            
            // ‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ Whisper –º–æ–¥—É–ª—è
            SubscribeToNewWhisperEvents(viewModel);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ViewModel
            _ = viewModel.InitializeAsync();
            
            Log.Information("‚úÖ ViewModel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ Whisper –º–æ–¥—É–ª—è");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ViewModel");
        }
    }

    #region –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ Whisper –º–æ–¥—É–ª—è
    /// </summary>
    private void SubscribeToNewWhisperEvents(AudioSettingsViewModel viewModel)
    {
        try
        {
            // ‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î: –°–æ–±—ã—Ç–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç ISpeechRecognitionService
            if (_speechRecognitionService != null)
            {
                // –ï—Å–ª–∏ —É –Ω–æ–≤–æ–≥–æ Whisper –º–æ–¥—É–ª—è –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                // –í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—à–µ–≥–æ ISpeechRecognitionService –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞:
                // _speechRecognitionService.ModelStatusChanged += OnModelStatusChanged;
                // _speechRecognitionService.DownloadProgress += OnDownloadProgress;
                
                Log.Information("–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ Whisper –º–æ–¥—É–ª—è");
            }
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Å–∞–º–æ–º ViewModel
            // viewModel.ModelStatusChanged += OnModelStatusChanged;
            
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ Whisper –º–æ–¥—É–ª—è");
        }
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
    /// </summary>
    private void UnsubscribeFromOldEvents(AudioSettingsViewModel viewModel)
    {
        try
        {
            // ‚úÖ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            if (_speechRecognitionService != null)
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                Log.Information("–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π");
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    /// </summary>
    private void OnModelStatusChanged(object? sender, EventArgs e)
    {
        Dispatcher.Invoke(new Action(() =>
        {
            try
            {
                // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –≤ UI
                UpdateModelStatus("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞", "#4caf50");
                Log.Information("–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –≤ UI");
            }
        }));
    }

    #endregion
    
    #region Button Click Handlers

    private async void TestMicrophoneButton_Click(object sender, RoutedEventArgs e)
    {
        try 
        {
            Log.Information("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");

            if (_isTestingMicrophone || _audioCaptureService == null) 
            {
                Log.Warning("‚ö†Ô∏è –¢–µ—Å—Ç —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                return;
            }

            await HandleTestMicrophoneAsync();
        
            Log.Information("‚úÖ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –ë–ï–ó –û–®–ò–ë–û–ö");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
            System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", 
                System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
        }
    }

    private async Task HandleTestMicrophoneAsync()
    {
        try
        {
            _isTestingMicrophone = true;
            TestMicrophoneButton.IsEnabled = false;
            UpdateMicrophoneStatus("–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è...", "#ff9800");

            Log.Information("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");

            var viewModel = DataContext as AudioSettingsViewModel;
            var selectedDevice = viewModel?.SelectedDevice;
            
            if (selectedDevice != null)
            {
                Log.Information("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {DeviceId} ({DeviceName})", 
                    selectedDevice.Id, selectedDevice.Name);
            
                await _audioCaptureService!.SetActiveDeviceAsync(selectedDevice.Id);
            }
            else
            {
                Log.Warning("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                UpdateMicrophoneStatus("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "#ff9800");
                return;
            }

            bool testResult = await _audioCaptureService!.TestMicrophoneAsync();

            if (testResult)
            {
                UpdateMicrophoneStatus("–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç", "#4caf50");
                Log.Information("‚úÖ –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
            }
            else
            {
                UpdateMicrophoneStatus("–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º", "#f44336");
                Log.Warning("‚ùå –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–æ—à–µ–ª");
            }
        }
        catch (Exception ex)
        {
            UpdateMicrophoneStatus($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}", "#f44336");
            Log.Error(ex, "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
        }
        finally
        {
            _isTestingMicrophone = false;
            TestMicrophoneButton.IsEnabled = true;
        }
    }
    
    private void DownloadModelButton_Click(object sender, RoutedEventArgs e)
    {
        try
        {
            if (_isDownloadingModel) return;
            
            var viewModel = DataContext as AudioSettingsViewModel;
            if (viewModel != null)
            {
                Log.Information("–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ ViewModel");
                _ = viewModel.DownloadModelAsync(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ViewModel
            }
            else
            {
                Log.Warning("ViewModel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏");
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏");
        }
    }
    
    #endregion

    #region Event Handlers –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    
    private void OnModelDownloadProgress(object? sender, EventArgs e)
    {
        Dispatcher.Invoke(new Action(() =>
        {
            UpdateModelStatus("–ó–∞–≥—Ä—É–∑–∫–∞...", "#ff9800");
        }));
    }

    private void OnModelDownloadCompleted(object? sender, EventArgs e)
    {
        Dispatcher.Invoke(new Action(() =>
        {
            UpdateModelStatus("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞", "#4caf50");
            Log.Information("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            _isDownloadingModel = false;
        }));
    }

    #endregion

    #region UI Helper Methods
    
    private void UpdateMicrophoneStatus(string text, string color)
    {
        MicrophoneStatusText.Text = text;
        MicrophoneStatusText.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
        MicrophoneStatusIcon.Fill = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
    }

    private void UpdateModelStatus(string text, string color)
    {
        ModelStatusText.Text = text;
        ModelStatusText.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
        ModelStatusIcon.Fill = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
    }

    #endregion

    #region Cleanup
    
    private void Page_Unloaded(object sender, RoutedEventArgs e)
    {
        try
        {
            if (DataContext is AudioSettingsViewModel viewModel)
            {
                UnsubscribeFromOldEvents(viewModel);
                viewModel.Cleanup();
            }
            
            Log.Information("AudioSettingsView –≤—ã–≥—Ä—É–∂–µ–Ω");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ AudioSettingsView");
        }
    }

    #endregion
}