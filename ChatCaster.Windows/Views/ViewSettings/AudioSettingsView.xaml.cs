using System.Windows;
using System.Windows.Media;
using ChatCaster.Core.Services;
using ChatCaster.Windows.ViewModels;
using Serilog;

namespace ChatCaster.Windows.Views.ViewSettings;

public partial class AudioSettingsView 
{
    private readonly IAudioCaptureService? _audioCaptureService;
    private bool _isTestingMicrophone;

    public AudioSettingsView()
    {
        InitializeComponent();
        Log.Information("AudioSettingsView —Å–æ–∑–¥–∞–Ω");
    }

    public AudioSettingsView(IAudioCaptureService audioCaptureService) : this()
    {
        _audioCaptureService = audioCaptureService;
        Log.Information("AudioSettingsView –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å AudioCaptureService");
    }

    /// <summary>
    /// ViewModel –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    /// </summary>
    public void SetViewModel(AudioSettingsViewModel viewModel)
    {
        try
        {
            Log.Information("=== –£–°–¢–ê–ù–û–í–ö–ê VIEWMODEL ===");
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π DataContext
            DataContext = viewModel;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ViewModel
            _ = viewModel.InitializeAsync();
            
            Log.Information("ViewModel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ViewModel");
        }
    }

    #region Button Click Handlers

    private async void TestMicrophoneButton_Click(object sender, RoutedEventArgs e)
    {
        try 
        {
            Log.Information("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");

            if (_isTestingMicrophone || _audioCaptureService == null) 
            {
                Log.Warning("–¢–µ—Å—Ç —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                return;
            }

            await HandleTestMicrophoneAsync();
        
            Log.Information("–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –ë–ï–ó –û–®–ò–ë–û–ö");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
            MessageBox.Show($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", 
                MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }

    private async Task HandleTestMicrophoneAsync()
    {
        try
        {
            _isTestingMicrophone = true;
            TestMicrophoneButton.IsEnabled = false;
            UpdateMicrophoneStatus("–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è...", "#ff9800");

            Log.Information("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");

            var viewModel = DataContext as AudioSettingsViewModel;
            var selectedDevice = viewModel?.SelectedDevice;
            
            if (selectedDevice != null)
            {
                Log.Information("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {DeviceId} ({DeviceName})", 
                    selectedDevice.Id, selectedDevice.Name);
            
                await _audioCaptureService!.SetActiveDeviceAsync(selectedDevice.Id);
            }
            else
            {
                Log.Warning("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                UpdateMicrophoneStatus("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "#ff9800");
                return;
            }

            bool testResult = await _audioCaptureService!.TestMicrophoneAsync();

            if (testResult)
            {
                UpdateMicrophoneStatus("–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç", "#4caf50");
                Log.Information("–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
            }
            else
            {
                UpdateMicrophoneStatus("–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º", "#f44336");
                Log.Warning("–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–æ—à–µ–ª");
            }
        }
        catch (Exception ex)
        {
            UpdateMicrophoneStatus($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}", "#f44336");
            Log.Error(ex, "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
        }
        finally
        {
            _isTestingMicrophone = false;
            TestMicrophoneButton.IsEnabled = true;
        }
    }
    
    private void DownloadModelButton_Click(object sender, RoutedEventArgs e)
    {
        try
        {
            if (DataContext is AudioSettingsViewModel viewModel)
            {
                Log.Information("–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ ViewModel");
                _ = viewModel.DownloadModelAsync(); 
            }
            else
            {
                Log.Warning("ViewModel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏");
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏");
        }
    }
    
    #endregion

    #region UI Helper Methods
    
    private void UpdateMicrophoneStatus(string text, string color)
    {
        MicrophoneStatusText.Text = text;
        MicrophoneStatusText.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
        MicrophoneStatusIcon.Fill = new SolidColorBrush((Color)ColorConverter.ConvertFromString(color));
    }
    
    #endregion
}