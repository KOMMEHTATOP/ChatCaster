using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.ViewModels;

namespace ChatCaster.Windows.Views.ViewSettings;

public partial class ControlSettingsView : Page
{
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º nullable –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    private ControlSettingsViewModel _viewModel = null!;

    public ControlSettingsView()
    {
        InitializeComponent();
    }

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
    public ControlSettingsView(Services.GamepadService.MainGamepadService gamepadService, 
                              SystemIntegrationService systemService, 
                              ConfigurationService configurationService,
                              ServiceContext serviceContext) : this()
    {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º _viewModel
        _viewModel = new ControlSettingsViewModel(
            configurationService, 
            serviceContext, 
            gamepadService, 
            systemService);
        
        DataContext = _viewModel;
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        SubscribeToViewModelEvents();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ViewModel
        _ = _viewModel.InitializeAsync();
    }

    #region ‚úÖ –ù–û–í–´–ô –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è

    private void SubscribeToViewModelEvents()
    {
        _viewModel.PropertyChanged += (s, e) =>
        {
            if (e.PropertyName == nameof(_viewModel.IsWaitingForKeyboardInput))
            {
                System.Diagnostics.Debug.WriteLine($"üé® IsWaitingForKeyboardInput –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.IsWaitingForKeyboardInput}");
            }
            if (e.PropertyName == nameof(_viewModel.IsWaitingForGamepadInput))
            {
                System.Diagnostics.Debug.WriteLine($"üé® IsWaitingForGamepadInput –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.IsWaitingForGamepadInput}");
            }
            if (e.PropertyName == nameof(_viewModel.KeyboardComboTextColor))
            {
                System.Diagnostics.Debug.WriteLine($"üé® KeyboardComboTextColor –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.KeyboardComboTextColor}");
            }
            if (e.PropertyName == nameof(_viewModel.GamepadComboTextColor))
            {
                System.Diagnostics.Debug.WriteLine($"üé® GamepadComboTextColor –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.GamepadComboTextColor}");
            }
        };
    }

    #endregion

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ ViewModel
    private async void GamepadComboBorder_Click(object sender, MouseButtonEventArgs e)
    {
        System.Diagnostics.Debug.WriteLine($"üé® GamepadComboBorder_Click –≤—ã–∑–≤–∞–Ω");
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º null-conditional –ø–æ—Å–∫–æ–ª—å–∫—É _viewModel –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null
        if (_viewModel.StartGamepadCaptureCommand.CanExecute(null))
        {
            await _viewModel.StartGamepadCaptureCommand.ExecuteAsync(null);
        }
    }

    private async void KeyboardComboBorder_Click(object sender, MouseButtonEventArgs e)
    {
        System.Diagnostics.Debug.WriteLine($"üé® KeyboardComboBorder_Click –≤—ã–∑–≤–∞–Ω");
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º null-conditional –ø–æ—Å–∫–æ–ª—å–∫—É _viewModel –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null
        if (_viewModel.StartKeyboardCaptureCommand.CanExecute(null))
        {
            await _viewModel.StartKeyboardCaptureCommand.ExecuteAsync(null);
        }
    }

    // Cleanup –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    private void Page_Unloaded(object sender, RoutedEventArgs e)
    {
        try
        {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º null-conditional –ø–æ—Å–∫–æ–ª—å–∫—É _viewModel –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null
            _viewModel.Cleanup();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ ControlSettingsView: {ex.Message}");
        }
    }
}