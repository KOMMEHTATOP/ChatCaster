using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using ChatCaster.Core.Services;
using ChatCaster.Windows.Services;
using ChatCaster.Windows.ViewModels;
using ChatCaster.Windows.ViewModels.Settings;

namespace ChatCaster.Windows.Views.ViewSettings;

public partial class ControlSettingsView : Page
{
    private ControlSettingsViewModel? _viewModel;

    public ControlSettingsView()
    {
        InitializeComponent();
    }

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
    public ControlSettingsView(Services.GamepadService.MainGamepadService gamepadService, 
                              SystemIntegrationService systemService, 
                              ConfigurationService configurationService,
                              ServiceContext serviceContext) : this()
    {
        // –°–æ–∑–¥–∞–µ–º ViewModel –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ DataContext
        _viewModel = new ControlSettingsViewModel(
            configurationService, 
            serviceContext, 
            gamepadService, 
            systemService);
        
        DataContext = _viewModel;
        
        // ‚úÖ –î–û–ë–ê–í–ò–ú –æ—Ç–ª–∞–¥–∫—É —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        _viewModel.PropertyChanged += (s, e) =>
        {
            if (e.PropertyName == nameof(_viewModel.IsWaitingForKeyboardInput))
            {
                System.Diagnostics.Debug.WriteLine($"üé® IsWaitingForKeyboardInput –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.IsWaitingForKeyboardInput}");
            }
            if (e.PropertyName == nameof(_viewModel.IsWaitingForGamepadInput))
            {
                System.Diagnostics.Debug.WriteLine($"üé® IsWaitingForGamepadInput –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.IsWaitingForGamepadInput}");
            }
            if (e.PropertyName == nameof(_viewModel.KeyboardComboTextColor))
            {
                System.Diagnostics.Debug.WriteLine($"üé® KeyboardComboTextColor –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.KeyboardComboTextColor}");
            }
            if (e.PropertyName == nameof(_viewModel.GamepadComboTextColor))
            {
                System.Diagnostics.Debug.WriteLine($"üé® GamepadComboTextColor –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {_viewModel.GamepadComboTextColor}");
            }
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ViewModel
        _ = _viewModel.InitializeAsync();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ ViewModel
    private async void GamepadComboBorder_Click(object sender, MouseButtonEventArgs e)
    {
        System.Diagnostics.Debug.WriteLine($"üé® GamepadComboBorder_Click –≤—ã–∑–≤–∞–Ω");
        if (_viewModel?.StartGamepadCaptureCommand?.CanExecute(null) == true)
        {
            await _viewModel.StartGamepadCaptureCommand.ExecuteAsync(null);
        }
    }

    private async void KeyboardComboBorder_Click(object sender, MouseButtonEventArgs e)
    {
        System.Diagnostics.Debug.WriteLine($"üé® KeyboardComboBorder_Click –≤—ã–∑–≤–∞–Ω");
        if (_viewModel?.StartKeyboardCaptureCommand?.CanExecute(null) == true)
        {
            await _viewModel.StartKeyboardCaptureCommand.ExecuteAsync(null);
        }
    }

    // Cleanup –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    private void Page_Unloaded(object sender, RoutedEventArgs e)
    {
        try
        {
            _viewModel?.Cleanup();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ ControlSettingsView: {ex.Message}");
        }
    }
}