using ChatCaster.Core.Events;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using ChatCaster.Core.Models;
using ChatCaster.Windows.Services;

namespace ChatCaster.Windows.Views.ViewSettings
{
    public partial class MainPageView : Page
    {
        private readonly AudioCaptureService? _audioCaptureService;
        private readonly ServiceContext? _serviceContext;
        private readonly OverlayService? _overlayService;

        public MainPageView()
        {
            InitializeComponent();
            UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
        }

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
        public MainPageView(AudioCaptureService audioCaptureService, 
                           SpeechRecognitionService speechRecognitionService, 
                           ServiceContext serviceContext, OverlayService overlayService) : this()
        {
            _audioCaptureService = audioCaptureService;
            _serviceContext = serviceContext;
            _overlayService = overlayService;
            
            LoadCurrentDevice();
            
            // –ù–û–í–û–ï: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è VoiceRecordingService
            if (serviceContext?.VoiceRecordingService != null)
            {
                serviceContext.VoiceRecordingService.StatusChanged += OnRecordingStatusChanged;
                serviceContext.VoiceRecordingService.RecognitionCompleted += OnRecognitionCompleted;
            }
        }

        private async void LoadCurrentDevice()
        {
            try
            {
                if (_audioCaptureService != null)
                {
                    var devices = await _audioCaptureService.GetAvailableDevicesAsync();
                    var defaultDevice = devices.FirstOrDefault(d => d.IsDefault) ?? devices.FirstOrDefault();
                    CurrentDeviceText.Text = $"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {defaultDevice?.Name ?? "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}";
                }
                else
                {
                    CurrentDeviceText.Text = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
                }
            }
            catch (Exception ex)
            {
                CurrentDeviceText.Text = $"–û—à–∏–±–∫–∞: {ex.Message}";
            }
        }

        // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏
        private void OnRecordingStatusChanged(object? sender, RecordingStatusChangedEvent e)
        {
            Dispatcher.InvokeAsync(() =>
            {
                switch (e.NewStatus)
                {
                    case RecordingStatus.Recording:
                        UpdateRecordingButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "RecordCircle24");
                        UpdateRecordingStatus("–ó–∞–ø–∏—Å—å...", "#ff9800");
                        ClearResults();
                        break;
                    
                    case RecordingStatus.Processing:
                        UpdateRecordingStatus("–û–±—Ä–∞–±–æ—Ç–∫–∞...", "#2196f3");
                        break;
                    
                    case RecordingStatus.Completed:
                    case RecordingStatus.Idle:
                        UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                        UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
                        break;
                    
                    case RecordingStatus.Error:
                    case RecordingStatus.Cancelled:
                        UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                        UpdateRecordingStatus("–û—à–∏–±–∫–∞", "#f44336");
                        break;
                }
            });
        }

        // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        private void OnRecognitionCompleted(object? sender, VoiceRecognitionCompletedEvent e)
        {
            Dispatcher.InvokeAsync(() =>
            {
                var result = e.Result;
                
                if (result.Success && !string.IsNullOrWhiteSpace(result.RecognizedText))
                {
                    ResultText.Text = result.RecognizedText;
                    ResultText.Foreground = Brushes.White;
                    ResultText.FontStyle = FontStyles.Normal;

                    ConfidenceText.Text = $"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.Confidence:P0}";
                    ProcessingTimeText.Text = $"–í—Ä–µ–º—è: {result.ProcessingTime.TotalMilliseconds:F0}–º—Å";

                    Console.WriteLine($"‚úÖ [MainPageView] –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result.RecognizedText}'");
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ (—á–µ—Ä–µ–∑ TrayService –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ)
                }
                else
                {
                    string errorMessage = result.ErrorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å";
                    ShowError(errorMessage);
                }
            });
        }

        // –£–ü–†–û–©–ï–ù–ù–´–ô: –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ VoiceRecordingService
        private async void RecordButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var voiceService = _serviceContext?.VoiceRecordingService;
                if (voiceService == null)
                {
                    ShowError("–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    Console.WriteLine("üõë [MainPageView] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ VoiceRecordingService");
                    await voiceService.StopRecordingAsync();
                }
                else
                {
                    Console.WriteLine("üé§ [MainPageView] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ VoiceRecordingService");
                    await voiceService.StartRecordingAsync();
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞: {ex.Message}");
                Console.WriteLine($"‚ùå [MainPageView] –û—à–∏–±–∫–∞ –≤ RecordButton_Click: {ex.Message}");
            }
        }

        /// <summary>
        /// –ù–û–í–´–ô: –ú–µ—Ç–æ–¥ –¥–ª—è —Ö–æ—Ç–∫–µ—è - —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ VoiceRecordingService
        /// </summary>
        public async Task TriggerRecordingFromHotkey()
        {
            try
            {
                Console.WriteLine($"üé§ [MainPageView] TriggerRecordingFromHotkey - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ VoiceRecordingService");
                
                var voiceService = _serviceContext?.VoiceRecordingService;
                if (voiceService == null)
                {
                    Console.WriteLine($"‚ùå [MainPageView] VoiceRecordingService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    ShowError("–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    Console.WriteLine($"üìù [MainPageView] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å");
                    await voiceService.StopRecordingAsync();
                }
                else
                {
                    Console.WriteLine($"üìù [MainPageView] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å");
                    await voiceService.StartRecordingAsync();
                }

                Console.WriteLine($"üé§ [MainPageView] TriggerRecordingFromHotkey –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [MainPageView] –û—à–∏–±–∫–∞ –≤ TriggerRecordingFromHotkey: {ex.Message}");
                ShowError($"–û—à–∏–±–∫–∞ —Ö–æ—Ç–∫–µ—è: {ex.Message}");
            }
        }

        // –¢–û–õ–¨–ö–û UI –ú–ï–¢–û–î–´ - –Ω–∏–∫–∞–∫–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        public void ShowError(string message)
        {
            ResultText.Text = message;
            ResultText.Foreground = new SolidColorBrush(Color.FromRgb(244, 67, 54));
            ResultText.FontStyle = FontStyles.Italic;

            ConfidenceText.Text = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText.Text = "–í—Ä–µ–º—è: -";

            UpdateRecordingStatus("–û—à–∏–±–∫–∞", "#f44336");
            
            Console.WriteLine($"‚ùå [MainPageView] –û—à–∏–±–∫–∞: {message}");
        }

        public void ClearResults()
        {
            ResultText.Text = "–û–±—Ä–∞–±–æ—Ç–∫–∞...";
            ResultText.Foreground = new SolidColorBrush(Color.FromRgb(153, 153, 153));
            ResultText.FontStyle = FontStyles.Italic;

            ConfidenceText.Text = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText.Text = "–í—Ä–µ–º—è: -";
        }

        public void UpdateRecordingStatus(string status, string color)
        {
            RecordingStatusText.Text = status;
            RecordingStatusText.Foreground = new SolidColorBrush(
                (Color)ColorConverter.ConvertFromString(color));
        }

        public void UpdateRecordingButton(string content, string iconSymbol)
        {
            RecordButton.Content = content;
            // TODO: –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI
        public void UpdateDeviceStatus(string deviceName)
        {
            CurrentDeviceText.Text = $"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {deviceName}";
        }

        public void UpdateConnectionStatus(bool isConnected)
        {
            if (isConnected)
            {
                UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
            }
            else
            {
                UpdateRecordingStatus("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "#f44336");
            }
        }

        // –ù–û–í–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ ChatCasterWindow
        public void UpdateRecordingState(bool isRecording)
        {
            if (isRecording)
            {
                UpdateRecordingButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "RecordCircle24");
                UpdateRecordingStatus("–ó–∞–ø–∏—Å—å...", "#ff9800");
                ClearResults();
            }
            else
            {
                UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
            }
        }

        public void UpdateRecognizedText(string recognizedText)
        {
            if (!string.IsNullOrEmpty(recognizedText))
            {
                ResultText.Text = recognizedText;
                ResultText.Foreground = Brushes.White;
                ResultText.FontStyle = FontStyles.Normal;
                
                Console.WriteLine($"üì± [MainPageView] UI –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '{recognizedText}'");
            }
        }

        // Cleanup –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            try
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π VoiceRecordingService
                if (_serviceContext?.VoiceRecordingService != null)
                {
                    _serviceContext.VoiceRecordingService.StatusChanged -= OnRecordingStatusChanged;
                    _serviceContext.VoiceRecordingService.RecognitionCompleted -= OnRecognitionCompleted;
                }

                Console.WriteLine($"üßπ [MainPageView] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [MainPageView] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {ex.Message}");
            }
        }
    }
}