using ChatCaster.Core.Events;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using ChatCaster.Core.Models;
using ChatCaster.Windows.Services;

namespace ChatCaster.Windows.Views.ViewSettings
{
    public partial class MainPageView : Page
    {
        private readonly AudioCaptureService? _audioCaptureService;
        private readonly ServiceContext? _serviceContext;

        public MainPageView()
        {
            InitializeComponent();
            UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
        }

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
        public MainPageView(AudioCaptureService audioCaptureService, ServiceContext serviceContext) : this()
        {
            _audioCaptureService = audioCaptureService;
            _serviceContext = serviceContext;
            
            LoadCurrentDevice();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è VoiceRecordingService
            if (serviceContext?.VoiceRecordingService != null)
            {
                serviceContext.VoiceRecordingService.StatusChanged += OnRecordingStatusChanged;
                serviceContext.VoiceRecordingService.RecognitionCompleted += OnRecognitionCompleted;
            }
        }

        private async void LoadCurrentDevice()
        {
            try
            {
                if (_audioCaptureService != null)
                {
                    var devices = await _audioCaptureService.GetAvailableDevicesAsync();
                    var defaultDevice = devices.FirstOrDefault(d => d.IsDefault) ?? devices.FirstOrDefault();
                    CurrentDeviceText.Text = $"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {defaultDevice?.Name ?? "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}";
                }
                else
                {
                    CurrentDeviceText.Text = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
                }
            }
            catch (Exception ex)
            {
                CurrentDeviceText.Text = $"–û—à–∏–±–∫–∞: {ex.Message}";
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏
        private void OnRecordingStatusChanged(object? sender, RecordingStatusChangedEvent e)
        {
            Dispatcher.InvokeAsync(() =>
            {
                switch (e.NewStatus)
                {
                    case RecordingStatus.Recording:
                        UpdateRecordingButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "RecordCircle24");
                        UpdateRecordingStatus("–ó–∞–ø–∏—Å—å...", "#ff9800");
                        ClearResults();
                        break;
                    
                    case RecordingStatus.Processing:
                        UpdateRecordingStatus("–û–±—Ä–∞–±–æ—Ç–∫–∞...", "#2196f3");
                        break;
                    
                    case RecordingStatus.Completed:
                    case RecordingStatus.Idle:
                        UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                        UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
                        break;
                    
                    case RecordingStatus.Error:
                    case RecordingStatus.Cancelled:
                        UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                        UpdateRecordingStatus("–û—à–∏–±–∫–∞", "#f44336");
                        break;
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        private void OnRecognitionCompleted(object? sender, VoiceRecognitionCompletedEvent e)
        {
            Dispatcher.InvokeAsync(() =>
            {
                var result = e.Result;
                
                if (result.Success && !string.IsNullOrWhiteSpace(result.RecognizedText))
                {
                    ResultText.Text = result.RecognizedText;
                    ResultText.Foreground = Brushes.White;
                    ResultText.FontStyle = FontStyles.Normal;

                    ConfidenceText.Text = $"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.Confidence:P0}";
                    ProcessingTimeText.Text = $"–í—Ä–µ–º—è: {result.ProcessingTime.TotalMilliseconds:F0}–º—Å";
                }
                else
                {
                    string errorMessage = result.ErrorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å";
                    ShowError(errorMessage);
                }
            });
        }

        private async void RecordButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var voiceService = _serviceContext?.VoiceRecordingService;
                if (voiceService == null)
                {
                    ShowError("–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    await voiceService.StopRecordingAsync();
                }
                else
                {
                    await voiceService.StartRecordingAsync();
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ú–µ—Ç–æ–¥ –¥–ª—è —Ö–æ—Ç–∫–µ—è - —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ VoiceRecordingService
        /// </summary>
        public async Task TriggerRecordingFromHotkey()
        {
            try
            {
                var voiceService = _serviceContext?.VoiceRecordingService;
                if (voiceService == null)
                {
                    ShowError("–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                if (voiceService.IsRecording)
                {
                    await voiceService.StopRecordingAsync();
                }
                else
                {
                    await voiceService.StartRecordingAsync();
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞ —Ö–æ—Ç–∫–µ—è: {ex.Message}");
            }
        }

        // ===== –í–ù–£–¢–†–ï–ù–ù–ò–ï HELPER –ú–ï–¢–û–î–´ =====

        public void ShowError(string message)
        {
            ResultText.Text = message;
            ResultText.Foreground = new SolidColorBrush(Color.FromRgb(244, 67, 54));
            ResultText.FontStyle = FontStyles.Italic;

            ConfidenceText.Text = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText.Text = "–í—Ä–µ–º—è: -";

            UpdateRecordingStatus("–û—à–∏–±–∫–∞", "#f44336");
        }

        public void ClearResults()
        {
            ResultText.Text = "–û–±—Ä–∞–±–æ—Ç–∫–∞...";
            ResultText.Foreground = new SolidColorBrush(Color.FromRgb(153, 153, 153));
            ResultText.FontStyle = FontStyles.Italic;

            ConfidenceText.Text = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText.Text = "–í—Ä–µ–º—è: -";
        }

        public void UpdateRecordingStatus(string status, string color)
        {
            RecordingStatusText.Text = status;
            RecordingStatusText.Foreground = new SolidColorBrush(
                (Color)ColorConverter.ConvertFromString(color));
        }

        public void UpdateRecordingButton(string content, string iconSymbol)
        {
            RecordButton.Content = content;
            // –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }

        // ===== CLEANUP - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù! =====
        
        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            try
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π VoiceRecordingService
                if (_serviceContext?.VoiceRecordingService != null)
                {
                    _serviceContext.VoiceRecordingService.StatusChanged -= OnRecordingStatusChanged;
                    _serviceContext.VoiceRecordingService.RecognitionCompleted -= OnRecognitionCompleted;
                }
            }
            catch (Exception ex)
            {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å Console.WriteLine –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ cleanup
                // –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à –ª–æ–≥–≥–µ—Ä –∫–æ–≥–¥–∞ –≤–Ω–µ–¥—Ä–∏—Ç–µ
                System.Diagnostics.Debug.WriteLine($"‚ùå [MainPageView] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {ex.Message}");
            }
        }
    }
}