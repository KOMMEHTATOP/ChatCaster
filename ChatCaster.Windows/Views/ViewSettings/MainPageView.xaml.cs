using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using ChatCaster.Core.Models;
using ChatCaster.Core.Services;
using ChatCaster.Windows.Services;

namespace ChatCaster.Windows.Views.ViewSettings
{
    public partial class MainPageView : Page
    {
        private readonly AudioCaptureService? _audioCaptureService;
        private readonly SpeechRecognitionService? _speechRecognitionService;
        private readonly ServiceContext? _serviceContext;
        private readonly OverlayService? _overlayService;
        private bool _isRecording = false;
        private readonly List<byte> _audioBuffer = new List<byte>();
        private System.Threading.Timer? _recordingTimer;

        public MainPageView()
        {
            InitializeComponent();
            UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
        }

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
        public MainPageView(AudioCaptureService audioCaptureService, 
                           SpeechRecognitionService speechRecognitionService, 
                           ServiceContext serviceContext, OverlayService overlayService) : this()
        {
            _audioCaptureService = audioCaptureService;
            _speechRecognitionService = speechRecognitionService;
            _serviceContext = serviceContext;
            _overlayService = overlayService;
            LoadCurrentDevice();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏–æ
            if (_audioCaptureService != null)
            {
                _audioCaptureService.AudioDataReceived += OnAudioDataReceived;
            }
        }

        private async void LoadCurrentDevice()
        {
            try
            {
                if (_audioCaptureService != null)
                {
                    var devices = await _audioCaptureService.GetAvailableDevicesAsync();
                    var defaultDevice = devices.FirstOrDefault(d => d.IsDefault) ?? devices.FirstOrDefault();
                    CurrentDeviceText.Text = $"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {defaultDevice?.Name ?? "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}";
                }
                else
                {
                    CurrentDeviceText.Text = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
                }
            }
            catch (Exception ex)
            {
                CurrentDeviceText.Text = $"–û—à–∏–±–∫–∞: {ex.Message}";
            }
        }

        private void OnAudioDataReceived(object? sender, byte[] audioData)
        {
            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
            if (_isRecording)
            {
                _audioBuffer.AddRange(audioData);
                Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –±–ª–æ–∫: {audioData.Length} –±–∞–π—Ç, –≤—Å–µ–≥–æ –≤ –±—É—Ñ–µ—Ä–µ: {_audioBuffer.Count} –±–∞–π—Ç");
            }
        }

        private async void RecordButton_Click(object sender, RoutedEventArgs e)
        {
            if (_isRecording)
            {
                await StopRecordingAsync();
            }
            else
            {
                await StartRecordingAsync();
            }
        }

        private readonly object _recordingLock = new object();
        private bool _isProcessingToggle = false;

        private async Task StartRecordingAsync()
        {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç race condition
            lock (_recordingLock)
            {
                if (_isProcessingToggle || _isRecording)
                {
                    Console.WriteLine("StartRecording —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–ø–∏—Å—å –∏–¥–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º...");
                    return;
                }
                _isProcessingToggle = true;
            }

            try
            {
                if (_audioCaptureService == null)
                {
                    ShowError("–°–µ—Ä–≤–∏—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                _isRecording = true;
                _audioBuffer.Clear();
                UpdateRecordingButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "RecordCircle24");
                UpdateRecordingStatus("–ó–∞–ø–∏—Å—å...", "#ff9800");
                ClearResults();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                if (_serviceContext?.Config?.Overlay?.IsEnabled == true && _overlayService != null)
                {
                    Console.WriteLine("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay - –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å");
                    await _overlayService.ShowAsync(RecordingStatus.Recording);
                }                
                else
                {
                    Console.WriteLine("Overlay –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ ServiceContext –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                }

                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                int maxSeconds = _serviceContext?.Config?.Audio?.MaxRecordingSeconds ?? 30;

                Console.WriteLine($"=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");
                Console.WriteLine($"ServiceContext: {(_serviceContext != null ? "–µ—Å—Ç—å" : "null")}");
                Console.WriteLine($"Config: {(_serviceContext?.Config != null ? "–µ—Å—Ç—å" : "null")}");
                Console.WriteLine($"Audio: {(_serviceContext?.Config?.Audio != null ? "–µ—Å—Ç—å" : "null")}");
                Console.WriteLine($"MaxRecordingSeconds –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {_serviceContext?.Config?.Audio?.MaxRecordingSeconds}");
                Console.WriteLine($"–ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxSeconds: {maxSeconds}");
                Console.WriteLine($"================================");

                var audioConfig = new AudioConfig
                {
                    SampleRate = 16000,
                    Channels = 1,
                    BitsPerSample = 16,
                    MaxRecordingSeconds = maxSeconds
                };
                
                Console.WriteLine($"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ {maxSeconds} —Å–µ–∫—É–Ω–¥ ({maxSeconds * 1000} –º—Å)");

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
                bool started = await _audioCaptureService.StartCaptureAsync(audioConfig);
                if (!started)
                {
                    ShowError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å");
                    await StopRecordingAsync();
                    return;
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
                _recordingTimer?.Dispose();
                _recordingTimer = new System.Threading.Timer(async _ =>
                {
                    Console.WriteLine($"‚è∞ –¢–ê–ô–ú–ï–† –°–†–ê–ë–û–¢–ê–õ! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ {maxSeconds} —Å–µ–∫—É–Ω–¥");
                    if (_isRecording)
                    {
                        try
                        {
                            await Dispatcher.InvokeAsync(async () =>
                            {
                                await StopRecordingAsync();
                            });
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å—Ç–æ–ø–∞: {ex.Message}");
                        }
                    }
                }, null, maxSeconds * 1000, Timeout.Infinite);
                Console.WriteLine("–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å");
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {ex.Message}");
                await StopRecordingAsync();
            }
            finally
            {
                lock (_recordingLock)
                {
                    _isProcessingToggle = false;
                }
            }
        }

        /// <summary>
        /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Ç–∫–µ–π
        /// </summary>
        public async Task TriggerRecordingFromHotkey()
        {
            try
            {
                Console.WriteLine($"üé§ [MainPageView] TriggerRecordingFromHotkey –≤—ã–∑–≤–∞–Ω");
                Console.WriteLine($"üìù [MainPageView] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ _isRecording: {_isRecording}");
        
                if (_isRecording)
                {
                    Console.WriteLine($"üìù [MainPageView] –ó–∞–ø–∏—Å—å –∏–¥–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...");
                    await StopRecordingAsync();
                }
                else
                {
                    Console.WriteLine($"üìù [MainPageView] –ó–∞–ø–∏—Å—å –Ω–µ –∏–¥–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º...");
                    await StartRecordingAsync();
                }
        
                Console.WriteLine($"üé§ [MainPageView] TriggerRecordingFromHotkey –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå [MainPageView] –û—à–∏–±–∫–∞ –≤ TriggerRecordingFromHotkey: {ex.Message}");
                ShowError($"–û—à–∏–±–∫–∞ —Ö–æ—Ç–∫–µ—è: {ex.Message}");
            }
        }
        
        private async Task StopRecordingAsync()
        {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            if (!_isRecording) return;

            try
            {
                // –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–∏—Å–∏
                _isRecording = false;

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                _recordingTimer?.Dispose();
                _recordingTimer = null;

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
                if (_audioCaptureService != null)
                {
                    await _audioCaptureService.StopCaptureAsync();
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                if (_audioBuffer.Count > 0 && _speechRecognitionService != null)
                {
                    UpdateRecordingStatus("–û–±—Ä–∞–±–æ—Ç–∫–∞...", "#2196f3");
                    
                    var startTime = DateTime.Now;
                    var audioData = _audioBuffer.ToArray();
                    
                    Console.WriteLine($"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {audioData.Length} –±–∞–π—Ç");
                    var result = await _speechRecognitionService.RecognizeAsync(audioData);
                    var processingTime = DateTime.Now - startTime;

                    Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: Success={result.Success}, Text='{result.RecognizedText}'");
                    ShowResult(result, processingTime);
                }
                else
                {
                    ShowError("–ù–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {ex.Message}");
                Console.WriteLine($"–û—à–∏–±–∫–∞ –≤ StopRecordingAsync: {ex.Message}");
            }
            finally
            {
                _isRecording = false;
                UpdateRecordingButton("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "Mic24");
                UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
                _audioBuffer.Clear();
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º overlay –µ—Å–ª–∏ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
            if (_serviceContext?.Config?.Overlay?.IsEnabled == true && _overlayService != null)
            {
                Console.WriteLine("–°–∫—Ä—ã–≤–∞–µ–º overlay - –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                await _overlayService.HideAsync();
            }        
        }

        
        private void ShowResult(VoiceProcessingResult result, TimeSpan processingTime)
        {
            if (result.Success && !string.IsNullOrWhiteSpace(result.RecognizedText))
            {
                ResultText.Text = result.RecognizedText;
                ResultText.Foreground = Brushes.White;
                ResultText.FontStyle = FontStyles.Normal;

                ConfidenceText.Text = $"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.Confidence:P0}";
                ProcessingTimeText.Text = $"–í—Ä–µ–º—è: {processingTime.TotalMilliseconds:F0}–º—Å";

                UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
                
                Console.WriteLine($"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{result.RecognizedText}'");
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                
                if (_serviceContext?.Config?.System?.ShowNotifications == true)
                {
                    Console.WriteLine("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏");
                    ShowNotification("ChatCaster", $"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {result.RecognizedText}");
                }
                else
                {
                    Console.WriteLine("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
                }

            }
            else
            {
                string errorMessage = result.ErrorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å";
                ResultText.Text = errorMessage;
                ResultText.Foreground = new SolidColorBrush(Color.FromRgb(244, 67, 54));
                ResultText.FontStyle = FontStyles.Italic;

                ConfidenceText.Text = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
                ProcessingTimeText.Text = $"–í—Ä–µ–º—è: {processingTime.TotalMilliseconds:F0}–º—Å";

                UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
                
                Console.WriteLine($"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {errorMessage}");
            }
        }

        private void ShowNotification(string title, string message)
        {
            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                var notification = new System.Windows.Forms.NotifyIcon();
                notification.Icon = System.Drawing.SystemIcons.Information;
                notification.Visible = true;
                notification.ShowBalloonTip(3000, title, message, System.Windows.Forms.ToolTipIcon.Info);
        
                // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                Task.Delay(5000).ContinueWith(_ => notification.Dispose());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}");
            }
        }
        
        private void ShowError(string message)
        {
            ResultText.Text = message;
            ResultText.Foreground = new SolidColorBrush(Color.FromRgb(244, 67, 54));
            ResultText.FontStyle = FontStyles.Italic;

            ConfidenceText.Text = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText.Text = "–í—Ä–µ–º—è: -";

            UpdateRecordingStatus("–û—à–∏–±–∫–∞", "#f44336");
            
            Console.WriteLine($"–û—à–∏–±–∫–∞: {message}");
        }

        private void ClearResults()
        {
            ResultText.Text = "–û–±—Ä–∞–±–æ—Ç–∫–∞...";
            ResultText.Foreground = new SolidColorBrush(Color.FromRgb(153, 153, 153));
            ResultText.FontStyle = FontStyles.Italic;

            ConfidenceText.Text = "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: -";
            ProcessingTimeText.Text = "–í—Ä–µ–º—è: -";
        }

        private void UpdateRecordingStatus(string status, string color)
        {
            RecordingStatusText.Text = status;
            RecordingStatusText.Foreground = new SolidColorBrush(
                (Color)ColorConverter.ConvertFromString(color));
        }

        private void UpdateRecordingButton(string content, string iconSymbol)
        {
            RecordButton.Content = content;
            // TODO: –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }

        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–≤–Ω–µ
        public void UpdateDeviceStatus(string deviceName)
        {
            CurrentDeviceText.Text = $"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {deviceName}";
        }

        public void UpdateConnectionStatus(bool isConnected)
        {
            if (isConnected)
            {
                UpdateRecordingStatus("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", "#4caf50");
            }
            else
            {
                UpdateRecordingStatus("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "#f44336");
            }
        }

        // Cleanup –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        private void Page_Unloaded(object sender, RoutedEventArgs e)
        {
            try
            {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
                if (_audioCaptureService != null)
                {
                    _audioCaptureService.AudioDataReceived -= OnAudioDataReceived;
                }

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                _recordingTimer?.Dispose();
                _recordingTimer = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ MainPageView: {ex.Message}");
            }
        }
    }
}