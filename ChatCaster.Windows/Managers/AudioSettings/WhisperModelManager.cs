using ChatCaster.Core.Models;
using ChatCaster.Core.Services.Audio;
using ChatCaster.Core.Services.System;
using ChatCaster.SpeechRecognition.Whisper.Constants;
using CommunityToolkit.Mvvm.ComponentModel;
using Serilog;
using System.IO;

namespace ChatCaster.Windows.Managers.AudioSettings
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ Whisper
    /// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
    /// </summary>
    public class WhisperModelManager
    {
        private readonly ISpeechRecognitionService _speechRecognitionService;
        private readonly AppConfig _currentConfig;
        private readonly ILocalizationService _localizationService;

        public WhisperModelManager(
            ISpeechRecognitionService speechRecognitionService,
            AppConfig currentConfig,
            ILocalizationService localizationService)
        {
            _speechRecognitionService = speechRecognitionService ?? throw new ArgumentNullException(nameof(speechRecognitionService));
            _currentConfig = currentConfig ?? throw new ArgumentNullException(nameof(currentConfig));
            _localizationService = localizationService ?? throw new ArgumentNullException(nameof(localizationService));
        }
        
        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        /// </summary>
        public async Task<List<WhisperModelItem>> GetAvailableModelsWithStatusAsync()
        {
            var models = new List<WhisperModelItem>();
            
            foreach (var modelSize in WhisperConstants.ModelSizes.All)
            {
                var isDownloaded = await IsModelDownloadedAsync(modelSize);
                
                models.Add(new WhisperModelItem
                {
                    ModelSize = modelSize,
                    DisplayName = GetModelDisplayName(modelSize),
                    Description = GetModelDescription(modelSize),
                    IsDownloaded = isDownloaded,
                    StatusIcon = isDownloaded ? "‚úÖ" : "‚¨áÔ∏è"
                });
            }
            
            return models;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
        /// </summary>
        private async Task<bool> IsModelDownloadedAsync(string modelSize)
        {
            try
            {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                var modelsDirectory = Path.Combine(AppContext.BaseDirectory, "Models");
                var modelPath = Path.Combine(modelsDirectory, $"ggml-{modelSize}.bin");
        
                Log.Debug("üîç [MODEL_CHECK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å –ø–æ –ø—É—Ç–∏: {ModelPath}", modelPath);
        
                var exists = await Task.Run(() => File.Exists(modelPath));
                Log.Debug("üîç [MODEL_CHECK] –ú–æ–¥–µ–ª—å {ModelSize} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {Exists}", modelSize, exists);
        
                return exists;
            }
            catch (Exception ex)
            {
                Log.Warning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ {ModelSize}", modelSize);
                return false;
            }
        }
        
        
        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ —Ä–µ—á–µ–≤–æ–º—É —Å–µ—Ä–≤–∏—Å—É –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        /// </summary>
        public async Task<bool> ApplyCurrentConfigAsync()
        {
            try
            {
                Log.Information("üîç [MANAGER] –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ —Ä–µ—á–µ–≤–æ–º—É —Å–µ—Ä–≤–∏—Å—É");
        
                var speechConfig = _currentConfig.SpeechRecognition;
                var modelSize = speechConfig.EngineSettings.TryGetValue("ModelSize", out var model) 
                    ? model?.ToString() ?? "tiny" 
                    : "tiny";

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞
                var isDownloaded = await IsModelDownloadedAsync(modelSize);
        
                if (!isDownloaded)
                {
                    Log.Warning("üîç [MANAGER] –ú–æ–¥–µ–ª—å {ModelSize} –ù–ï –°–ö–ê–ß–ê–ù–ê, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", modelSize);
                    return false;
                }

                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∫–∞—á–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                var result = await _speechRecognitionService.ReloadConfigAsync(speechConfig);
        
                Log.Information("üîç [MANAGER] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {Result}", result);
                return result;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "üîç [MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                return false;
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        /// </summary>
        public Task<ModelStatusInfo> CheckModelStatusAsync()
        {
            try
            {
                return Task.FromResult(_speechRecognitionService.IsInitialized 
                    ? new ModelStatusInfo(_localizationService.GetString("Audio_ModelReady"), "#4caf50", ModelState.Ready) 
                    : new ModelStatusInfo(_localizationService.GetString("Audio_ModelNotLoaded"), "#ff9800", ModelState.NotDownloaded));
            }
            catch (Exception ex)
            {
                Log.Error(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –≤ WhisperModelManager");
                return Task.FromResult(new ModelStatusInfo(_localizationService.GetString("Audio_ModelError"), "#f44336", ModelState.Error));
            }
        }
        
        /// <summary>
        /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Whisper
        /// </summary>
        public async Task<ModelStatusInfo> DownloadModelAsync(string modelSize)
        {
            try
            {
                Log.Information("WhisperModelManager –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏: {Model}", modelSize);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
                var speechConfig = _currentConfig.SpeechRecognition;
                speechConfig.EngineSettings["ModelSize"] = modelSize;
                
                var result = await _speechRecognitionService.ReloadConfigAsync(speechConfig);
                
                if (result)
                {
                    Log.Information("WhisperModelManager –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {Model}", modelSize);
                    return new ModelStatusInfo(_localizationService.GetString("Audio_ModelReady"), "#4caf50", ModelState.Ready);
                }
                else
                {
                    Log.Error("WhisperModelManager –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {Model}", modelSize);
                    return new ModelStatusInfo(_localizationService.GetString("Audio_DownloadError"), "#f44336", ModelState.Error);
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "WhisperModelManager –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {Model}", modelSize);
                return new ModelStatusInfo(_localizationService.GetString("Audio_DownloadError"), "#f44336", ModelState.Error);
            }
        }

        private string GetModelDisplayName(string modelSize)
        {
            return modelSize switch
            {
                WhisperConstants.ModelSizes.Tiny => $"{_localizationService.GetString("Audio_Model_Tiny")} ‚ö° (~76 MB)",
                WhisperConstants.ModelSizes.Base => $"{_localizationService.GetString("Audio_Model_Base")} üéØ (~144 MB)",
                WhisperConstants.ModelSizes.Small => $"{_localizationService.GetString("Audio_Model_Small")} üí™ (~476 MB)",
                WhisperConstants.ModelSizes.Medium => $"{_localizationService.GetString("Audio_Model_Medium")} üß† (~1.5 GB)",
                WhisperConstants.ModelSizes.Large => $"{_localizationService.GetString("Audio_Model_Large")} üöÄ (~3.0 GB)",
                _ => modelSize
            };
        }

        private string GetModelDescription(string modelSize)
        {
            return modelSize switch
            {
                WhisperConstants.ModelSizes.Tiny => _localizationService.GetString("Audio_Model_Tiny_Desc"),
                WhisperConstants.ModelSizes.Base => _localizationService.GetString("Audio_Model_Base_Desc"),
                WhisperConstants.ModelSizes.Small => _localizationService.GetString("Audio_Model_Small_Desc"),
                WhisperConstants.ModelSizes.Medium => _localizationService.GetString("Audio_Model_Medium_Desc"),
                WhisperConstants.ModelSizes.Large => _localizationService.GetString("Audio_Model_Large_Desc"),
                _ => _localizationService.GetString("Audio_Model_Unknown")
            };
        }
    }

    #region Helper Classes

    /// <summary>
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –º–æ–¥–µ–ª–∏
    /// </summary>
    public class ModelStatusInfo
    {
        public string StatusText { get; }
        public string StatusColor { get; }
        public ModelState State { get; }

        public ModelStatusInfo(string statusText, string statusColor, ModelState state)
        {
            StatusText = statusText;
            StatusColor = statusColor;
            State = state;
        }
    }

    /// <summary>
    /// –°–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è UI
    /// </summary>
    public enum ModelState
    {
        Ready,
        NotDownloaded,
        Downloading,
        Error
    }

    public partial class WhisperModelItem : ObservableObject
    {
        [ObservableProperty]
        private string _modelSize = "";
    
        [ObservableProperty] 
        private string _displayName = "";
    
        [ObservableProperty]
        private string _description = "";
    
        [ObservableProperty]
        private bool _isDownloaded;
    
        [ObservableProperty]
        private string _statusIcon = "";
        
        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º ComboBox - —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        /// </summary>
        public override string ToString()
        {
            return $"{StatusIcon} {DisplayName}";
        }

    }

    #endregion
}