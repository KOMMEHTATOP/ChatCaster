using Serilog;

namespace ChatCaster.Windows.Managers.VoiceRecording;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ
/// </summary>
public class AudioBufferManager
{
    private readonly List<byte> _recordingBuffer = new();
    private bool _isRecording = false;

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é - –æ—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä –∏ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    public void StartBuffering()
    {
        lock (_recordingBuffer)
        {
            _recordingBuffer.Clear();
            _isRecording = true;
        }
    }

    /// <summary>
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    /// </summary>
    public byte[] StopBufferingAndGetData()
    {
        lock (_recordingBuffer)
        {
            _isRecording = false;
            var audioData = _recordingBuffer.ToArray();
            _recordingBuffer.Clear();
            
            Log.Information($"üì§ –ü–æ–ª—É—á–µ–Ω–æ {audioData.Length} –±–∞–π—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è");
            return audioData;
        }
    }

    /// <summary>
    /// –û—Ç–º–µ–Ω–∏—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é - –æ—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä
    /// </summary>
    public void CancelBuffering()
    {
        lock (_recordingBuffer)
        {
            _isRecording = false;
            _recordingBuffer.Clear();
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞)
    /// </summary>
    public void OnAudioDataReceived(byte[] audioData)
    {
        if (_isRecording)
        {
            lock (_recordingBuffer)
            {
                _recordingBuffer.AddRange(audioData);
            }
        }
    }
}
