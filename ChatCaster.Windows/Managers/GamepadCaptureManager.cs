using ChatCaster.Core.Models;
using ChatCaster.Windows.Interfaces;
using ChatCaster.Windows.Services.GamepadService;
using ChatCaster.Windows.Utilities;

namespace ChatCaster.Windows.Managers
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥–µ–π–º–ø–∞–¥–∞
    /// </summary>
    public sealed class GamepadCaptureManager : ICaptureManager<GamepadShortcut>
    {
        #region Events

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–µ–π–º–ø–∞–¥–∞
        /// </summary>
        public event Action<GamepadShortcut>? CaptureCompleted;

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public event Action? CaptureTimeout;

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public event Action<string>? StatusChanged;

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public event Action<string>? CaptureError;

        #endregion

        #region Private Fields

        private readonly MainGamepadService _gamepadService;
        private readonly InputCaptureTimer _captureTimer;
        private GamepadCaptureService? _gamepadCaptureService;
        private bool _isDisposed;

        #endregion

        #region Constructor

        public GamepadCaptureManager(MainGamepadService gamepadService)
        {
            _gamepadService = gamepadService ?? throw new ArgumentNullException(nameof(gamepadService));
            _captureTimer = new InputCaptureTimer();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç–∞–π–º–µ—Ä–∞
            _captureTimer.TimerExpired += OnCaptureTimerExpired;
        }

        #endregion

        #region ICaptureManager Implementation

        /// <summary>
        /// –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public bool IsCapturing => _captureTimer.IsRunning;

        /// <summary>
        /// –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≥–µ–π–º–ø–∞–¥ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public bool IsAvailable { get; private set; } = true;

        /// <summary>
        /// –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–µ–π–º–ø–∞–¥–∞
        /// </summary>
        /// <param name="timeoutSeconds">–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö</param>
        public async Task StartCaptureAsync(int timeoutSeconds)
        {
            if (_isDisposed)
                throw new ObjectDisposedException(nameof(GamepadCaptureManager));

            if (IsCapturing)
                throw new InvalidOperationException("–ó–∞—Ö–≤–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–π–º–ø–∞–¥–∞
                var gamepad = await _gamepadService.GetConnectedGamepadAsync();
                if (gamepad == null)
                {
                    CaptureError?.Invoke("–ì–µ–π–º–ø–∞–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∑–∞—Ö–≤–∞—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
                if (_gamepadCaptureService == null)
                {
                    _gamepadCaptureService = new GamepadCaptureService(_gamepadService);
                    _gamepadCaptureService.ShortcutCaptured += OnGamepadShortcutCaptured;
                    _gamepadCaptureService.CaptureStatusChanged += OnGamepadCaptureStatusChanged;
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                _captureTimer.Start(timeoutSeconds);
                
                // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç
                await _gamepadCaptureService.StartCaptureAsync(timeoutSeconds);
                
                StatusChanged?.Invoke("–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫ –Ω–∞ –≥–µ–π–º–ø–∞–¥–µ...");
            }
            catch (Exception ex)
            {
                _captureTimer.Stop();
                CaptureError?.Invoke($"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public void StopCapture()
        {
            if (_isDisposed) return;

            _captureTimer.Stop();
            _gamepadCaptureService?.StopCapture();
            
            StatusChanged?.Invoke("–ó–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        #endregion

        #region Private Event Handlers

        private void OnCaptureTimerExpired()
        {
            if (_isDisposed) return;

            _gamepadCaptureService?.StopCapture();
            CaptureTimeout?.Invoke();
        }

        private void OnGamepadShortcutCaptured(object? sender, GamepadShortcut capturedShortcut)
        {
            System.Diagnostics.Debug.WriteLine($"üéÆ [GamepadCaptureManager] OnGamepadShortcutCaptured: {capturedShortcut.DisplayText}");
            
            if (_isDisposed) 
            {
                System.Diagnostics.Debug.WriteLine($"üéÆ [GamepadCaptureManager] –û–¢–ö–õ–û–ù–ï–ù–û - –æ–±—ä–µ–∫—Ç disposed");
                return;
            }

            try
            {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                _captureTimer.Stop();
                System.Diagnostics.Debug.WriteLine($"üéÆ [GamepadCaptureManager] –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞—Ö–≤–∞—Ç–µ
                StatusChanged?.Invoke("–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞!");
                System.Diagnostics.Debug.WriteLine($"üéÆ [GamepadCaptureManager] StatusChanged –≤—ã–∑–≤–∞–Ω–æ");
                
                CaptureCompleted?.Invoke(capturedShortcut);
                System.Diagnostics.Debug.WriteLine($"üéÆ [GamepadCaptureManager] CaptureCompleted –≤—ã–∑–≤–∞–Ω–æ");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå [GamepadCaptureManager] –û—à–∏–±–∫–∞: {ex.Message}");
                CaptureError?.Invoke($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            }
        }
        
        private void OnGamepadCaptureStatusChanged(object? sender, string status)
        {
            if (_isDisposed) return;

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—Ö–≤–∞—Ç–∞
            if (!status.Contains("–ó–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
            {
                StatusChanged?.Invoke(status);
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–π–º–ø–∞–¥–∞
        /// </summary>
        /// <returns>true –µ—Å–ª–∏ –≥–µ–π–º–ø–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω</returns>
        public async Task<bool> UpdateAvailabilityAsync()
        {
            if (_isDisposed) return false;

            try
            {
                var gamepad = await _gamepadService.GetConnectedGamepadAsync();
                IsAvailable = gamepad != null;
                return IsAvailable;
            }
            catch
            {
                IsAvailable = false;
                return false;
            }
        }

        #endregion

        #region IDisposable Implementation

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        /// </summary>
        public void Dispose()
        {
            if (_isDisposed) return;

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç
            StopCapture();

            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
            _captureTimer.TimerExpired -= OnCaptureTimerExpired;
            _captureTimer.Dispose();

            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∑–∞—Ö–≤–∞—Ç–∞ –≥–µ–π–º–ø–∞–¥–∞
            if (_gamepadCaptureService != null)
            {
                _gamepadCaptureService.ShortcutCaptured -= OnGamepadShortcutCaptured;
                _gamepadCaptureService.CaptureStatusChanged -= OnGamepadCaptureStatusChanged;
                _gamepadCaptureService.Dispose();
                _gamepadCaptureService = null;
            }

            // –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            CaptureCompleted = null;
            CaptureTimeout = null;
            StatusChanged = null;
            CaptureError = null;

            _isDisposed = true;
        }

        #endregion
    }
}