using Serilog;
using System.Windows;

namespace ChatCaster.Windows.Managers
{
    /// <summary>
    /// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞—Ö–≤–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    /// </summary>
    public enum CaptureState
    {
        Idle,       // –ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
        Capturing,  // –ü—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞
        Success,    // –£—Å–ø–µ—à–Ω—ã–π –∑–∞—Ö–≤–∞—Ç
        Error,      // –û—à–∏–±–∫–∞
        Timeout     // –¢–∞–π–º–∞—É—Ç
    }

    /// <summary>
    /// –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UI –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
    /// </summary>
    public class CaptureUIState
    {
        public string Text { get; set; } = string.Empty;
        public string TextColor { get; set; } = "White";
        public string StatusMessage { get; set; } = string.Empty;
        public bool ShowTimer { get; set; }
        public int TimeLeft { get; set; }
        public CaptureState State { get; set; } = CaptureState.Idle;
    }

    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ UI –∑–∞—Ö–≤–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    /// </summary>
    public sealed class CaptureUIStateManager : IDisposable
    {
        private readonly static ILogger _logger = Log.ForContext<CaptureUIStateManager>();

        #region Events

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
        /// </summary>
        public event Action<CaptureUIState>? StateChanged;

        #endregion

        #region Private Fields

        private CaptureUIState _currentState;
        private string _originalText = string.Empty;
        private bool _isDisposed;
        private Timer? _countdownTimer;
        #endregion

        #region Color Constants

        private const string IdleColor = "White";
        private const string CapturingColor = "#ff6b6b";  // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π
        private const string SuccessColor = "#4caf50";    // –ó–µ–ª–µ–Ω—ã–π
        private const string ErrorColor = "#f44336";      // –ö—Ä–∞—Å–Ω—ã–π

        #endregion

        #region Constructor

        public CaptureUIStateManager()
        {
            _currentState = new CaptureUIState();
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        /// </summary>
        public CaptureUIState CurrentState 
        { 
            get => _currentState; 
            private set
            {
                _currentState = value;
                StateChanged?.Invoke(_currentState);
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        /// </summary>
        /// <param name="text">–ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—É—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è)</param>
        public void SetIdleState(string text)
        {
            if (_isDisposed) return;

            _originalText = text;
            CurrentState = new CaptureUIState
            {
                Text = text,
                TextColor = IdleColor,
                StatusMessage = string.Empty,
                ShowTimer = false,
                TimeLeft = 0,
                State = CaptureState.Idle
            };
        }

        /// <summary>
        /// –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        /// <param name="capturingMessage">–°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞</param>
        /// <param name="timeoutSeconds">–í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞</param>
        public void StartCapture(string capturingMessage, int timeoutSeconds)
        {
            if (_isDisposed) return;

            // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            _countdownTimer?.Dispose();

            var timeLeft = timeoutSeconds;
            
            CurrentState = new CaptureUIState
            {
                Text = capturingMessage,
                TextColor = CapturingColor,
                StatusMessage = "–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞...",
                ShowTimer = true,
                TimeLeft = timeLeft,
                State = CaptureState.Capturing
            };

            _logger.Debug("–ù–∞—á–∞—Ç –∑–∞—Ö–≤–∞—Ç: {Message}, —Ç–∞–π–º–∞—É—Ç: {Timeout}—Å", capturingMessage, timeoutSeconds);

            // –ó–ê–ü–£–°–ö–ê–ï–ú —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            _countdownTimer = new Timer(_ =>
            {
                if (_isDisposed || CurrentState.State != CaptureState.Capturing) return;

                timeLeft--;

                if (timeLeft >= 0)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                    Application.Current?.Dispatcher.InvokeAsync(() =>
                    {
                        if (!_isDisposed && CurrentState.State == CaptureState.Capturing)
                        {
                            CurrentState = new CaptureUIState
                            {
                                Text = CurrentState.Text,
                                TextColor = CurrentState.TextColor,
                                StatusMessage = CurrentState.StatusMessage,
                                ShowTimer = true,
                                TimeLeft = timeLeft,
                                State = CaptureState.Capturing
                            };
                        }
                    });
                }

                if (timeLeft <= 0)
                {
                    _countdownTimer?.Dispose();
                    _countdownTimer = null;
                }
            }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
        }

        /// <summary>
        /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç —É—Å–ø–µ—à–Ω–æ
        /// </summary>
        /// <param name="successText">–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</param>
        /// <param name="statusMessage">–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ</param>
        public async Task CompleteSuccessAsync(string successText, string statusMessage = "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        {
            if (_isDisposed) return;

            _originalText = successText;
            _logger.Debug("üü¢ CompleteSuccessAsync: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ó–ï–õ–ï–ù–´–ô —Ü–≤–µ—Ç");

            CurrentState = new CaptureUIState
            {
                Text = successText,
                TextColor = SuccessColor,
                StatusMessage = statusMessage,
                ShowTimer = false,
                TimeLeft = 0,
                State = CaptureState.Success
            };
            _logger.Debug("üü¢ StateChanged —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º");

            _logger.Information("–ó–∞—Ö–≤–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {Text}", successText);

            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            _logger.Debug("üü¢ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...");

            await Task.Delay(1000);
            if (!_isDisposed)
            {
                _logger.Debug("üü¢ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ Idle (–±–µ–ª—ã–π)");
                ReturnToIdle();
            }
        }
        
        /// <summary>
        /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç —Å –æ—à–∏–±–∫–æ–π
        /// </summary>
        /// <param name="errorMessage">–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ</param>
        public async Task CompleteWithErrorAsync(string errorMessage)
        {
            if (_isDisposed) return;

            CurrentState = new CaptureUIState
            {
                Text = _originalText,
                TextColor = ErrorColor,
                StatusMessage = errorMessage,
                ShowTimer = false,
                TimeLeft = 0,
                State = CaptureState.Error
            };

            _logger.Warning("–ó–∞—Ö–≤–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {Error}", errorMessage);

            // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await Task.Delay(3000);
            if (!_isDisposed)
            {
                ReturnToIdle();
            }
        }

        /// <summary>
        /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        /// </summary>
        public async Task CompleteWithTimeoutAsync()
        {
            if (_isDisposed) return;

            CurrentState = new CaptureUIState
            {
                Text = _originalText,
                TextColor = IdleColor,
                StatusMessage = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ",
                ShowTimer = false,
                TimeLeft = 0,
                State = CaptureState.Timeout
            };

            _logger.Debug("–ó–∞—Ö–≤–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É");

            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await Task.Delay(2000);
            if (!_isDisposed)
            {
                ReturnToIdle();
            }
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        /// </summary>
        private void ReturnToIdle()
        {
            CurrentState = new CaptureUIState
            {
                Text = _originalText,
                TextColor = IdleColor,
                StatusMessage = string.Empty,
                ShowTimer = false,
                TimeLeft = 0,
                State = CaptureState.Idle
            };
        }

        #endregion

        #region IDisposable Implementation

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        /// </summary>
        public void Dispose()
        {
            if (_isDisposed) return;
            
            // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            _countdownTimer?.Dispose();
            _countdownTimer = null;
            
            _isDisposed = true;
            StateChanged = null;
        }

        #endregion
    }
}