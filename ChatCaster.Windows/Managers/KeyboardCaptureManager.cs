using ChatCaster.Core.Models;
using ChatCaster.Windows.Converters;
using ChatCaster.Windows.Interfaces;
using ChatCaster.Windows.Utilities;
using NHotkey;
using NHotkey.Wpf;
using Serilog;
using Key = System.Windows.Input.Key;
using ModifierKeys = System.Windows.Input.ModifierKeys;

namespace ChatCaster.Windows.Managers
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    /// </summary>
    public sealed class KeyboardCaptureManager : ICaptureManager<KeyboardShortcut>
    {
        private readonly static ILogger _logger = Log.ForContext<KeyboardCaptureManager>();
        private readonly AppConfig _currentConfig;


        private static Dictionary<string, (Key key, ModifierKeys modifiers)>? _hotkeyLookup;

        #region Events

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        /// </summary>
        public event Action<KeyboardShortcut>? CaptureCompleted;

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public event Action? CaptureTimeout;

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public event Action<string>? StatusChanged;

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public event Action<string>? CaptureError;

        #endregion

        #region Private Fields

        private readonly InputCaptureTimer _captureTimer;
        private readonly HashSet<string> _registeredHotkeys;
        private bool _isDisposed;

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª–∞–≤–∏—à –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ (–≤–º–µ—Å—Ç–æ 100+ —Ö–æ—Ç–∫–µ–µ–≤)
        private readonly static Key[] CaptureKeys =
        {
            // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–ª—è —Ö–æ—Ç–∫–µ–µ–≤)
            Key.F1, Key.F2, Key.F3, Key.F4, Key.F5, Key.F6, Key.F7, Key.F8, Key.F9, Key.F10, Key.F11, Key.F12,

            // Numpad (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–≥—Ä–∞—Ö)
            Key.NumPad0, Key.NumPad1, Key.NumPad2, Key.NumPad3, Key.NumPad4, Key.NumPad5, Key.NumPad6, Key.NumPad7,
            Key.NumPad8, Key.NumPad9,

            // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            Key.Insert, Key.Delete, Key.Home, Key.End, Key.PageUp, Key.PageDown,

            // –°—Ç—Ä–µ–ª–∫–∏
            Key.Up, Key.Down, Key.Left, Key.Right,

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Key.Space, Key.Tab, Key.Escape,

            // –ë—É–∫–≤—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            Key.R, Key.Q, Key.W, Key.E, Key.V
        };

        private readonly static ModifierKeys[] CaptureModifiers =
        {
            ModifierKeys.Control, ModifierKeys.Shift, ModifierKeys.Alt, ModifierKeys.Control | ModifierKeys.Shift,
            ModifierKeys.Control | ModifierKeys.Alt, ModifierKeys.Shift | ModifierKeys.Alt
        };

        #endregion

        #region Constructor

        public KeyboardCaptureManager(AppConfig currentConfig)
        {
            _currentConfig = currentConfig ?? throw new ArgumentNullException(nameof(currentConfig));
            _captureTimer = new InputCaptureTimer();
            _registeredHotkeys = new HashSet<string>();

            _captureTimer.TimerExpired += OnCaptureTimerExpired;
        }

        #endregion

        #region ICaptureManager Implementation

        /// <summary>
        /// –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public bool IsCapturing => _captureTimer.IsRunning;

        /// <summary>
        /// –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ (–≤—Å–µ–≥–¥–∞ true)
        /// </summary>
        public bool IsAvailable => true;

        /// <summary>
        /// –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        /// </summary>
        /// <param name="timeoutSeconds">–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö</param>
        public async Task StartCaptureAsync(int timeoutSeconds)
        {
            if (_isDisposed)
                throw new ObjectDisposedException(nameof(KeyboardCaptureManager));

            if (IsCapturing)
                throw new InvalidOperationException("–ó–∞—Ö–≤–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");

            try
            {
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ö–æ—Ç–∫–µ–µ–≤
                RegisterCaptureHotkeys();

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                _captureTimer.Start(timeoutSeconds);

                StatusChanged?.Invoke("–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à...");

                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                _captureTimer.Stop();
                ClearRegisteredHotkeys();
                CaptureError?.Invoke($"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞—Ö–≤–∞—Ç–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—Ö–≤–∞—Ç–∞
        /// </summary>
        public void StopCapture()
        {
            if (_isDisposed) return;

            _captureTimer.Stop();
            ClearRegisteredHotkeys();

            StatusChanged?.Invoke("–ó–∞—Ö–≤–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        #endregion

        #region Private Methods

        private void RegisterCaptureHotkeys()
        {
            ClearRegisteredHotkeys(); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

            int hotkeyIndex = 0;
            int registeredCount = 0;

            // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–£–Æ –ê–ö–¢–ò–í–ù–£–Æ –ö–û–ú–ë–ò–ù–ê–¶–ò–Æ
            var currentShortcut = _currentConfig.Input.KeyboardShortcut;

            EventHandler<HotkeyEventArgs> hotkeyHandler = OnHotkeyPressed;

            foreach (var modifier in CaptureModifiers)
            {
                foreach (var key in CaptureKeys)
                {
                    try
                    {
                        // ‚úÖ –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú WPF Key –í Core Key –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø
                        if (currentShortcut != null)
                        {
                            var coreKey = WpfCoreConverter.ConvertToCore(key);
                            var coreModifiers = WpfCoreConverter.ConvertToCore(modifier);

                            if (coreKey.HasValue &&
                                currentShortcut.Key == coreKey.Value &&
                                currentShortcut.Modifiers == coreModifiers)
                            {
                                _logger.Debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: {Key} + {Modifier}", key,
                                    modifier);
                                hotkeyIndex++;
                                continue;
                            }
                        }

                        var hotkeyName = $"KeyCapture_{hotkeyIndex++}";

                        HotkeyManager.Current.AddOrReplace(
                            hotkeyName,
                            key,
                            modifier,
                            hotkeyHandler);

                        _registeredHotkeys.Add(hotkeyName);
                        registeredCount++;

                        if (registeredCount <= 5)
                        {
                            _logger.Debug("Registered hotkey: {HotkeyName} = {Key} + {Modifier}", hotkeyName, key, modifier);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.Debug("Failed to register hotkey {Key} + {Modifier}: {Error}", key, modifier, ex.Message);
                    }
                }
            }

            _logger.Debug("Total registered hotkeys: {Count} (–∏—Å–∫–ª—é—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è: {CurrentShortcut})",
                registeredCount, currentShortcut?.DisplayText ?? "–Ω–µ—Ç");
        }
        private void OnHotkeyPressed(object? sender, HotkeyEventArgs e)
        {
            _logger.Debug("OnHotkeyPressed: {Name}", e.Name);

            if (!IsCapturing || _isDisposed)
            {
                _logger.Debug("Hotkey rejected - not capturing or disposed");
                return;
            }

            try
            {
                if (TryGetHotkeyInfo(e.Name, out var key, out var modifiers))
                {
                    _logger.Debug("Detected hotkey: {Key} + {Modifiers}", key, modifiers);

                    var keyboardShortcut = WpfCoreConverter.CreateKeyboardShortcut(key, modifiers);

                    if (keyboardShortcut != null)
                    {
                        // ‚úÖ –û–¢–õ–ê–î–ö–ê –ü–†–û–í–ï–†–ö–ò –î–£–ë–õ–ò–ö–ê–¢–ê
                        var currentShortcut = _currentConfig.Input.KeyboardShortcut;
                        _logger.Debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞:");
                        _logger.Debug("üîç –ù–∞–∂–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {Key} + {Modifiers}", keyboardShortcut.Key,
                            keyboardShortcut.Modifiers);
                        _logger.Debug("üîç –¢–µ–∫—É—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {CurrentKey} + {CurrentModifiers}",
                            currentShortcut?.Key, currentShortcut?.Modifiers);

                        if (currentShortcut != null &&
                            currentShortcut.Key == keyboardShortcut.Key &&
                            currentShortcut.Modifiers == keyboardShortcut.Modifiers)
                        {
                            _logger.Warning("üîç –î–£–ë–õ–ò–ö–ê–¢ –û–ë–ù–ê–†–£–ñ–ï–ù! –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç");
                            CaptureError?.Invoke("–ù–∞–∂–∞—Ç–∞ —Ç–µ–∫—É—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.");
                            return;
                        }

                        _logger.Debug("üîç –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞—Ö–≤–∞—Ç");

                        _logger.Information("Captured keyboard shortcut: {Shortcut}", keyboardShortcut.DisplayText);

                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç
                        _captureTimer.Stop();
                        ClearRegisteredHotkeys();

                        StatusChanged?.Invoke($"–ó–∞—Ö–≤–∞—á–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {keyboardShortcut.DisplayText}");
                        CaptureCompleted?.Invoke(keyboardShortcut);
                    }
                    else
                    {
                        _logger.Warning("Failed to create shortcut for {Key} + {Modifiers}", key, modifiers);
                        CaptureError?.Invoke("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à");
                    }
                }
                else
                {
                    _logger.Warning("Failed to parse hotkey: {Name}", e.Name);
                    CaptureError?.Invoke("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏");
                }

                e.Handled = true;
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Error processing hotkey");
                CaptureError?.Invoke($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à: {ex.Message}");
                StopCapture();
            }
        }

        private static Dictionary<string, (Key key, ModifierKeys modifiers)> GetHotkeyLookup()
        {
            if (_hotkeyLookup == null)
            {
                _hotkeyLookup = new Dictionary<string, (Key, ModifierKeys)>();
                int hotkeyIndex = 0;

                foreach (var modifier in CaptureModifiers)
                {
                    foreach (var captureKey in CaptureKeys)
                    {
                        var hotkeyName = $"KeyCapture_{hotkeyIndex++}";
                        _hotkeyLookup[hotkeyName] = (captureKey, modifier);
                    }
                }
            }

            return _hotkeyLookup;
        }

        private bool TryGetHotkeyInfo(string hotkeyName, out Key key, out ModifierKeys modifiers)
        {
            if (GetHotkeyLookup().TryGetValue(hotkeyName, out var result))
            {
                key = result.key;
                modifiers = result.modifiers;
                return true;
            }

            key = Key.None;
            modifiers = ModifierKeys.None;
            return false;
        }

        private void ClearRegisteredHotkeys()
        {
            foreach (var hotkeyName in _registeredHotkeys)
            {
                try
                {
                    HotkeyManager.Current.Remove(hotkeyName);
                }
                catch
                {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                }
            }

            _registeredHotkeys.Clear();
        }

        private void OnCaptureTimerExpired()
        {
            if (_isDisposed) return;

            ClearRegisteredHotkeys();
            CaptureTimeout?.Invoke();
        }

        #endregion

        #region IDisposable Implementation

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        /// </summary>
        public void Dispose()
        {
            if (_isDisposed) return;

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç
            StopCapture();

            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
            _captureTimer.TimerExpired -= OnCaptureTimerExpired;
            _captureTimer.Dispose();

            // –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            CaptureCompleted = null;
            CaptureTimeout = null;
            StatusChanged = null;
            CaptureError = null;

            _isDisposed = true;
        }

        #endregion

    }
}
