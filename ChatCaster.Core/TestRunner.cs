using ChatCaster.Core.Constants;
using ChatCaster.Core.Events;
using ChatCaster.Core.Exceptions;
using ChatCaster.Core.Models;
using ChatCaster.Core.Services;

namespace ChatCaster.Core;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
/// </summary>
public static class TestRunner
{
    public static void RunBasicTests()
    {
        Console.WriteLine($"=== {AppConstants.AppName} v{AppConstants.AppVersion} - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Core –º–æ–¥—É–ª—è ===");
        
        TestModels();
        TestEnums();
        TestEvents();
        TestExceptions();
        TestConstants();
        
        Console.WriteLine("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    }
    
    private static void TestModels()
    {
        Console.WriteLine("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...");
        
        // –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        var config = new AppConfig();
        Console.WriteLine($"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞. –ß–∞—Å—Ç–æ—Ç–∞: {config.Audio.SampleRate} Hz");
        
        // –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏
        var state = new RecordingState 
        { 
            Status = RecordingStatus.Recording,
            StartTime = DateTime.Now 
        };
        Console.WriteLine($"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state.Status} —Å {state.StartTime}");
        
        // –¢–µ—Å—Ç –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        var device = new AudioDevice 
        { 
            Name = "Test Microphone",
            Type = AudioDeviceType.UsbMicrophone,
            IsDefault = true 
        };
        Console.WriteLine($"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.Name} ({device.Type})");
        
        // –¢–µ—Å—Ç –≥–µ–π–º–ø–∞–¥–∞
        var gamepad = new GamepadInfo 
        { 
            Name = "Xbox Controller",
            Type = GamepadType.XboxSeries,
            IsConnected = true 
        };
        Console.WriteLine($"   –ì–µ–π–º–ø–∞–¥: {gamepad.Name} ({gamepad.Type})");
        
        Console.WriteLine("‚úÖ –ú–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç");
    }
    
    private static void TestEnums()
    {
        Console.WriteLine("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π...");
        
        // –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –≥–µ–π–º–ø–∞–¥–∞
        var buttons = Enum.GetValues<GamepadButton>();
        Console.WriteLine($"   –ö–Ω–æ–ø–æ–∫ –≥–µ–π–º–ø–∞–¥–∞: {buttons.Length}");
        
        // –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π Whisper
        var models = Enum.GetValues<WhisperModel>();
        Console.WriteLine($"   –ú–æ–¥–µ–ª–µ–π Whisper: {models.Length}");
        
        // –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–π overlay
        var positions = Enum.GetValues<OverlayPosition>();
        Console.WriteLine($"   –ü–æ–∑–∏—Ü–∏–π overlay: {positions.Length}");
        
        // –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–ø–∏—Å–∏
        var statuses = Enum.GetValues<RecordingStatus>();
        Console.WriteLine($"   –°—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–ø–∏—Å–∏: {statuses.Length}");
        
        Console.WriteLine("‚úÖ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç");
    }
    
    private static void TestEvents()
    {
        Console.WriteLine("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...");
        
        // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        var baseEvent = new RecordingStatusChangedEvent
        {
            OldStatus = RecordingStatus.Idle,
            NewStatus = RecordingStatus.Recording,
            Reason = "User pressed gamepad shortcut"
        };
        Console.WriteLine($"   –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {baseEvent.EventId} –≤ {baseEvent.Timestamp}");
        
        // –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –≥–µ–π–º–ø–∞–¥–∞
        var gamepadEvent = new GamepadConnectedEvent
        {
            GamepadIndex = 0,
            GamepadInfo = new GamepadInfo { Name = "Test Controller" }
        };
        Console.WriteLine($"   –°–æ–±—ã—Ç–∏–µ –≥–µ–π–º–ø–∞–¥–∞: –∏–Ω–¥–µ–∫—Å {gamepadEvent.GamepadIndex}");
        
        // –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–∫–∏
        var errorEvent = new ErrorOccurredEvent
        {
            ErrorMessage = "Test error message",
            Component = "TestComponent"
        };
        Console.WriteLine($"   –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏: {errorEvent.ErrorMessage}");
        
        Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç");
    }
    
    private static void TestExceptions()
    {
        Console.WriteLine("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π...");
        
        try
        {
            throw new AudioException("Test audio error");
        }
        catch (AudioException ex)
        {
            Console.WriteLine($"   –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: {ex.Component} - {ex.Message}");
        }
        
        try
        {
            throw new SpeechRecognitionException("Test recognition error", new InvalidOperationException("Inner"));
        }
        catch (SpeechRecognitionException ex)
        {
            Console.WriteLine($"   –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {ex.Component} - {ex.Message}");
        }
        
        Console.WriteLine("‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç");
    }
    
    private static void TestConstants()
    {
        Console.WriteLine("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç...");
        
        Console.WriteLine($"   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {AppConstants.AppName} v{AppConstants.AppVersion}");
        Console.WriteLine($"   –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø–∏—Å–∏: {AppConstants.MinRecordingSeconds}-{AppConstants.MaxRecordingSeconds} —Å–µ–∫");
        Console.WriteLine($"   –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {AppConstants.DefaultSampleRate} Hz");
        Console.WriteLine($"   –ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª: {AppConstants.ConfigFileName}");
        
        // –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        Console.WriteLine($"   –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {Messages.StatusIdle}");
        Console.WriteLine($"   –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {Messages.ErrorNoMicrophone}");
        
        Console.WriteLine("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç");
    }
    
    /// <summary>
    /// –¢–µ—Å—Ç WeakEventHandler (–±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)
    /// </summary>
    public static void TestWeakEventHandler()
    {
        Console.WriteLine("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WeakEventHandler...");
        
        var testEvent = new RecordingStatusChangedEvent 
        { 
            NewStatus = RecordingStatus.Recording 
        };
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        Action<RecordingStatusChangedEvent> handler = (e) => 
        {
            Console.WriteLine($"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: {e.NewStatus}");
        };
        
        var weakHandler = new WeakEventHandler<RecordingStatusChangedEvent>(handler);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
        bool result = weakHandler.TryExecute(testEvent);
        Console.WriteLine($"   –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}");
        Console.WriteLine($"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∏–≤: {weakHandler.IsAlive}");
        
        Console.WriteLine("‚úÖ WeakEventHandler —Ä–∞–±–æ—Ç–∞–µ—Ç");
    }
}